/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Api
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;

    using NiFi.Swagger.Core.Client;
    using NiFi.Swagger.Core.Model;

    using RestSharp;

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFlowfileQueuesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a request to drop the contents of the queue in this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>DropRequestEntity</returns>
        DropRequestEntity CreateDropRequest (string id);

        /// <summary>
        /// Creates a request to drop the contents of the queue in this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>ApiResponse of DropRequestEntity</returns>
        ApiResponse<DropRequestEntity> CreateDropRequestWithHttpInfo (string id);
        /// <summary>
        /// Lists the contents of the queue in this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>ListingRequestEntity</returns>
        ListingRequestEntity CreateFlowFileListing (string id);

        /// <summary>
        /// Lists the contents of the queue in this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>ApiResponse of ListingRequestEntity</returns>
        ApiResponse<ListingRequestEntity> CreateFlowFileListingWithHttpInfo (string id);
        /// <summary>
        /// Cancels and/or removes a request to list the contents of this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>ListingRequestEntity</returns>
        ListingRequestEntity DeleteListingRequest (string id, string listingRequestId);

        /// <summary>
        /// Cancels and/or removes a request to list the contents of this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>ApiResponse of ListingRequestEntity</returns>
        ApiResponse<ListingRequestEntity> DeleteListingRequestWithHttpInfo (string id, string listingRequestId);
        /// <summary>
        /// Gets the content for a FlowFile in a Connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>StreamingOutput</returns>
        StreamingOutput DownloadFlowFileContent (string id, string flowfileUuid, string clientId = null, string clusterNodeId = null);

        /// <summary>
        /// Gets the content for a FlowFile in a Connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>ApiResponse of StreamingOutput</returns>
        ApiResponse<StreamingOutput> DownloadFlowFileContentWithHttpInfo (string id, string flowfileUuid, string clientId = null, string clusterNodeId = null);
        /// <summary>
        /// Gets the current status of a drop request for the specified connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>DropRequestEntity</returns>
        DropRequestEntity GetDropRequest (string id, string dropRequestId);

        /// <summary>
        /// Gets the current status of a drop request for the specified connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>ApiResponse of DropRequestEntity</returns>
        ApiResponse<DropRequestEntity> GetDropRequestWithHttpInfo (string id, string dropRequestId);
        /// <summary>
        /// Gets a FlowFile from a Connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>FlowFileEntity</returns>
        FlowFileEntity GetFlowFile (string id, string flowfileUuid, string clusterNodeId = null);

        /// <summary>
        /// Gets a FlowFile from a Connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>ApiResponse of FlowFileEntity</returns>
        ApiResponse<FlowFileEntity> GetFlowFileWithHttpInfo (string id, string flowfileUuid, string clusterNodeId = null);
        /// <summary>
        /// Gets the current status of a listing request for the specified connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>ListingRequestEntity</returns>
        ListingRequestEntity GetListingRequest (string id, string listingRequestId);

        /// <summary>
        /// Gets the current status of a listing request for the specified connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>ApiResponse of ListingRequestEntity</returns>
        ApiResponse<ListingRequestEntity> GetListingRequestWithHttpInfo (string id, string listingRequestId);
        /// <summary>
        /// Cancels and/or removes a request to drop the contents of this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>DropRequestEntity</returns>
        DropRequestEntity RemoveDropRequest (string id, string dropRequestId);

        /// <summary>
        /// Cancels and/or removes a request to drop the contents of this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>ApiResponse of DropRequestEntity</returns>
        ApiResponse<DropRequestEntity> RemoveDropRequestWithHttpInfo (string id, string dropRequestId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a request to drop the contents of the queue in this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>Task of DropRequestEntity</returns>
        System.Threading.Tasks.Task<DropRequestEntity> CreateDropRequestAsync (string id);

        /// <summary>
        /// Creates a request to drop the contents of the queue in this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>Task of ApiResponse (DropRequestEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<DropRequestEntity>> CreateDropRequestAsyncWithHttpInfo (string id);
        /// <summary>
        /// Lists the contents of the queue in this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>Task of ListingRequestEntity</returns>
        System.Threading.Tasks.Task<ListingRequestEntity> CreateFlowFileListingAsync (string id);

        /// <summary>
        /// Lists the contents of the queue in this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>Task of ApiResponse (ListingRequestEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingRequestEntity>> CreateFlowFileListingAsyncWithHttpInfo (string id);
        /// <summary>
        /// Cancels and/or removes a request to list the contents of this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>Task of ListingRequestEntity</returns>
        System.Threading.Tasks.Task<ListingRequestEntity> DeleteListingRequestAsync (string id, string listingRequestId);

        /// <summary>
        /// Cancels and/or removes a request to list the contents of this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>Task of ApiResponse (ListingRequestEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingRequestEntity>> DeleteListingRequestAsyncWithHttpInfo (string id, string listingRequestId);
        /// <summary>
        /// Gets the content for a FlowFile in a Connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>Task of StreamingOutput</returns>
        System.Threading.Tasks.Task<StreamingOutput> DownloadFlowFileContentAsync (string id, string flowfileUuid, string clientId = null, string clusterNodeId = null);

        /// <summary>
        /// Gets the content for a FlowFile in a Connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>Task of ApiResponse (StreamingOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamingOutput>> DownloadFlowFileContentAsyncWithHttpInfo (string id, string flowfileUuid, string clientId = null, string clusterNodeId = null);
        /// <summary>
        /// Gets the current status of a drop request for the specified connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>Task of DropRequestEntity</returns>
        System.Threading.Tasks.Task<DropRequestEntity> GetDropRequestAsync (string id, string dropRequestId);

        /// <summary>
        /// Gets the current status of a drop request for the specified connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>Task of ApiResponse (DropRequestEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<DropRequestEntity>> GetDropRequestAsyncWithHttpInfo (string id, string dropRequestId);
        /// <summary>
        /// Gets a FlowFile from a Connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>Task of FlowFileEntity</returns>
        System.Threading.Tasks.Task<FlowFileEntity> GetFlowFileAsync (string id, string flowfileUuid, string clusterNodeId = null);

        /// <summary>
        /// Gets a FlowFile from a Connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>Task of ApiResponse (FlowFileEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowFileEntity>> GetFlowFileAsyncWithHttpInfo (string id, string flowfileUuid, string clusterNodeId = null);
        /// <summary>
        /// Gets the current status of a listing request for the specified connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>Task of ListingRequestEntity</returns>
        System.Threading.Tasks.Task<ListingRequestEntity> GetListingRequestAsync (string id, string listingRequestId);

        /// <summary>
        /// Gets the current status of a listing request for the specified connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>Task of ApiResponse (ListingRequestEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListingRequestEntity>> GetListingRequestAsyncWithHttpInfo (string id, string listingRequestId);
        /// <summary>
        /// Cancels and/or removes a request to drop the contents of this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>Task of DropRequestEntity</returns>
        System.Threading.Tasks.Task<DropRequestEntity> RemoveDropRequestAsync (string id, string dropRequestId);

        /// <summary>
        /// Cancels and/or removes a request to drop the contents of this connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>Task of ApiResponse (DropRequestEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<DropRequestEntity>> RemoveDropRequestAsyncWithHttpInfo (string id, string dropRequestId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FlowfileQueuesApi : IFlowfileQueuesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FlowfileQueuesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FlowfileQueuesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlowfileQueuesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FlowfileQueuesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this._exceptionFactory != null && this._exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return this._exceptionFactory;
            }
            set { this._exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a request to drop the contents of the queue in this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>DropRequestEntity</returns>
        public DropRequestEntity CreateDropRequest (string id)
        {
             ApiResponse<DropRequestEntity> localVarResponse = this.CreateDropRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a request to drop the contents of the queue in this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>ApiResponse of DropRequestEntity</returns>
        public ApiResponse< DropRequestEntity > CreateDropRequestWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->CreateDropRequest");

            var localVarPath = "/flowfile-queues/{id}/drop-requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateDropRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DropRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DropRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DropRequestEntity)));
        }

        /// <summary>
        /// Creates a request to drop the contents of the queue in this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>Task of DropRequestEntity</returns>
        public async System.Threading.Tasks.Task<DropRequestEntity> CreateDropRequestAsync (string id)
        {
             ApiResponse<DropRequestEntity> localVarResponse = await this.CreateDropRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a request to drop the contents of the queue in this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>Task of ApiResponse (DropRequestEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DropRequestEntity>> CreateDropRequestAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->CreateDropRequest");

            var localVarPath = "/flowfile-queues/{id}/drop-requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateDropRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DropRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DropRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DropRequestEntity)));
        }

        /// <summary>
        /// Lists the contents of the queue in this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>ListingRequestEntity</returns>
        public ListingRequestEntity CreateFlowFileListing (string id)
        {
             ApiResponse<ListingRequestEntity> localVarResponse = this.CreateFlowFileListingWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the contents of the queue in this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>ApiResponse of ListingRequestEntity</returns>
        public ApiResponse< ListingRequestEntity > CreateFlowFileListingWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->CreateFlowFileListing");

            var localVarPath = "/flowfile-queues/{id}/listing-requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateFlowFileListing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListingRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingRequestEntity)));
        }

        /// <summary>
        /// Lists the contents of the queue in this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>Task of ListingRequestEntity</returns>
        public async System.Threading.Tasks.Task<ListingRequestEntity> CreateFlowFileListingAsync (string id)
        {
             ApiResponse<ListingRequestEntity> localVarResponse = await this.CreateFlowFileListingAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the contents of the queue in this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>Task of ApiResponse (ListingRequestEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingRequestEntity>> CreateFlowFileListingAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->CreateFlowFileListing");

            var localVarPath = "/flowfile-queues/{id}/listing-requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateFlowFileListing", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListingRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingRequestEntity)));
        }

        /// <summary>
        /// Cancels and/or removes a request to list the contents of this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>ListingRequestEntity</returns>
        public ListingRequestEntity DeleteListingRequest (string id, string listingRequestId)
        {
             ApiResponse<ListingRequestEntity> localVarResponse = this.DeleteListingRequestWithHttpInfo(id, listingRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels and/or removes a request to list the contents of this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>ApiResponse of ListingRequestEntity</returns>
        public ApiResponse< ListingRequestEntity > DeleteListingRequestWithHttpInfo (string id, string listingRequestId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->DeleteListingRequest");
            // verify the required parameter 'listingRequestId' is set
            if (listingRequestId == null)
                throw new ApiException(400, "Missing required parameter 'listingRequestId' when calling FlowfileQueuesApi->DeleteListingRequest");

            var localVarPath = "/flowfile-queues/{id}/listing-requests/{listing-request-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (listingRequestId != null) localVarPathParams.Add("listing-request-id", this.Configuration.ApiClient.ParameterToString(listingRequestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteListingRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListingRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingRequestEntity)));
        }

        /// <summary>
        /// Cancels and/or removes a request to list the contents of this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>Task of ListingRequestEntity</returns>
        public async System.Threading.Tasks.Task<ListingRequestEntity> DeleteListingRequestAsync (string id, string listingRequestId)
        {
             ApiResponse<ListingRequestEntity> localVarResponse = await this.DeleteListingRequestAsyncWithHttpInfo(id, listingRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancels and/or removes a request to list the contents of this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>Task of ApiResponse (ListingRequestEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingRequestEntity>> DeleteListingRequestAsyncWithHttpInfo (string id, string listingRequestId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->DeleteListingRequest");
            // verify the required parameter 'listingRequestId' is set
            if (listingRequestId == null)
                throw new ApiException(400, "Missing required parameter 'listingRequestId' when calling FlowfileQueuesApi->DeleteListingRequest");

            var localVarPath = "/flowfile-queues/{id}/listing-requests/{listing-request-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (listingRequestId != null) localVarPathParams.Add("listing-request-id", this.Configuration.ApiClient.ParameterToString(listingRequestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteListingRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListingRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingRequestEntity)));
        }

        /// <summary>
        /// Gets the content for a FlowFile in a Connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>StreamingOutput</returns>
        public StreamingOutput DownloadFlowFileContent (string id, string flowfileUuid, string clientId = null, string clusterNodeId = null)
        {
             ApiResponse<StreamingOutput> localVarResponse = this.DownloadFlowFileContentWithHttpInfo(id, flowfileUuid, clientId, clusterNodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the content for a FlowFile in a Connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>ApiResponse of StreamingOutput</returns>
        public ApiResponse< StreamingOutput > DownloadFlowFileContentWithHttpInfo (string id, string flowfileUuid, string clientId = null, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->DownloadFlowFileContent");
            // verify the required parameter 'flowfileUuid' is set
            if (flowfileUuid == null)
                throw new ApiException(400, "Missing required parameter 'flowfileUuid' when calling FlowfileQueuesApi->DownloadFlowFileContent");

            var localVarPath = "/flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (flowfileUuid != null) localVarPathParams.Add("flowfile-uuid", this.Configuration.ApiClient.ParameterToString(flowfileUuid)); // path parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clientId", clientId)); // query parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DownloadFlowFileContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamingOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamingOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamingOutput)));
        }

        /// <summary>
        /// Gets the content for a FlowFile in a Connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>Task of StreamingOutput</returns>
        public async System.Threading.Tasks.Task<StreamingOutput> DownloadFlowFileContentAsync (string id, string flowfileUuid, string clientId = null, string clusterNodeId = null)
        {
             ApiResponse<StreamingOutput> localVarResponse = await this.DownloadFlowFileContentAsyncWithHttpInfo(id, flowfileUuid, clientId, clusterNodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the content for a FlowFile in a Connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>Task of ApiResponse (StreamingOutput)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamingOutput>> DownloadFlowFileContentAsyncWithHttpInfo (string id, string flowfileUuid, string clientId = null, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->DownloadFlowFileContent");
            // verify the required parameter 'flowfileUuid' is set
            if (flowfileUuid == null)
                throw new ApiException(400, "Missing required parameter 'flowfileUuid' when calling FlowfileQueuesApi->DownloadFlowFileContent");

            var localVarPath = "/flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (flowfileUuid != null) localVarPathParams.Add("flowfile-uuid", this.Configuration.ApiClient.ParameterToString(flowfileUuid)); // path parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clientId", clientId)); // query parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DownloadFlowFileContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamingOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamingOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamingOutput)));
        }

        /// <summary>
        /// Gets the current status of a drop request for the specified connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>DropRequestEntity</returns>
        public DropRequestEntity GetDropRequest (string id, string dropRequestId)
        {
             ApiResponse<DropRequestEntity> localVarResponse = this.GetDropRequestWithHttpInfo(id, dropRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the current status of a drop request for the specified connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>ApiResponse of DropRequestEntity</returns>
        public ApiResponse< DropRequestEntity > GetDropRequestWithHttpInfo (string id, string dropRequestId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->GetDropRequest");
            // verify the required parameter 'dropRequestId' is set
            if (dropRequestId == null)
                throw new ApiException(400, "Missing required parameter 'dropRequestId' when calling FlowfileQueuesApi->GetDropRequest");

            var localVarPath = "/flowfile-queues/{id}/drop-requests/{drop-request-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dropRequestId != null) localVarPathParams.Add("drop-request-id", this.Configuration.ApiClient.ParameterToString(dropRequestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDropRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DropRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DropRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DropRequestEntity)));
        }

        /// <summary>
        /// Gets the current status of a drop request for the specified connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>Task of DropRequestEntity</returns>
        public async System.Threading.Tasks.Task<DropRequestEntity> GetDropRequestAsync (string id, string dropRequestId)
        {
             ApiResponse<DropRequestEntity> localVarResponse = await this.GetDropRequestAsyncWithHttpInfo(id, dropRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the current status of a drop request for the specified connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>Task of ApiResponse (DropRequestEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DropRequestEntity>> GetDropRequestAsyncWithHttpInfo (string id, string dropRequestId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->GetDropRequest");
            // verify the required parameter 'dropRequestId' is set
            if (dropRequestId == null)
                throw new ApiException(400, "Missing required parameter 'dropRequestId' when calling FlowfileQueuesApi->GetDropRequest");

            var localVarPath = "/flowfile-queues/{id}/drop-requests/{drop-request-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dropRequestId != null) localVarPathParams.Add("drop-request-id", this.Configuration.ApiClient.ParameterToString(dropRequestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetDropRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DropRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DropRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DropRequestEntity)));
        }

        /// <summary>
        /// Gets a FlowFile from a Connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>FlowFileEntity</returns>
        public FlowFileEntity GetFlowFile (string id, string flowfileUuid, string clusterNodeId = null)
        {
             ApiResponse<FlowFileEntity> localVarResponse = this.GetFlowFileWithHttpInfo(id, flowfileUuid, clusterNodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a FlowFile from a Connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>ApiResponse of FlowFileEntity</returns>
        public ApiResponse< FlowFileEntity > GetFlowFileWithHttpInfo (string id, string flowfileUuid, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->GetFlowFile");
            // verify the required parameter 'flowfileUuid' is set
            if (flowfileUuid == null)
                throw new ApiException(400, "Missing required parameter 'flowfileUuid' when calling FlowfileQueuesApi->GetFlowFile");

            var localVarPath = "/flowfile-queues/{id}/flowfiles/{flowfile-uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (flowfileUuid != null) localVarPathParams.Add("flowfile-uuid", this.Configuration.ApiClient.ParameterToString(flowfileUuid)); // path parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFlowFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowFileEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowFileEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowFileEntity)));
        }

        /// <summary>
        /// Gets a FlowFile from a Connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>Task of FlowFileEntity</returns>
        public async System.Threading.Tasks.Task<FlowFileEntity> GetFlowFileAsync (string id, string flowfileUuid, string clusterNodeId = null)
        {
             ApiResponse<FlowFileEntity> localVarResponse = await this.GetFlowFileAsyncWithHttpInfo(id, flowfileUuid, clusterNodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a FlowFile from a Connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="flowfileUuid">The flowfile uuid.</param>
        /// <param name="clusterNodeId">The id of the node where the content exists if clustered. (optional)</param>
        /// <returns>Task of ApiResponse (FlowFileEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowFileEntity>> GetFlowFileAsyncWithHttpInfo (string id, string flowfileUuid, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->GetFlowFile");
            // verify the required parameter 'flowfileUuid' is set
            if (flowfileUuid == null)
                throw new ApiException(400, "Missing required parameter 'flowfileUuid' when calling FlowfileQueuesApi->GetFlowFile");

            var localVarPath = "/flowfile-queues/{id}/flowfiles/{flowfile-uuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (flowfileUuid != null) localVarPathParams.Add("flowfile-uuid", this.Configuration.ApiClient.ParameterToString(flowfileUuid)); // path parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFlowFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowFileEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowFileEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowFileEntity)));
        }

        /// <summary>
        /// Gets the current status of a listing request for the specified connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>ListingRequestEntity</returns>
        public ListingRequestEntity GetListingRequest (string id, string listingRequestId)
        {
             ApiResponse<ListingRequestEntity> localVarResponse = this.GetListingRequestWithHttpInfo(id, listingRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the current status of a listing request for the specified connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>ApiResponse of ListingRequestEntity</returns>
        public ApiResponse< ListingRequestEntity > GetListingRequestWithHttpInfo (string id, string listingRequestId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->GetListingRequest");
            // verify the required parameter 'listingRequestId' is set
            if (listingRequestId == null)
                throw new ApiException(400, "Missing required parameter 'listingRequestId' when calling FlowfileQueuesApi->GetListingRequest");

            var localVarPath = "/flowfile-queues/{id}/listing-requests/{listing-request-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (listingRequestId != null) localVarPathParams.Add("listing-request-id", this.Configuration.ApiClient.ParameterToString(listingRequestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetListingRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListingRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingRequestEntity)));
        }

        /// <summary>
        /// Gets the current status of a listing request for the specified connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>Task of ListingRequestEntity</returns>
        public async System.Threading.Tasks.Task<ListingRequestEntity> GetListingRequestAsync (string id, string listingRequestId)
        {
             ApiResponse<ListingRequestEntity> localVarResponse = await this.GetListingRequestAsyncWithHttpInfo(id, listingRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the current status of a listing request for the specified connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="listingRequestId">The listing request id.</param>
        /// <returns>Task of ApiResponse (ListingRequestEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListingRequestEntity>> GetListingRequestAsyncWithHttpInfo (string id, string listingRequestId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->GetListingRequest");
            // verify the required parameter 'listingRequestId' is set
            if (listingRequestId == null)
                throw new ApiException(400, "Missing required parameter 'listingRequestId' when calling FlowfileQueuesApi->GetListingRequest");

            var localVarPath = "/flowfile-queues/{id}/listing-requests/{listing-request-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (listingRequestId != null) localVarPathParams.Add("listing-request-id", this.Configuration.ApiClient.ParameterToString(listingRequestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetListingRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListingRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ListingRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListingRequestEntity)));
        }

        /// <summary>
        /// Cancels and/or removes a request to drop the contents of this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>DropRequestEntity</returns>
        public DropRequestEntity RemoveDropRequest (string id, string dropRequestId)
        {
             ApiResponse<DropRequestEntity> localVarResponse = this.RemoveDropRequestWithHttpInfo(id, dropRequestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels and/or removes a request to drop the contents of this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>ApiResponse of DropRequestEntity</returns>
        public ApiResponse< DropRequestEntity > RemoveDropRequestWithHttpInfo (string id, string dropRequestId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->RemoveDropRequest");
            // verify the required parameter 'dropRequestId' is set
            if (dropRequestId == null)
                throw new ApiException(400, "Missing required parameter 'dropRequestId' when calling FlowfileQueuesApi->RemoveDropRequest");

            var localVarPath = "/flowfile-queues/{id}/drop-requests/{drop-request-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dropRequestId != null) localVarPathParams.Add("drop-request-id", this.Configuration.ApiClient.ParameterToString(dropRequestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RemoveDropRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DropRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DropRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DropRequestEntity)));
        }

        /// <summary>
        /// Cancels and/or removes a request to drop the contents of this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>Task of DropRequestEntity</returns>
        public async System.Threading.Tasks.Task<DropRequestEntity> RemoveDropRequestAsync (string id, string dropRequestId)
        {
             ApiResponse<DropRequestEntity> localVarResponse = await this.RemoveDropRequestAsyncWithHttpInfo(id, dropRequestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancels and/or removes a request to drop the contents of this connection. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="dropRequestId">The drop request id.</param>
        /// <returns>Task of ApiResponse (DropRequestEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DropRequestEntity>> RemoveDropRequestAsyncWithHttpInfo (string id, string dropRequestId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowfileQueuesApi->RemoveDropRequest");
            // verify the required parameter 'dropRequestId' is set
            if (dropRequestId == null)
                throw new ApiException(400, "Missing required parameter 'dropRequestId' when calling FlowfileQueuesApi->RemoveDropRequest");

            var localVarPath = "/flowfile-queues/{id}/drop-requests/{drop-request-id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (dropRequestId != null) localVarPathParams.Add("drop-request-id", this.Configuration.ApiClient.ParameterToString(dropRequestId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RemoveDropRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DropRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DropRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DropRequestEntity)));
        }

    }
}
