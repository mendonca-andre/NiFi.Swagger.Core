/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Api
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;

    using NiFi.Swagger.Core.Client;
    using NiFi.Swagger.Core.Model;

    using RestSharp;

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IControllerServicesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clears the state for a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ComponentStateEntity</returns>
        ComponentStateEntity ClearState (string id);

        /// <summary>
        /// Clears the state for a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ApiResponse of ComponentStateEntity</returns>
        ApiResponse<ComponentStateEntity> ClearStateWithHttpInfo (string id);
        /// <summary>
        /// Gets a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ControllerServiceEntity</returns>
        ControllerServiceEntity GetControllerService (string id);

        /// <summary>
        /// Gets a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ApiResponse of ControllerServiceEntity</returns>
        ApiResponse<ControllerServiceEntity> GetControllerServiceWithHttpInfo (string id);
        /// <summary>
        /// Gets a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ControllerServiceReferencingComponentsEntity</returns>
        ControllerServiceReferencingComponentsEntity GetControllerServiceReferences (string id);

        /// <summary>
        /// Gets a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ApiResponse of ControllerServiceReferencingComponentsEntity</returns>
        ApiResponse<ControllerServiceReferencingComponentsEntity> GetControllerServiceReferencesWithHttpInfo (string id);
        /// <summary>
        /// Gets a controller service property descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="propertyName">The property name to return the descriptor for.</param>
        /// <returns>PropertyDescriptorEntity</returns>
        PropertyDescriptorEntity GetPropertyDescriptor (string id, string propertyName);

        /// <summary>
        /// Gets a controller service property descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="propertyName">The property name to return the descriptor for.</param>
        /// <returns>ApiResponse of PropertyDescriptorEntity</returns>
        ApiResponse<PropertyDescriptorEntity> GetPropertyDescriptorWithHttpInfo (string id, string propertyName);
        /// <summary>
        /// Gets the state for a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ComponentStateEntity</returns>
        ComponentStateEntity GetState (string id);

        /// <summary>
        /// Gets the state for a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ApiResponse of ComponentStateEntity</returns>
        ApiResponse<ComponentStateEntity> GetStateWithHttpInfo (string id);
        /// <summary>
        /// Deletes a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ControllerServiceEntity</returns>
        ControllerServiceEntity RemoveControllerService (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of ControllerServiceEntity</returns>
        ApiResponse<ControllerServiceEntity> RemoveControllerServiceWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Updates a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ControllerServiceEntity</returns>
        ControllerServiceEntity UpdateControllerService (string id, ControllerServiceEntity body);

        /// <summary>
        /// Updates a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ApiResponse of ControllerServiceEntity</returns>
        ApiResponse<ControllerServiceEntity> UpdateControllerServiceWithHttpInfo (string id, ControllerServiceEntity body);
        /// <summary>
        /// Updates a controller services references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service request update request.</param>
        /// <returns>ControllerServiceReferencingComponentsEntity</returns>
        ControllerServiceReferencingComponentsEntity UpdateControllerServiceReferences (string id, UpdateControllerServiceReferenceRequestEntity body);

        /// <summary>
        /// Updates a controller services references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service request update request.</param>
        /// <returns>ApiResponse of ControllerServiceReferencingComponentsEntity</returns>
        ApiResponse<ControllerServiceReferencingComponentsEntity> UpdateControllerServiceReferencesWithHttpInfo (string id, UpdateControllerServiceReferenceRequestEntity body);
        /// <summary>
        /// Updates run status of a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service run status.</param>
        /// <returns>ControllerServiceEntity</returns>
        ControllerServiceEntity UpdateRunStatus (string id, ControllerServiceRunStatusEntity body);

        /// <summary>
        /// Updates run status of a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service run status.</param>
        /// <returns>ApiResponse of ControllerServiceEntity</returns>
        ApiResponse<ControllerServiceEntity> UpdateRunStatusWithHttpInfo (string id, ControllerServiceRunStatusEntity body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Clears the state for a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ComponentStateEntity</returns>
        System.Threading.Tasks.Task<ComponentStateEntity> ClearStateAsync (string id);

        /// <summary>
        /// Clears the state for a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ApiResponse (ComponentStateEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComponentStateEntity>> ClearStateAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ControllerServiceEntity</returns>
        System.Threading.Tasks.Task<ControllerServiceEntity> GetControllerServiceAsync (string id);

        /// <summary>
        /// Gets a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ApiResponse (ControllerServiceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ControllerServiceEntity>> GetControllerServiceAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ControllerServiceReferencingComponentsEntity</returns>
        System.Threading.Tasks.Task<ControllerServiceReferencingComponentsEntity> GetControllerServiceReferencesAsync (string id);

        /// <summary>
        /// Gets a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ApiResponse (ControllerServiceReferencingComponentsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ControllerServiceReferencingComponentsEntity>> GetControllerServiceReferencesAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets a controller service property descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="propertyName">The property name to return the descriptor for.</param>
        /// <returns>Task of PropertyDescriptorEntity</returns>
        System.Threading.Tasks.Task<PropertyDescriptorEntity> GetPropertyDescriptorAsync (string id, string propertyName);

        /// <summary>
        /// Gets a controller service property descriptor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="propertyName">The property name to return the descriptor for.</param>
        /// <returns>Task of ApiResponse (PropertyDescriptorEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyDescriptorEntity>> GetPropertyDescriptorAsyncWithHttpInfo (string id, string propertyName);
        /// <summary>
        /// Gets the state for a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ComponentStateEntity</returns>
        System.Threading.Tasks.Task<ComponentStateEntity> GetStateAsync (string id);

        /// <summary>
        /// Gets the state for a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ApiResponse (ComponentStateEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComponentStateEntity>> GetStateAsyncWithHttpInfo (string id);
        /// <summary>
        /// Deletes a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ControllerServiceEntity</returns>
        System.Threading.Tasks.Task<ControllerServiceEntity> RemoveControllerServiceAsync (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (ControllerServiceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ControllerServiceEntity>> RemoveControllerServiceAsyncWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Updates a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ControllerServiceEntity</returns>
        System.Threading.Tasks.Task<ControllerServiceEntity> UpdateControllerServiceAsync (string id, ControllerServiceEntity body);

        /// <summary>
        /// Updates a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ApiResponse (ControllerServiceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ControllerServiceEntity>> UpdateControllerServiceAsyncWithHttpInfo (string id, ControllerServiceEntity body);
        /// <summary>
        /// Updates a controller services references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service request update request.</param>
        /// <returns>Task of ControllerServiceReferencingComponentsEntity</returns>
        System.Threading.Tasks.Task<ControllerServiceReferencingComponentsEntity> UpdateControllerServiceReferencesAsync (string id, UpdateControllerServiceReferenceRequestEntity body);

        /// <summary>
        /// Updates a controller services references
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service request update request.</param>
        /// <returns>Task of ApiResponse (ControllerServiceReferencingComponentsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ControllerServiceReferencingComponentsEntity>> UpdateControllerServiceReferencesAsyncWithHttpInfo (string id, UpdateControllerServiceReferenceRequestEntity body);
        /// <summary>
        /// Updates run status of a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service run status.</param>
        /// <returns>Task of ControllerServiceEntity</returns>
        System.Threading.Tasks.Task<ControllerServiceEntity> UpdateRunStatusAsync (string id, ControllerServiceRunStatusEntity body);

        /// <summary>
        /// Updates run status of a controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service run status.</param>
        /// <returns>Task of ApiResponse (ControllerServiceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ControllerServiceEntity>> UpdateRunStatusAsyncWithHttpInfo (string id, ControllerServiceRunStatusEntity body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ControllerServicesApi : IControllerServicesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ControllerServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ControllerServicesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ControllerServicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ControllerServicesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this._exceptionFactory != null && this._exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return this._exceptionFactory;
            }
            set { this._exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Clears the state for a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ComponentStateEntity</returns>
        public ComponentStateEntity ClearState (string id)
        {
             ApiResponse<ComponentStateEntity> localVarResponse = this.ClearStateWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clears the state for a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ApiResponse of ComponentStateEntity</returns>
        public ApiResponse< ComponentStateEntity > ClearStateWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->ClearState");

            var localVarPath = "/controller-services/{id}/state/clear-requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ClearState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComponentStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComponentStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComponentStateEntity)));
        }

        /// <summary>
        /// Clears the state for a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ComponentStateEntity</returns>
        public async System.Threading.Tasks.Task<ComponentStateEntity> ClearStateAsync (string id)
        {
             ApiResponse<ComponentStateEntity> localVarResponse = await this.ClearStateAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clears the state for a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ApiResponse (ComponentStateEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ComponentStateEntity>> ClearStateAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->ClearState");

            var localVarPath = "/controller-services/{id}/state/clear-requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ClearState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComponentStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComponentStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComponentStateEntity)));
        }

        /// <summary>
        /// Gets a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ControllerServiceEntity</returns>
        public ControllerServiceEntity GetControllerService (string id)
        {
             ApiResponse<ControllerServiceEntity> localVarResponse = this.GetControllerServiceWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ApiResponse of ControllerServiceEntity</returns>
        public ApiResponse< ControllerServiceEntity > GetControllerServiceWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->GetControllerService");

            var localVarPath = "/controller-services/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetControllerService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceEntity)));
        }

        /// <summary>
        /// Gets a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ControllerServiceEntity</returns>
        public async System.Threading.Tasks.Task<ControllerServiceEntity> GetControllerServiceAsync (string id)
        {
             ApiResponse<ControllerServiceEntity> localVarResponse = await this.GetControllerServiceAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ApiResponse (ControllerServiceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ControllerServiceEntity>> GetControllerServiceAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->GetControllerService");

            var localVarPath = "/controller-services/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetControllerService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceEntity)));
        }

        /// <summary>
        /// Gets a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ControllerServiceReferencingComponentsEntity</returns>
        public ControllerServiceReferencingComponentsEntity GetControllerServiceReferences (string id)
        {
             ApiResponse<ControllerServiceReferencingComponentsEntity> localVarResponse = this.GetControllerServiceReferencesWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ApiResponse of ControllerServiceReferencingComponentsEntity</returns>
        public ApiResponse< ControllerServiceReferencingComponentsEntity > GetControllerServiceReferencesWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->GetControllerServiceReferences");

            var localVarPath = "/controller-services/{id}/references";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetControllerServiceReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceReferencingComponentsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceReferencingComponentsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceReferencingComponentsEntity)));
        }

        /// <summary>
        /// Gets a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ControllerServiceReferencingComponentsEntity</returns>
        public async System.Threading.Tasks.Task<ControllerServiceReferencingComponentsEntity> GetControllerServiceReferencesAsync (string id)
        {
             ApiResponse<ControllerServiceReferencingComponentsEntity> localVarResponse = await this.GetControllerServiceReferencesAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ApiResponse (ControllerServiceReferencingComponentsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ControllerServiceReferencingComponentsEntity>> GetControllerServiceReferencesAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->GetControllerServiceReferences");

            var localVarPath = "/controller-services/{id}/references";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetControllerServiceReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceReferencingComponentsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceReferencingComponentsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceReferencingComponentsEntity)));
        }

        /// <summary>
        /// Gets a controller service property descriptor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="propertyName">The property name to return the descriptor for.</param>
        /// <returns>PropertyDescriptorEntity</returns>
        public PropertyDescriptorEntity GetPropertyDescriptor (string id, string propertyName)
        {
             ApiResponse<PropertyDescriptorEntity> localVarResponse = this.GetPropertyDescriptorWithHttpInfo(id, propertyName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a controller service property descriptor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="propertyName">The property name to return the descriptor for.</param>
        /// <returns>ApiResponse of PropertyDescriptorEntity</returns>
        public ApiResponse< PropertyDescriptorEntity > GetPropertyDescriptorWithHttpInfo (string id, string propertyName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->GetPropertyDescriptor");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling ControllerServicesApi->GetPropertyDescriptor");

            var localVarPath = "/controller-services/{id}/descriptors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (propertyName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "propertyName", propertyName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPropertyDescriptor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDescriptorEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyDescriptorEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDescriptorEntity)));
        }

        /// <summary>
        /// Gets a controller service property descriptor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="propertyName">The property name to return the descriptor for.</param>
        /// <returns>Task of PropertyDescriptorEntity</returns>
        public async System.Threading.Tasks.Task<PropertyDescriptorEntity> GetPropertyDescriptorAsync (string id, string propertyName)
        {
             ApiResponse<PropertyDescriptorEntity> localVarResponse = await this.GetPropertyDescriptorAsyncWithHttpInfo(id, propertyName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a controller service property descriptor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="propertyName">The property name to return the descriptor for.</param>
        /// <returns>Task of ApiResponse (PropertyDescriptorEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertyDescriptorEntity>> GetPropertyDescriptorAsyncWithHttpInfo (string id, string propertyName)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->GetPropertyDescriptor");
            // verify the required parameter 'propertyName' is set
            if (propertyName == null)
                throw new ApiException(400, "Missing required parameter 'propertyName' when calling ControllerServicesApi->GetPropertyDescriptor");

            var localVarPath = "/controller-services/{id}/descriptors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (propertyName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "propertyName", propertyName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPropertyDescriptor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDescriptorEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PropertyDescriptorEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDescriptorEntity)));
        }

        /// <summary>
        /// Gets the state for a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ComponentStateEntity</returns>
        public ComponentStateEntity GetState (string id)
        {
             ApiResponse<ComponentStateEntity> localVarResponse = this.GetStateWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the state for a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>ApiResponse of ComponentStateEntity</returns>
        public ApiResponse< ComponentStateEntity > GetStateWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->GetState");

            var localVarPath = "/controller-services/{id}/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComponentStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComponentStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComponentStateEntity)));
        }

        /// <summary>
        /// Gets the state for a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ComponentStateEntity</returns>
        public async System.Threading.Tasks.Task<ComponentStateEntity> GetStateAsync (string id)
        {
             ApiResponse<ComponentStateEntity> localVarResponse = await this.GetStateAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the state for a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <returns>Task of ApiResponse (ComponentStateEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ComponentStateEntity>> GetStateAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->GetState");

            var localVarPath = "/controller-services/{id}/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComponentStateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComponentStateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComponentStateEntity)));
        }

        /// <summary>
        /// Deletes a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ControllerServiceEntity</returns>
        public ControllerServiceEntity RemoveControllerService (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<ControllerServiceEntity> localVarResponse = this.RemoveControllerServiceWithHttpInfo(id, version, clientId, disconnectedNodeAcknowledged);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of ControllerServiceEntity</returns>
        public ApiResponse< ControllerServiceEntity > RemoveControllerServiceWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->RemoveControllerService");

            var localVarPath = "/controller-services/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clientId", clientId)); // query parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RemoveControllerService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceEntity)));
        }

        /// <summary>
        /// Deletes a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ControllerServiceEntity</returns>
        public async System.Threading.Tasks.Task<ControllerServiceEntity> RemoveControllerServiceAsync (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<ControllerServiceEntity> localVarResponse = await this.RemoveControllerServiceAsyncWithHttpInfo(id, version, clientId, disconnectedNodeAcknowledged);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (ControllerServiceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ControllerServiceEntity>> RemoveControllerServiceAsyncWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->RemoveControllerService");

            var localVarPath = "/controller-services/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clientId", clientId)); // query parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RemoveControllerService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceEntity)));
        }

        /// <summary>
        /// Updates a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ControllerServiceEntity</returns>
        public ControllerServiceEntity UpdateControllerService (string id, ControllerServiceEntity body)
        {
             ApiResponse<ControllerServiceEntity> localVarResponse = this.UpdateControllerServiceWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ApiResponse of ControllerServiceEntity</returns>
        public ApiResponse< ControllerServiceEntity > UpdateControllerServiceWithHttpInfo (string id, ControllerServiceEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->UpdateControllerService");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerServicesApi->UpdateControllerService");

            var localVarPath = "/controller-services/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateControllerService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceEntity)));
        }

        /// <summary>
        /// Updates a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ControllerServiceEntity</returns>
        public async System.Threading.Tasks.Task<ControllerServiceEntity> UpdateControllerServiceAsync (string id, ControllerServiceEntity body)
        {
             ApiResponse<ControllerServiceEntity> localVarResponse = await this.UpdateControllerServiceAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ApiResponse (ControllerServiceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ControllerServiceEntity>> UpdateControllerServiceAsyncWithHttpInfo (string id, ControllerServiceEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->UpdateControllerService");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerServicesApi->UpdateControllerService");

            var localVarPath = "/controller-services/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateControllerService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceEntity)));
        }

        /// <summary>
        /// Updates a controller services references 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service request update request.</param>
        /// <returns>ControllerServiceReferencingComponentsEntity</returns>
        public ControllerServiceReferencingComponentsEntity UpdateControllerServiceReferences (string id, UpdateControllerServiceReferenceRequestEntity body)
        {
             ApiResponse<ControllerServiceReferencingComponentsEntity> localVarResponse = this.UpdateControllerServiceReferencesWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a controller services references 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service request update request.</param>
        /// <returns>ApiResponse of ControllerServiceReferencingComponentsEntity</returns>
        public ApiResponse< ControllerServiceReferencingComponentsEntity > UpdateControllerServiceReferencesWithHttpInfo (string id, UpdateControllerServiceReferenceRequestEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->UpdateControllerServiceReferences");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerServicesApi->UpdateControllerServiceReferences");

            var localVarPath = "/controller-services/{id}/references";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateControllerServiceReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceReferencingComponentsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceReferencingComponentsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceReferencingComponentsEntity)));
        }

        /// <summary>
        /// Updates a controller services references 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service request update request.</param>
        /// <returns>Task of ControllerServiceReferencingComponentsEntity</returns>
        public async System.Threading.Tasks.Task<ControllerServiceReferencingComponentsEntity> UpdateControllerServiceReferencesAsync (string id, UpdateControllerServiceReferenceRequestEntity body)
        {
             ApiResponse<ControllerServiceReferencingComponentsEntity> localVarResponse = await this.UpdateControllerServiceReferencesAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a controller services references 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service request update request.</param>
        /// <returns>Task of ApiResponse (ControllerServiceReferencingComponentsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ControllerServiceReferencingComponentsEntity>> UpdateControllerServiceReferencesAsyncWithHttpInfo (string id, UpdateControllerServiceReferenceRequestEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->UpdateControllerServiceReferences");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerServicesApi->UpdateControllerServiceReferences");

            var localVarPath = "/controller-services/{id}/references";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateControllerServiceReferences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceReferencingComponentsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceReferencingComponentsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceReferencingComponentsEntity)));
        }

        /// <summary>
        /// Updates run status of a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service run status.</param>
        /// <returns>ControllerServiceEntity</returns>
        public ControllerServiceEntity UpdateRunStatus (string id, ControllerServiceRunStatusEntity body)
        {
             ApiResponse<ControllerServiceEntity> localVarResponse = this.UpdateRunStatusWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates run status of a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service run status.</param>
        /// <returns>ApiResponse of ControllerServiceEntity</returns>
        public ApiResponse< ControllerServiceEntity > UpdateRunStatusWithHttpInfo (string id, ControllerServiceRunStatusEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->UpdateRunStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerServicesApi->UpdateRunStatus");

            var localVarPath = "/controller-services/{id}/run-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateRunStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceEntity)));
        }

        /// <summary>
        /// Updates run status of a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service run status.</param>
        /// <returns>Task of ControllerServiceEntity</returns>
        public async System.Threading.Tasks.Task<ControllerServiceEntity> UpdateRunStatusAsync (string id, ControllerServiceRunStatusEntity body)
        {
             ApiResponse<ControllerServiceEntity> localVarResponse = await this.UpdateRunStatusAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates run status of a controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The controller service id.</param>
        /// <param name="body">The controller service run status.</param>
        /// <returns>Task of ApiResponse (ControllerServiceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ControllerServiceEntity>> UpdateRunStatusAsyncWithHttpInfo (string id, ControllerServiceRunStatusEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerServicesApi->UpdateRunStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerServicesApi->UpdateRunStatus");

            var localVarPath = "/controller-services/{id}/run-status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateRunStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceEntity)));
        }

    }
}
