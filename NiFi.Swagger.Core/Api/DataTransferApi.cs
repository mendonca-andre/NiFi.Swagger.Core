/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Api
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;

    using NiFi.Swagger.Core.Client;
    using NiFi.Swagger.Core.Model;

    using RestSharp;

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataTransferApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Commit or cancel the specified transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are BAD_CHECKSUM(19), CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>TransactionResultEntity</returns>
        TransactionResultEntity CommitInputPortTransaction (int? responseCode, string portId, string transactionId);

        /// <summary>
        /// Commit or cancel the specified transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are BAD_CHECKSUM(19), CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>ApiResponse of TransactionResultEntity</returns>
        ApiResponse<TransactionResultEntity> CommitInputPortTransactionWithHttpInfo (int? responseCode, string portId, string transactionId);
        /// <summary>
        /// Commit or cancel the specified transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="checksum">A checksum calculated at client side using CRC32 to check flow file content integrity. It must match with the value calculated at server side.</param>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>TransactionResultEntity</returns>
        TransactionResultEntity CommitOutputPortTransaction (int? responseCode, string checksum, string portId, string transactionId);

        /// <summary>
        /// Commit or cancel the specified transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="checksum">A checksum calculated at client side using CRC32 to check flow file content integrity. It must match with the value calculated at server side.</param>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>ApiResponse of TransactionResultEntity</returns>
        ApiResponse<TransactionResultEntity> CommitOutputPortTransactionWithHttpInfo (int? responseCode, string checksum, string portId, string transactionId);
        /// <summary>
        /// Create a transaction to the specified output port or input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portType">The port type.</param>
        /// <param name="portId"></param>
        /// <returns>TransactionResultEntity</returns>
        TransactionResultEntity CreatePortTransaction (string portType, string portId);

        /// <summary>
        /// Create a transaction to the specified output port or input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portType">The port type.</param>
        /// <param name="portId"></param>
        /// <returns>ApiResponse of TransactionResultEntity</returns>
        ApiResponse<TransactionResultEntity> CreatePortTransactionWithHttpInfo (string portType, string portId);
        /// <summary>
        /// Extend transaction TTL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>TransactionResultEntity</returns>
        TransactionResultEntity ExtendInputPortTransactionTTL (string portId, string transactionId);

        /// <summary>
        /// Extend transaction TTL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of TransactionResultEntity</returns>
        ApiResponse<TransactionResultEntity> ExtendInputPortTransactionTTLWithHttpInfo (string portId, string transactionId);
        /// <summary>
        /// Extend transaction TTL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>TransactionResultEntity</returns>
        TransactionResultEntity ExtendOutputPortTransactionTTL (string portId, string transactionId);

        /// <summary>
        /// Extend transaction TTL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of TransactionResultEntity</returns>
        ApiResponse<TransactionResultEntity> ExtendOutputPortTransactionTTLWithHttpInfo (string portId, string transactionId);
        /// <summary>
        /// Transfer flow files to the input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>string</returns>
        string ReceiveFlowFiles (string portId, string transactionId);

        /// <summary>
        /// Transfer flow files to the input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ReceiveFlowFilesWithHttpInfo (string portId, string transactionId);
        /// <summary>
        /// Transfer flow files from the output port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>StreamingOutput</returns>
        StreamingOutput TransferFlowFiles (string portId, string transactionId);

        /// <summary>
        /// Transfer flow files from the output port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of StreamingOutput</returns>
        ApiResponse<StreamingOutput> TransferFlowFilesWithHttpInfo (string portId, string transactionId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Commit or cancel the specified transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are BAD_CHECKSUM(19), CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>Task of TransactionResultEntity</returns>
        System.Threading.Tasks.Task<TransactionResultEntity> CommitInputPortTransactionAsync (int? responseCode, string portId, string transactionId);

        /// <summary>
        /// Commit or cancel the specified transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are BAD_CHECKSUM(19), CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>Task of ApiResponse (TransactionResultEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResultEntity>> CommitInputPortTransactionAsyncWithHttpInfo (int? responseCode, string portId, string transactionId);
        /// <summary>
        /// Commit or cancel the specified transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="checksum">A checksum calculated at client side using CRC32 to check flow file content integrity. It must match with the value calculated at server side.</param>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>Task of TransactionResultEntity</returns>
        System.Threading.Tasks.Task<TransactionResultEntity> CommitOutputPortTransactionAsync (int? responseCode, string checksum, string portId, string transactionId);

        /// <summary>
        /// Commit or cancel the specified transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="checksum">A checksum calculated at client side using CRC32 to check flow file content integrity. It must match with the value calculated at server side.</param>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>Task of ApiResponse (TransactionResultEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResultEntity>> CommitOutputPortTransactionAsyncWithHttpInfo (int? responseCode, string checksum, string portId, string transactionId);
        /// <summary>
        /// Create a transaction to the specified output port or input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portType">The port type.</param>
        /// <param name="portId"></param>
        /// <returns>Task of TransactionResultEntity</returns>
        System.Threading.Tasks.Task<TransactionResultEntity> CreatePortTransactionAsync (string portType, string portId);

        /// <summary>
        /// Create a transaction to the specified output port or input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portType">The port type.</param>
        /// <param name="portId"></param>
        /// <returns>Task of ApiResponse (TransactionResultEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResultEntity>> CreatePortTransactionAsyncWithHttpInfo (string portType, string portId);
        /// <summary>
        /// Extend transaction TTL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of TransactionResultEntity</returns>
        System.Threading.Tasks.Task<TransactionResultEntity> ExtendInputPortTransactionTTLAsync (string portId, string transactionId);

        /// <summary>
        /// Extend transaction TTL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse (TransactionResultEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResultEntity>> ExtendInputPortTransactionTTLAsyncWithHttpInfo (string portId, string transactionId);
        /// <summary>
        /// Extend transaction TTL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of TransactionResultEntity</returns>
        System.Threading.Tasks.Task<TransactionResultEntity> ExtendOutputPortTransactionTTLAsync (string portId, string transactionId);

        /// <summary>
        /// Extend transaction TTL
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse (TransactionResultEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionResultEntity>> ExtendOutputPortTransactionTTLAsyncWithHttpInfo (string portId, string transactionId);
        /// <summary>
        /// Transfer flow files to the input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ReceiveFlowFilesAsync (string portId, string transactionId);

        /// <summary>
        /// Transfer flow files to the input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ReceiveFlowFilesAsyncWithHttpInfo (string portId, string transactionId);
        /// <summary>
        /// Transfer flow files from the output port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>Task of StreamingOutput</returns>
        System.Threading.Tasks.Task<StreamingOutput> TransferFlowFilesAsync (string portId, string transactionId);

        /// <summary>
        /// Transfer flow files from the output port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse (StreamingOutput)</returns>
        System.Threading.Tasks.Task<ApiResponse<StreamingOutput>> TransferFlowFilesAsyncWithHttpInfo (string portId, string transactionId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataTransferApi : IDataTransferApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataTransferApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataTransferApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataTransferApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataTransferApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this._exceptionFactory != null && this._exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return this._exceptionFactory;
            }
            set { this._exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Commit or cancel the specified transaction 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are BAD_CHECKSUM(19), CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>TransactionResultEntity</returns>
        public TransactionResultEntity CommitInputPortTransaction (int? responseCode, string portId, string transactionId)
        {
             ApiResponse<TransactionResultEntity> localVarResponse = this.CommitInputPortTransactionWithHttpInfo(responseCode, portId, transactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Commit or cancel the specified transaction 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are BAD_CHECKSUM(19), CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>ApiResponse of TransactionResultEntity</returns>
        public ApiResponse< TransactionResultEntity > CommitInputPortTransactionWithHttpInfo (int? responseCode, string portId, string transactionId)
        {
            // verify the required parameter 'responseCode' is set
            if (responseCode == null)
                throw new ApiException(400, "Missing required parameter 'responseCode' when calling DataTransferApi->CommitInputPortTransaction");
            // verify the required parameter 'portId' is set
            if (portId == null)
                throw new ApiException(400, "Missing required parameter 'portId' when calling DataTransferApi->CommitInputPortTransaction");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DataTransferApi->CommitInputPortTransaction");

            var localVarPath = "/data-transfer/input-ports/{portId}/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portId != null) localVarPathParams.Add("portId", this.Configuration.ApiClient.ParameterToString(portId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (responseCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "responseCode", responseCode)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommitInputPortTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResultEntity)));
        }

        /// <summary>
        /// Commit or cancel the specified transaction 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are BAD_CHECKSUM(19), CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>Task of TransactionResultEntity</returns>
        public async System.Threading.Tasks.Task<TransactionResultEntity> CommitInputPortTransactionAsync (int? responseCode, string portId, string transactionId)
        {
             ApiResponse<TransactionResultEntity> localVarResponse = await this.CommitInputPortTransactionAsyncWithHttpInfo(responseCode, portId, transactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Commit or cancel the specified transaction 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are BAD_CHECKSUM(19), CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>Task of ApiResponse (TransactionResultEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResultEntity>> CommitInputPortTransactionAsyncWithHttpInfo (int? responseCode, string portId, string transactionId)
        {
            // verify the required parameter 'responseCode' is set
            if (responseCode == null)
                throw new ApiException(400, "Missing required parameter 'responseCode' when calling DataTransferApi->CommitInputPortTransaction");
            // verify the required parameter 'portId' is set
            if (portId == null)
                throw new ApiException(400, "Missing required parameter 'portId' when calling DataTransferApi->CommitInputPortTransaction");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DataTransferApi->CommitInputPortTransaction");

            var localVarPath = "/data-transfer/input-ports/{portId}/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portId != null) localVarPathParams.Add("portId", this.Configuration.ApiClient.ParameterToString(portId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (responseCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "responseCode", responseCode)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommitInputPortTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResultEntity)));
        }

        /// <summary>
        /// Commit or cancel the specified transaction 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="checksum">A checksum calculated at client side using CRC32 to check flow file content integrity. It must match with the value calculated at server side.</param>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>TransactionResultEntity</returns>
        public TransactionResultEntity CommitOutputPortTransaction (int? responseCode, string checksum, string portId, string transactionId)
        {
             ApiResponse<TransactionResultEntity> localVarResponse = this.CommitOutputPortTransactionWithHttpInfo(responseCode, checksum, portId, transactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Commit or cancel the specified transaction 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="checksum">A checksum calculated at client side using CRC32 to check flow file content integrity. It must match with the value calculated at server side.</param>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>ApiResponse of TransactionResultEntity</returns>
        public ApiResponse< TransactionResultEntity > CommitOutputPortTransactionWithHttpInfo (int? responseCode, string checksum, string portId, string transactionId)
        {
            // verify the required parameter 'responseCode' is set
            if (responseCode == null)
                throw new ApiException(400, "Missing required parameter 'responseCode' when calling DataTransferApi->CommitOutputPortTransaction");
            // verify the required parameter 'checksum' is set
            if (checksum == null)
                throw new ApiException(400, "Missing required parameter 'checksum' when calling DataTransferApi->CommitOutputPortTransaction");
            // verify the required parameter 'portId' is set
            if (portId == null)
                throw new ApiException(400, "Missing required parameter 'portId' when calling DataTransferApi->CommitOutputPortTransaction");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DataTransferApi->CommitOutputPortTransaction");

            var localVarPath = "/data-transfer/output-ports/{portId}/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portId != null) localVarPathParams.Add("portId", this.Configuration.ApiClient.ParameterToString(portId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (responseCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "responseCode", responseCode)); // query parameter
            if (checksum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "checksum", checksum)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommitOutputPortTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResultEntity)));
        }

        /// <summary>
        /// Commit or cancel the specified transaction 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="checksum">A checksum calculated at client side using CRC32 to check flow file content integrity. It must match with the value calculated at server side.</param>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>Task of TransactionResultEntity</returns>
        public async System.Threading.Tasks.Task<TransactionResultEntity> CommitOutputPortTransactionAsync (int? responseCode, string checksum, string portId, string transactionId)
        {
             ApiResponse<TransactionResultEntity> localVarResponse = await this.CommitOutputPortTransactionAsyncWithHttpInfo(responseCode, checksum, portId, transactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Commit or cancel the specified transaction 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseCode">The response code. Available values are CONFIRM_TRANSACTION(12) or CANCEL_TRANSACTION(15).</param>
        /// <param name="checksum">A checksum calculated at client side using CRC32 to check flow file content integrity. It must match with the value calculated at server side.</param>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId">The transaction id.</param>
        /// <returns>Task of ApiResponse (TransactionResultEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResultEntity>> CommitOutputPortTransactionAsyncWithHttpInfo (int? responseCode, string checksum, string portId, string transactionId)
        {
            // verify the required parameter 'responseCode' is set
            if (responseCode == null)
                throw new ApiException(400, "Missing required parameter 'responseCode' when calling DataTransferApi->CommitOutputPortTransaction");
            // verify the required parameter 'checksum' is set
            if (checksum == null)
                throw new ApiException(400, "Missing required parameter 'checksum' when calling DataTransferApi->CommitOutputPortTransaction");
            // verify the required parameter 'portId' is set
            if (portId == null)
                throw new ApiException(400, "Missing required parameter 'portId' when calling DataTransferApi->CommitOutputPortTransaction");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DataTransferApi->CommitOutputPortTransaction");

            var localVarPath = "/data-transfer/output-ports/{portId}/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portId != null) localVarPathParams.Add("portId", this.Configuration.ApiClient.ParameterToString(portId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (responseCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "responseCode", responseCode)); // query parameter
            if (checksum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "checksum", checksum)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommitOutputPortTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResultEntity)));
        }

        /// <summary>
        /// Create a transaction to the specified output port or input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portType">The port type.</param>
        /// <param name="portId"></param>
        /// <returns>TransactionResultEntity</returns>
        public TransactionResultEntity CreatePortTransaction (string portType, string portId)
        {
             ApiResponse<TransactionResultEntity> localVarResponse = this.CreatePortTransactionWithHttpInfo(portType, portId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a transaction to the specified output port or input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portType">The port type.</param>
        /// <param name="portId"></param>
        /// <returns>ApiResponse of TransactionResultEntity</returns>
        public ApiResponse< TransactionResultEntity > CreatePortTransactionWithHttpInfo (string portType, string portId)
        {
            // verify the required parameter 'portType' is set
            if (portType == null)
                throw new ApiException(400, "Missing required parameter 'portType' when calling DataTransferApi->CreatePortTransaction");
            // verify the required parameter 'portId' is set
            if (portId == null)
                throw new ApiException(400, "Missing required parameter 'portId' when calling DataTransferApi->CreatePortTransaction");

            var localVarPath = "/data-transfer/{portType}/{portId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portType != null) localVarPathParams.Add("portType", this.Configuration.ApiClient.ParameterToString(portType)); // path parameter
            if (portId != null) localVarPathParams.Add("portId", this.Configuration.ApiClient.ParameterToString(portId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePortTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResultEntity)));
        }

        /// <summary>
        /// Create a transaction to the specified output port or input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portType">The port type.</param>
        /// <param name="portId"></param>
        /// <returns>Task of TransactionResultEntity</returns>
        public async System.Threading.Tasks.Task<TransactionResultEntity> CreatePortTransactionAsync (string portType, string portId)
        {
             ApiResponse<TransactionResultEntity> localVarResponse = await this.CreatePortTransactionAsyncWithHttpInfo(portType, portId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a transaction to the specified output port or input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portType">The port type.</param>
        /// <param name="portId"></param>
        /// <returns>Task of ApiResponse (TransactionResultEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResultEntity>> CreatePortTransactionAsyncWithHttpInfo (string portType, string portId)
        {
            // verify the required parameter 'portType' is set
            if (portType == null)
                throw new ApiException(400, "Missing required parameter 'portType' when calling DataTransferApi->CreatePortTransaction");
            // verify the required parameter 'portId' is set
            if (portId == null)
                throw new ApiException(400, "Missing required parameter 'portId' when calling DataTransferApi->CreatePortTransaction");

            var localVarPath = "/data-transfer/{portType}/{portId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portType != null) localVarPathParams.Add("portType", this.Configuration.ApiClient.ParameterToString(portType)); // path parameter
            if (portId != null) localVarPathParams.Add("portId", this.Configuration.ApiClient.ParameterToString(portId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePortTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResultEntity)));
        }

        /// <summary>
        /// Extend transaction TTL 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>TransactionResultEntity</returns>
        public TransactionResultEntity ExtendInputPortTransactionTTL (string portId, string transactionId)
        {
             ApiResponse<TransactionResultEntity> localVarResponse = this.ExtendInputPortTransactionTTLWithHttpInfo(portId, transactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extend transaction TTL 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of TransactionResultEntity</returns>
        public ApiResponse< TransactionResultEntity > ExtendInputPortTransactionTTLWithHttpInfo (string portId, string transactionId)
        {
            // verify the required parameter 'portId' is set
            if (portId == null)
                throw new ApiException(400, "Missing required parameter 'portId' when calling DataTransferApi->ExtendInputPortTransactionTTL");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DataTransferApi->ExtendInputPortTransactionTTL");

            var localVarPath = "/data-transfer/input-ports/{portId}/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portId != null) localVarPathParams.Add("portId", this.Configuration.ApiClient.ParameterToString(portId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ExtendInputPortTransactionTTL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResultEntity)));
        }

        /// <summary>
        /// Extend transaction TTL 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of TransactionResultEntity</returns>
        public async System.Threading.Tasks.Task<TransactionResultEntity> ExtendInputPortTransactionTTLAsync (string portId, string transactionId)
        {
             ApiResponse<TransactionResultEntity> localVarResponse = await this.ExtendInputPortTransactionTTLAsyncWithHttpInfo(portId, transactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extend transaction TTL 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse (TransactionResultEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResultEntity>> ExtendInputPortTransactionTTLAsyncWithHttpInfo (string portId, string transactionId)
        {
            // verify the required parameter 'portId' is set
            if (portId == null)
                throw new ApiException(400, "Missing required parameter 'portId' when calling DataTransferApi->ExtendInputPortTransactionTTL");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DataTransferApi->ExtendInputPortTransactionTTL");

            var localVarPath = "/data-transfer/input-ports/{portId}/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portId != null) localVarPathParams.Add("portId", this.Configuration.ApiClient.ParameterToString(portId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ExtendInputPortTransactionTTL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResultEntity)));
        }

        /// <summary>
        /// Extend transaction TTL 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>TransactionResultEntity</returns>
        public TransactionResultEntity ExtendOutputPortTransactionTTL (string portId, string transactionId)
        {
             ApiResponse<TransactionResultEntity> localVarResponse = this.ExtendOutputPortTransactionTTLWithHttpInfo(portId, transactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Extend transaction TTL 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of TransactionResultEntity</returns>
        public ApiResponse< TransactionResultEntity > ExtendOutputPortTransactionTTLWithHttpInfo (string portId, string transactionId)
        {
            // verify the required parameter 'portId' is set
            if (portId == null)
                throw new ApiException(400, "Missing required parameter 'portId' when calling DataTransferApi->ExtendOutputPortTransactionTTL");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DataTransferApi->ExtendOutputPortTransactionTTL");

            var localVarPath = "/data-transfer/output-ports/{portId}/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portId != null) localVarPathParams.Add("portId", this.Configuration.ApiClient.ParameterToString(portId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ExtendOutputPortTransactionTTL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResultEntity)));
        }

        /// <summary>
        /// Extend transaction TTL 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of TransactionResultEntity</returns>
        public async System.Threading.Tasks.Task<TransactionResultEntity> ExtendOutputPortTransactionTTLAsync (string portId, string transactionId)
        {
             ApiResponse<TransactionResultEntity> localVarResponse = await this.ExtendOutputPortTransactionTTLAsyncWithHttpInfo(portId, transactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Extend transaction TTL 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse (TransactionResultEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionResultEntity>> ExtendOutputPortTransactionTTLAsyncWithHttpInfo (string portId, string transactionId)
        {
            // verify the required parameter 'portId' is set
            if (portId == null)
                throw new ApiException(400, "Missing required parameter 'portId' when calling DataTransferApi->ExtendOutputPortTransactionTTL");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DataTransferApi->ExtendOutputPortTransactionTTL");

            var localVarPath = "/data-transfer/output-ports/{portId}/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portId != null) localVarPathParams.Add("portId", this.Configuration.ApiClient.ParameterToString(portId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ExtendOutputPortTransactionTTL", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionResultEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionResultEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionResultEntity)));
        }

        /// <summary>
        /// Transfer flow files to the input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>string</returns>
        public string ReceiveFlowFiles (string portId, string transactionId)
        {
             ApiResponse<string> localVarResponse = this.ReceiveFlowFilesWithHttpInfo(portId, transactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer flow files to the input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ReceiveFlowFilesWithHttpInfo (string portId, string transactionId)
        {
            // verify the required parameter 'portId' is set
            if (portId == null)
                throw new ApiException(400, "Missing required parameter 'portId' when calling DataTransferApi->ReceiveFlowFiles");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DataTransferApi->ReceiveFlowFiles");

            var localVarPath = "/data-transfer/input-ports/{portId}/transactions/{transactionId}/flow-files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portId != null) localVarPathParams.Add("portId", this.Configuration.ApiClient.ParameterToString(portId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ReceiveFlowFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Transfer flow files to the input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ReceiveFlowFilesAsync (string portId, string transactionId)
        {
             ApiResponse<string> localVarResponse = await this.ReceiveFlowFilesAsyncWithHttpInfo(portId, transactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer flow files to the input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The input port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ReceiveFlowFilesAsyncWithHttpInfo (string portId, string transactionId)
        {
            // verify the required parameter 'portId' is set
            if (portId == null)
                throw new ApiException(400, "Missing required parameter 'portId' when calling DataTransferApi->ReceiveFlowFiles");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DataTransferApi->ReceiveFlowFiles");

            var localVarPath = "/data-transfer/input-ports/{portId}/transactions/{transactionId}/flow-files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portId != null) localVarPathParams.Add("portId", this.Configuration.ApiClient.ParameterToString(portId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ReceiveFlowFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Transfer flow files from the output port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>StreamingOutput</returns>
        public StreamingOutput TransferFlowFiles (string portId, string transactionId)
        {
             ApiResponse<StreamingOutput> localVarResponse = this.TransferFlowFilesWithHttpInfo(portId, transactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer flow files from the output port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of StreamingOutput</returns>
        public ApiResponse< StreamingOutput > TransferFlowFilesWithHttpInfo (string portId, string transactionId)
        {
            // verify the required parameter 'portId' is set
            if (portId == null)
                throw new ApiException(400, "Missing required parameter 'portId' when calling DataTransferApi->TransferFlowFiles");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DataTransferApi->TransferFlowFiles");

            var localVarPath = "/data-transfer/output-ports/{portId}/transactions/{transactionId}/flow-files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portId != null) localVarPathParams.Add("portId", this.Configuration.ApiClient.ParameterToString(portId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TransferFlowFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamingOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamingOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamingOutput)));
        }

        /// <summary>
        /// Transfer flow files from the output port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>Task of StreamingOutput</returns>
        public async System.Threading.Tasks.Task<StreamingOutput> TransferFlowFilesAsync (string portId, string transactionId)
        {
             ApiResponse<StreamingOutput> localVarResponse = await this.TransferFlowFilesAsyncWithHttpInfo(portId, transactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer flow files from the output port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="portId">The output port id.</param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse (StreamingOutput)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StreamingOutput>> TransferFlowFilesAsyncWithHttpInfo (string portId, string transactionId)
        {
            // verify the required parameter 'portId' is set
            if (portId == null)
                throw new ApiException(400, "Missing required parameter 'portId' when calling DataTransferApi->TransferFlowFiles");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DataTransferApi->TransferFlowFiles");

            var localVarPath = "/data-transfer/output-ports/{portId}/transactions/{transactionId}/flow-files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portId != null) localVarPathParams.Add("portId", this.Configuration.ApiClient.ParameterToString(portId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TransferFlowFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StreamingOutput>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StreamingOutput) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StreamingOutput)));
        }

    }
}
