/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Api
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;

    using NiFi.Swagger.Core.Client;
    using NiFi.Swagger.Core.Model;

    using RestSharp;

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IControllerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new bulletin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>BulletinEntity</returns>
        BulletinEntity CreateBulletin (BulletinEntity body);

        /// <summary>
        /// Creates a new bulletin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>ApiResponse of BulletinEntity</returns>
        ApiResponse<BulletinEntity> CreateBulletinWithHttpInfo (BulletinEntity body);
        /// <summary>
        /// Creates a new controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ControllerServiceEntity</returns>
        ControllerServiceEntity CreateControllerService (ControllerServiceEntity body);

        /// <summary>
        /// Creates a new controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ApiResponse of ControllerServiceEntity</returns>
        ApiResponse<ControllerServiceEntity> CreateControllerServiceWithHttpInfo (ControllerServiceEntity body);
        /// <summary>
        /// Creates a new registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>RegistryClientEntity</returns>
        RegistryClientEntity CreateRegistryClient (RegistryClientEntity body);

        /// <summary>
        /// Creates a new registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>ApiResponse of RegistryClientEntity</returns>
        ApiResponse<RegistryClientEntity> CreateRegistryClientWithHttpInfo (RegistryClientEntity body);
        /// <summary>
        /// Creates a new reporting task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>ReportingTaskEntity</returns>
        ReportingTaskEntity CreateReportingTask (ReportingTaskEntity body);

        /// <summary>
        /// Creates a new reporting task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>ApiResponse of ReportingTaskEntity</returns>
        ApiResponse<ReportingTaskEntity> CreateReportingTaskWithHttpInfo (ReportingTaskEntity body);
        /// <summary>
        /// Purges history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">Purge actions before this date/time.</param>
        /// <returns>HistoryEntity</returns>
        HistoryEntity DeleteHistory (string endDate);

        /// <summary>
        /// Purges history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">Purge actions before this date/time.</param>
        /// <returns>ApiResponse of HistoryEntity</returns>
        ApiResponse<HistoryEntity> DeleteHistoryWithHttpInfo (string endDate);
        /// <summary>
        /// Removes a node from the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>NodeEntity</returns>
        NodeEntity DeleteNode (string id);

        /// <summary>
        /// Removes a node from the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>ApiResponse of NodeEntity</returns>
        ApiResponse<NodeEntity> DeleteNodeWithHttpInfo (string id);
        /// <summary>
        /// Deletes a registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>RegistryClientEntity</returns>
        RegistryClientEntity DeleteRegistryClient (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes a registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of RegistryClientEntity</returns>
        ApiResponse<RegistryClientEntity> DeleteRegistryClientWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Gets the contents of the cluster
        /// </summary>
        /// <remarks>
        /// Returns the contents of the cluster including all nodes and their status.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ClusterEntity</returns>
        ClusterEntity GetCluster ();

        /// <summary>
        /// Gets the contents of the cluster
        /// </summary>
        /// <remarks>
        /// Returns the contents of the cluster including all nodes and their status.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ClusterEntity</returns>
        ApiResponse<ClusterEntity> GetClusterWithHttpInfo ();
        /// <summary>
        /// Retrieves the configuration for this NiFi Controller
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ControllerConfigurationEntity</returns>
        ControllerConfigurationEntity GetControllerConfig ();

        /// <summary>
        /// Retrieves the configuration for this NiFi Controller
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ControllerConfigurationEntity</returns>
        ApiResponse<ControllerConfigurationEntity> GetControllerConfigWithHttpInfo ();
        /// <summary>
        /// Gets a node in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>NodeEntity</returns>
        NodeEntity GetNode (string id);

        /// <summary>
        /// Gets a node in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>ApiResponse of NodeEntity</returns>
        ApiResponse<NodeEntity> GetNodeWithHttpInfo (string id);
        /// <summary>
        /// Gets a registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>RegistryClientEntity</returns>
        RegistryClientEntity GetRegistryClient (string id);

        /// <summary>
        /// Gets a registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>ApiResponse of RegistryClientEntity</returns>
        ApiResponse<RegistryClientEntity> GetRegistryClientWithHttpInfo (string id);
        /// <summary>
        /// Gets the listing of available registry clients
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>RegistryClientsEntity</returns>
        RegistryClientsEntity GetRegistryClients ();

        /// <summary>
        /// Gets the listing of available registry clients
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RegistryClientsEntity</returns>
        ApiResponse<RegistryClientsEntity> GetRegistryClientsWithHttpInfo ();
        /// <summary>
        /// Retrieves the configuration for this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller configuration.</param>
        /// <returns>ControllerConfigurationEntity</returns>
        ControllerConfigurationEntity UpdateControllerConfig (ControllerConfigurationEntity body);

        /// <summary>
        /// Retrieves the configuration for this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller configuration.</param>
        /// <returns>ApiResponse of ControllerConfigurationEntity</returns>
        ApiResponse<ControllerConfigurationEntity> UpdateControllerConfigWithHttpInfo (ControllerConfigurationEntity body);
        /// <summary>
        /// Updates a node in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <param name="body">The node configuration. The only configuration that will be honored at this endpoint is the status.</param>
        /// <returns>NodeEntity</returns>
        NodeEntity UpdateNode (string id, NodeEntity body);

        /// <summary>
        /// Updates a node in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <param name="body">The node configuration. The only configuration that will be honored at this endpoint is the status.</param>
        /// <returns>ApiResponse of NodeEntity</returns>
        ApiResponse<NodeEntity> UpdateNodeWithHttpInfo (string id, NodeEntity body);
        /// <summary>
        /// Updates a registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>RegistryClientEntity</returns>
        RegistryClientEntity UpdateRegistryClient (string id, RegistryClientEntity body);

        /// <summary>
        /// Updates a registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>ApiResponse of RegistryClientEntity</returns>
        ApiResponse<RegistryClientEntity> UpdateRegistryClientWithHttpInfo (string id, RegistryClientEntity body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new bulletin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>Task of BulletinEntity</returns>
        System.Threading.Tasks.Task<BulletinEntity> CreateBulletinAsync (BulletinEntity body);

        /// <summary>
        /// Creates a new bulletin
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>Task of ApiResponse (BulletinEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulletinEntity>> CreateBulletinAsyncWithHttpInfo (BulletinEntity body);
        /// <summary>
        /// Creates a new controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ControllerServiceEntity</returns>
        System.Threading.Tasks.Task<ControllerServiceEntity> CreateControllerServiceAsync (ControllerServiceEntity body);

        /// <summary>
        /// Creates a new controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ApiResponse (ControllerServiceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ControllerServiceEntity>> CreateControllerServiceAsyncWithHttpInfo (ControllerServiceEntity body);
        /// <summary>
        /// Creates a new registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>Task of RegistryClientEntity</returns>
        System.Threading.Tasks.Task<RegistryClientEntity> CreateRegistryClientAsync (RegistryClientEntity body);

        /// <summary>
        /// Creates a new registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>Task of ApiResponse (RegistryClientEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistryClientEntity>> CreateRegistryClientAsyncWithHttpInfo (RegistryClientEntity body);
        /// <summary>
        /// Creates a new reporting task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>Task of ReportingTaskEntity</returns>
        System.Threading.Tasks.Task<ReportingTaskEntity> CreateReportingTaskAsync (ReportingTaskEntity body);

        /// <summary>
        /// Creates a new reporting task
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>Task of ApiResponse (ReportingTaskEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportingTaskEntity>> CreateReportingTaskAsyncWithHttpInfo (ReportingTaskEntity body);
        /// <summary>
        /// Purges history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">Purge actions before this date/time.</param>
        /// <returns>Task of HistoryEntity</returns>
        System.Threading.Tasks.Task<HistoryEntity> DeleteHistoryAsync (string endDate);

        /// <summary>
        /// Purges history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">Purge actions before this date/time.</param>
        /// <returns>Task of ApiResponse (HistoryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryEntity>> DeleteHistoryAsyncWithHttpInfo (string endDate);
        /// <summary>
        /// Removes a node from the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>Task of NodeEntity</returns>
        System.Threading.Tasks.Task<NodeEntity> DeleteNodeAsync (string id);

        /// <summary>
        /// Removes a node from the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>Task of ApiResponse (NodeEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeEntity>> DeleteNodeAsyncWithHttpInfo (string id);
        /// <summary>
        /// Deletes a registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of RegistryClientEntity</returns>
        System.Threading.Tasks.Task<RegistryClientEntity> DeleteRegistryClientAsync (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes a registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (RegistryClientEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistryClientEntity>> DeleteRegistryClientAsyncWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Gets the contents of the cluster
        /// </summary>
        /// <remarks>
        /// Returns the contents of the cluster including all nodes and their status.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ClusterEntity</returns>
        System.Threading.Tasks.Task<ClusterEntity> GetClusterAsync ();

        /// <summary>
        /// Gets the contents of the cluster
        /// </summary>
        /// <remarks>
        /// Returns the contents of the cluster including all nodes and their status.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ClusterEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClusterEntity>> GetClusterAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the configuration for this NiFi Controller
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ControllerConfigurationEntity</returns>
        System.Threading.Tasks.Task<ControllerConfigurationEntity> GetControllerConfigAsync ();

        /// <summary>
        /// Retrieves the configuration for this NiFi Controller
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ControllerConfigurationEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ControllerConfigurationEntity>> GetControllerConfigAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a node in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>Task of NodeEntity</returns>
        System.Threading.Tasks.Task<NodeEntity> GetNodeAsync (string id);

        /// <summary>
        /// Gets a node in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>Task of ApiResponse (NodeEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeEntity>> GetNodeAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets a registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>Task of RegistryClientEntity</returns>
        System.Threading.Tasks.Task<RegistryClientEntity> GetRegistryClientAsync (string id);

        /// <summary>
        /// Gets a registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>Task of ApiResponse (RegistryClientEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistryClientEntity>> GetRegistryClientAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets the listing of available registry clients
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RegistryClientsEntity</returns>
        System.Threading.Tasks.Task<RegistryClientsEntity> GetRegistryClientsAsync ();

        /// <summary>
        /// Gets the listing of available registry clients
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RegistryClientsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistryClientsEntity>> GetRegistryClientsAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the configuration for this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller configuration.</param>
        /// <returns>Task of ControllerConfigurationEntity</returns>
        System.Threading.Tasks.Task<ControllerConfigurationEntity> UpdateControllerConfigAsync (ControllerConfigurationEntity body);

        /// <summary>
        /// Retrieves the configuration for this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller configuration.</param>
        /// <returns>Task of ApiResponse (ControllerConfigurationEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ControllerConfigurationEntity>> UpdateControllerConfigAsyncWithHttpInfo (ControllerConfigurationEntity body);
        /// <summary>
        /// Updates a node in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <param name="body">The node configuration. The only configuration that will be honored at this endpoint is the status.</param>
        /// <returns>Task of NodeEntity</returns>
        System.Threading.Tasks.Task<NodeEntity> UpdateNodeAsync (string id, NodeEntity body);

        /// <summary>
        /// Updates a node in the cluster
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <param name="body">The node configuration. The only configuration that will be honored at this endpoint is the status.</param>
        /// <returns>Task of ApiResponse (NodeEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<NodeEntity>> UpdateNodeAsyncWithHttpInfo (string id, NodeEntity body);
        /// <summary>
        /// Updates a registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>Task of RegistryClientEntity</returns>
        System.Threading.Tasks.Task<RegistryClientEntity> UpdateRegistryClientAsync (string id, RegistryClientEntity body);

        /// <summary>
        /// Updates a registry client
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>Task of ApiResponse (RegistryClientEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistryClientEntity>> UpdateRegistryClientAsyncWithHttpInfo (string id, RegistryClientEntity body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ControllerApi : IControllerApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ControllerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ControllerApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ControllerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ControllerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this._exceptionFactory != null && this._exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return this._exceptionFactory;
            }
            set { this._exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new bulletin 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>BulletinEntity</returns>
        public BulletinEntity CreateBulletin (BulletinEntity body)
        {
             ApiResponse<BulletinEntity> localVarResponse = this.CreateBulletinWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new bulletin 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>ApiResponse of BulletinEntity</returns>
        public ApiResponse< BulletinEntity > CreateBulletinWithHttpInfo (BulletinEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerApi->CreateBulletin");

            var localVarPath = "/controller/bulletin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateBulletin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulletinEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulletinEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulletinEntity)));
        }

        /// <summary>
        /// Creates a new bulletin 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>Task of BulletinEntity</returns>
        public async System.Threading.Tasks.Task<BulletinEntity> CreateBulletinAsync (BulletinEntity body)
        {
             ApiResponse<BulletinEntity> localVarResponse = await this.CreateBulletinAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new bulletin 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>Task of ApiResponse (BulletinEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulletinEntity>> CreateBulletinAsyncWithHttpInfo (BulletinEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerApi->CreateBulletin");

            var localVarPath = "/controller/bulletin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateBulletin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulletinEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulletinEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulletinEntity)));
        }

        /// <summary>
        /// Creates a new controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ControllerServiceEntity</returns>
        public ControllerServiceEntity CreateControllerService (ControllerServiceEntity body)
        {
             ApiResponse<ControllerServiceEntity> localVarResponse = this.CreateControllerServiceWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ApiResponse of ControllerServiceEntity</returns>
        public ApiResponse< ControllerServiceEntity > CreateControllerServiceWithHttpInfo (ControllerServiceEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerApi->CreateControllerService");

            var localVarPath = "/controller/controller-services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateControllerService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceEntity)));
        }

        /// <summary>
        /// Creates a new controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ControllerServiceEntity</returns>
        public async System.Threading.Tasks.Task<ControllerServiceEntity> CreateControllerServiceAsync (ControllerServiceEntity body)
        {
             ApiResponse<ControllerServiceEntity> localVarResponse = await this.CreateControllerServiceAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ApiResponse (ControllerServiceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ControllerServiceEntity>> CreateControllerServiceAsyncWithHttpInfo (ControllerServiceEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerApi->CreateControllerService");

            var localVarPath = "/controller/controller-services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateControllerService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceEntity)));
        }

        /// <summary>
        /// Creates a new registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>RegistryClientEntity</returns>
        public RegistryClientEntity CreateRegistryClient (RegistryClientEntity body)
        {
             ApiResponse<RegistryClientEntity> localVarResponse = this.CreateRegistryClientWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>ApiResponse of RegistryClientEntity</returns>
        public ApiResponse< RegistryClientEntity > CreateRegistryClientWithHttpInfo (RegistryClientEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerApi->CreateRegistryClient");

            var localVarPath = "/controller/registry-clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateRegistryClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistryClientEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistryClientEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistryClientEntity)));
        }

        /// <summary>
        /// Creates a new registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>Task of RegistryClientEntity</returns>
        public async System.Threading.Tasks.Task<RegistryClientEntity> CreateRegistryClientAsync (RegistryClientEntity body)
        {
             ApiResponse<RegistryClientEntity> localVarResponse = await this.CreateRegistryClientAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>Task of ApiResponse (RegistryClientEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegistryClientEntity>> CreateRegistryClientAsyncWithHttpInfo (RegistryClientEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerApi->CreateRegistryClient");

            var localVarPath = "/controller/registry-clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateRegistryClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistryClientEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistryClientEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistryClientEntity)));
        }

        /// <summary>
        /// Creates a new reporting task 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>ReportingTaskEntity</returns>
        public ReportingTaskEntity CreateReportingTask (ReportingTaskEntity body)
        {
             ApiResponse<ReportingTaskEntity> localVarResponse = this.CreateReportingTaskWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new reporting task 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>ApiResponse of ReportingTaskEntity</returns>
        public ApiResponse< ReportingTaskEntity > CreateReportingTaskWithHttpInfo (ReportingTaskEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerApi->CreateReportingTask");

            var localVarPath = "/controller/reporting-tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateReportingTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportingTaskEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportingTaskEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportingTaskEntity)));
        }

        /// <summary>
        /// Creates a new reporting task 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>Task of ReportingTaskEntity</returns>
        public async System.Threading.Tasks.Task<ReportingTaskEntity> CreateReportingTaskAsync (ReportingTaskEntity body)
        {
             ApiResponse<ReportingTaskEntity> localVarResponse = await this.CreateReportingTaskAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new reporting task 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The reporting task configuration details.</param>
        /// <returns>Task of ApiResponse (ReportingTaskEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportingTaskEntity>> CreateReportingTaskAsyncWithHttpInfo (ReportingTaskEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerApi->CreateReportingTask");

            var localVarPath = "/controller/reporting-tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateReportingTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportingTaskEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportingTaskEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportingTaskEntity)));
        }

        /// <summary>
        /// Purges history 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">Purge actions before this date/time.</param>
        /// <returns>HistoryEntity</returns>
        public HistoryEntity DeleteHistory (string endDate)
        {
             ApiResponse<HistoryEntity> localVarResponse = this.DeleteHistoryWithHttpInfo(endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Purges history 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">Purge actions before this date/time.</param>
        /// <returns>ApiResponse of HistoryEntity</returns>
        public ApiResponse< HistoryEntity > DeleteHistoryWithHttpInfo (string endDate)
        {
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ControllerApi->DeleteHistory");

            var localVarPath = "/controller/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoryEntity)));
        }

        /// <summary>
        /// Purges history 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">Purge actions before this date/time.</param>
        /// <returns>Task of HistoryEntity</returns>
        public async System.Threading.Tasks.Task<HistoryEntity> DeleteHistoryAsync (string endDate)
        {
             ApiResponse<HistoryEntity> localVarResponse = await this.DeleteHistoryAsyncWithHttpInfo(endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Purges history 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDate">Purge actions before this date/time.</param>
        /// <returns>Task of ApiResponse (HistoryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HistoryEntity>> DeleteHistoryAsyncWithHttpInfo (string endDate)
        {
            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new ApiException(400, "Missing required parameter 'endDate' when calling ControllerApi->DeleteHistory");

            var localVarPath = "/controller/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoryEntity)));
        }

        /// <summary>
        /// Removes a node from the cluster 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>NodeEntity</returns>
        public NodeEntity DeleteNode (string id)
        {
             ApiResponse<NodeEntity> localVarResponse = this.DeleteNodeWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes a node from the cluster 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>ApiResponse of NodeEntity</returns>
        public ApiResponse< NodeEntity > DeleteNodeWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerApi->DeleteNode");

            var localVarPath = "/controller/cluster/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeEntity)));
        }

        /// <summary>
        /// Removes a node from the cluster 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>Task of NodeEntity</returns>
        public async System.Threading.Tasks.Task<NodeEntity> DeleteNodeAsync (string id)
        {
             ApiResponse<NodeEntity> localVarResponse = await this.DeleteNodeAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes a node from the cluster 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>Task of ApiResponse (NodeEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeEntity>> DeleteNodeAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerApi->DeleteNode");

            var localVarPath = "/controller/cluster/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeEntity)));
        }

        /// <summary>
        /// Deletes a registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>RegistryClientEntity</returns>
        public RegistryClientEntity DeleteRegistryClient (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<RegistryClientEntity> localVarResponse = this.DeleteRegistryClientWithHttpInfo(id, version, clientId, disconnectedNodeAcknowledged);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of RegistryClientEntity</returns>
        public ApiResponse< RegistryClientEntity > DeleteRegistryClientWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerApi->DeleteRegistryClient");

            var localVarPath = "/controller/registry-clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clientId", clientId)); // query parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteRegistryClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistryClientEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistryClientEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistryClientEntity)));
        }

        /// <summary>
        /// Deletes a registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of RegistryClientEntity</returns>
        public async System.Threading.Tasks.Task<RegistryClientEntity> DeleteRegistryClientAsync (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<RegistryClientEntity> localVarResponse = await this.DeleteRegistryClientAsyncWithHttpInfo(id, version, clientId, disconnectedNodeAcknowledged);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (RegistryClientEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegistryClientEntity>> DeleteRegistryClientAsyncWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerApi->DeleteRegistryClient");

            var localVarPath = "/controller/registry-clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clientId", clientId)); // query parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteRegistryClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistryClientEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistryClientEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistryClientEntity)));
        }

        /// <summary>
        /// Gets the contents of the cluster Returns the contents of the cluster including all nodes and their status.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ClusterEntity</returns>
        public ClusterEntity GetCluster ()
        {
             ApiResponse<ClusterEntity> localVarResponse = this.GetClusterWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contents of the cluster Returns the contents of the cluster including all nodes and their status.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ClusterEntity</returns>
        public ApiResponse< ClusterEntity > GetClusterWithHttpInfo ()
        {

            var localVarPath = "/controller/cluster";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCluster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClusterEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClusterEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClusterEntity)));
        }

        /// <summary>
        /// Gets the contents of the cluster Returns the contents of the cluster including all nodes and their status.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ClusterEntity</returns>
        public async System.Threading.Tasks.Task<ClusterEntity> GetClusterAsync ()
        {
             ApiResponse<ClusterEntity> localVarResponse = await this.GetClusterAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the contents of the cluster Returns the contents of the cluster including all nodes and their status.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ClusterEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClusterEntity>> GetClusterAsyncWithHttpInfo ()
        {

            var localVarPath = "/controller/cluster";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCluster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClusterEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClusterEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClusterEntity)));
        }

        /// <summary>
        /// Retrieves the configuration for this NiFi Controller 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ControllerConfigurationEntity</returns>
        public ControllerConfigurationEntity GetControllerConfig ()
        {
             ApiResponse<ControllerConfigurationEntity> localVarResponse = this.GetControllerConfigWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the configuration for this NiFi Controller 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ControllerConfigurationEntity</returns>
        public ApiResponse< ControllerConfigurationEntity > GetControllerConfigWithHttpInfo ()
        {

            var localVarPath = "/controller/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetControllerConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerConfigurationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerConfigurationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerConfigurationEntity)));
        }

        /// <summary>
        /// Retrieves the configuration for this NiFi Controller 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ControllerConfigurationEntity</returns>
        public async System.Threading.Tasks.Task<ControllerConfigurationEntity> GetControllerConfigAsync ()
        {
             ApiResponse<ControllerConfigurationEntity> localVarResponse = await this.GetControllerConfigAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the configuration for this NiFi Controller 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ControllerConfigurationEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ControllerConfigurationEntity>> GetControllerConfigAsyncWithHttpInfo ()
        {

            var localVarPath = "/controller/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetControllerConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerConfigurationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerConfigurationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerConfigurationEntity)));
        }

        /// <summary>
        /// Gets a node in the cluster 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>NodeEntity</returns>
        public NodeEntity GetNode (string id)
        {
             ApiResponse<NodeEntity> localVarResponse = this.GetNodeWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a node in the cluster 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>ApiResponse of NodeEntity</returns>
        public ApiResponse< NodeEntity > GetNodeWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerApi->GetNode");

            var localVarPath = "/controller/cluster/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeEntity)));
        }

        /// <summary>
        /// Gets a node in the cluster 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>Task of NodeEntity</returns>
        public async System.Threading.Tasks.Task<NodeEntity> GetNodeAsync (string id)
        {
             ApiResponse<NodeEntity> localVarResponse = await this.GetNodeAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a node in the cluster 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <returns>Task of ApiResponse (NodeEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeEntity>> GetNodeAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerApi->GetNode");

            var localVarPath = "/controller/cluster/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeEntity)));
        }

        /// <summary>
        /// Gets a registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>RegistryClientEntity</returns>
        public RegistryClientEntity GetRegistryClient (string id)
        {
             ApiResponse<RegistryClientEntity> localVarResponse = this.GetRegistryClientWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>ApiResponse of RegistryClientEntity</returns>
        public ApiResponse< RegistryClientEntity > GetRegistryClientWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerApi->GetRegistryClient");

            var localVarPath = "/controller/registry-clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRegistryClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistryClientEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistryClientEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistryClientEntity)));
        }

        /// <summary>
        /// Gets a registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>Task of RegistryClientEntity</returns>
        public async System.Threading.Tasks.Task<RegistryClientEntity> GetRegistryClientAsync (string id)
        {
             ApiResponse<RegistryClientEntity> localVarResponse = await this.GetRegistryClientAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>Task of ApiResponse (RegistryClientEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegistryClientEntity>> GetRegistryClientAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerApi->GetRegistryClient");

            var localVarPath = "/controller/registry-clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRegistryClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistryClientEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistryClientEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistryClientEntity)));
        }

        /// <summary>
        /// Gets the listing of available registry clients 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>RegistryClientsEntity</returns>
        public RegistryClientsEntity GetRegistryClients ()
        {
             ApiResponse<RegistryClientsEntity> localVarResponse = this.GetRegistryClientsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the listing of available registry clients 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RegistryClientsEntity</returns>
        public ApiResponse< RegistryClientsEntity > GetRegistryClientsWithHttpInfo ()
        {

            var localVarPath = "/controller/registry-clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRegistryClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistryClientsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistryClientsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistryClientsEntity)));
        }

        /// <summary>
        /// Gets the listing of available registry clients 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RegistryClientsEntity</returns>
        public async System.Threading.Tasks.Task<RegistryClientsEntity> GetRegistryClientsAsync ()
        {
             ApiResponse<RegistryClientsEntity> localVarResponse = await this.GetRegistryClientsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the listing of available registry clients 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RegistryClientsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegistryClientsEntity>> GetRegistryClientsAsyncWithHttpInfo ()
        {

            var localVarPath = "/controller/registry-clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRegistryClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistryClientsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistryClientsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistryClientsEntity)));
        }

        /// <summary>
        /// Retrieves the configuration for this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller configuration.</param>
        /// <returns>ControllerConfigurationEntity</returns>
        public ControllerConfigurationEntity UpdateControllerConfig (ControllerConfigurationEntity body)
        {
             ApiResponse<ControllerConfigurationEntity> localVarResponse = this.UpdateControllerConfigWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the configuration for this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller configuration.</param>
        /// <returns>ApiResponse of ControllerConfigurationEntity</returns>
        public ApiResponse< ControllerConfigurationEntity > UpdateControllerConfigWithHttpInfo (ControllerConfigurationEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerApi->UpdateControllerConfig");

            var localVarPath = "/controller/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateControllerConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerConfigurationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerConfigurationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerConfigurationEntity)));
        }

        /// <summary>
        /// Retrieves the configuration for this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller configuration.</param>
        /// <returns>Task of ControllerConfigurationEntity</returns>
        public async System.Threading.Tasks.Task<ControllerConfigurationEntity> UpdateControllerConfigAsync (ControllerConfigurationEntity body)
        {
             ApiResponse<ControllerConfigurationEntity> localVarResponse = await this.UpdateControllerConfigAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the configuration for this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The controller configuration.</param>
        /// <returns>Task of ApiResponse (ControllerConfigurationEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ControllerConfigurationEntity>> UpdateControllerConfigAsyncWithHttpInfo (ControllerConfigurationEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerApi->UpdateControllerConfig");

            var localVarPath = "/controller/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateControllerConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerConfigurationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerConfigurationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerConfigurationEntity)));
        }

        /// <summary>
        /// Updates a node in the cluster 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <param name="body">The node configuration. The only configuration that will be honored at this endpoint is the status.</param>
        /// <returns>NodeEntity</returns>
        public NodeEntity UpdateNode (string id, NodeEntity body)
        {
             ApiResponse<NodeEntity> localVarResponse = this.UpdateNodeWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a node in the cluster 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <param name="body">The node configuration. The only configuration that will be honored at this endpoint is the status.</param>
        /// <returns>ApiResponse of NodeEntity</returns>
        public ApiResponse< NodeEntity > UpdateNodeWithHttpInfo (string id, NodeEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerApi->UpdateNode");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerApi->UpdateNode");

            var localVarPath = "/controller/cluster/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeEntity)));
        }

        /// <summary>
        /// Updates a node in the cluster 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <param name="body">The node configuration. The only configuration that will be honored at this endpoint is the status.</param>
        /// <returns>Task of NodeEntity</returns>
        public async System.Threading.Tasks.Task<NodeEntity> UpdateNodeAsync (string id, NodeEntity body)
        {
             ApiResponse<NodeEntity> localVarResponse = await this.UpdateNodeAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a node in the cluster 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The node id.</param>
        /// <param name="body">The node configuration. The only configuration that will be honored at this endpoint is the status.</param>
        /// <returns>Task of ApiResponse (NodeEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NodeEntity>> UpdateNodeAsyncWithHttpInfo (string id, NodeEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerApi->UpdateNode");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerApi->UpdateNode");

            var localVarPath = "/controller/cluster/nodes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateNode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NodeEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NodeEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NodeEntity)));
        }

        /// <summary>
        /// Updates a registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>RegistryClientEntity</returns>
        public RegistryClientEntity UpdateRegistryClient (string id, RegistryClientEntity body)
        {
             ApiResponse<RegistryClientEntity> localVarResponse = this.UpdateRegistryClientWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>ApiResponse of RegistryClientEntity</returns>
        public ApiResponse< RegistryClientEntity > UpdateRegistryClientWithHttpInfo (string id, RegistryClientEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerApi->UpdateRegistryClient");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerApi->UpdateRegistryClient");

            var localVarPath = "/controller/registry-clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateRegistryClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistryClientEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistryClientEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistryClientEntity)));
        }

        /// <summary>
        /// Updates a registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>Task of RegistryClientEntity</returns>
        public async System.Threading.Tasks.Task<RegistryClientEntity> UpdateRegistryClientAsync (string id, RegistryClientEntity body)
        {
             ApiResponse<RegistryClientEntity> localVarResponse = await this.UpdateRegistryClientAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a registry client 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <param name="body">The registry configuration details.</param>
        /// <returns>Task of ApiResponse (RegistryClientEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegistryClientEntity>> UpdateRegistryClientAsyncWithHttpInfo (string id, RegistryClientEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ControllerApi->UpdateRegistryClient");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ControllerApi->UpdateRegistryClient");

            var localVarPath = "/controller/registry-clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateRegistryClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistryClientEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistryClientEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistryClientEntity)));
        }

    }
}
