/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Api
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;

    using NiFi.Swagger.Core.Client;
    using NiFi.Swagger.Core.Model;

    using RestSharp;

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFlowApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Enable or disable Controller Services in the specified Process Group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>ActivateControllerServicesEntity</returns>
        ActivateControllerServicesEntity ActivateControllerServices (string id, ActivateControllerServicesEntity body);

        /// <summary>
        /// Enable or disable Controller Services in the specified Process Group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>ApiResponse of ActivateControllerServicesEntity</returns>
        ApiResponse<ActivateControllerServicesEntity> ActivateControllerServicesWithHttpInfo (string id, ActivateControllerServicesEntity body);
        /// <summary>
        /// Generates a client id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string GenerateClientId ();

        /// <summary>
        /// Generates a client id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GenerateClientIdWithHttpInfo ();
        /// <summary>
        /// Retrieves details about this NiFi to put in the About dialog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>AboutEntity</returns>
        AboutEntity GetAboutInfo ();

        /// <summary>
        /// Retrieves details about this NiFi to put in the About dialog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AboutEntity</returns>
        ApiResponse<AboutEntity> GetAboutInfoWithHttpInfo ();
        /// <summary>
        /// Gets an action
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The action id.</param>
        /// <returns>ActionEntity</returns>
        ActionEntity GetAction (string id);

        /// <summary>
        /// Gets an action
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The action id.</param>
        /// <returns>ApiResponse of ActionEntity</returns>
        ApiResponse<ActionEntity> GetActionWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the banners for this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>BannerEntity</returns>
        BannerEntity GetBanners ();

        /// <summary>
        /// Retrieves the banners for this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BannerEntity</returns>
        ApiResponse<BannerEntity> GetBannersWithHttpInfo ();
        /// <summary>
        /// Gets the buckets from the specified registry for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>BucketsEntity</returns>
        BucketsEntity GetBuckets (string id);

        /// <summary>
        /// Gets the buckets from the specified registry for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>ApiResponse of BucketsEntity</returns>
        ApiResponse<BucketsEntity> GetBucketsWithHttpInfo (string id);
        /// <summary>
        /// Gets current bulletins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Includes bulletins with an id after this value. (optional)</param>
        /// <param name="sourceName">Includes bulletins originating from this sources whose name match this regular expression. (optional)</param>
        /// <param name="message">Includes bulletins whose message that match this regular expression. (optional)</param>
        /// <param name="sourceId">Includes bulletins originating from this sources whose id match this regular expression. (optional)</param>
        /// <param name="groupId">Includes bulletins originating from this sources whose group id match this regular expression. (optional)</param>
        /// <param name="limit">The number of bulletins to limit the response to. (optional)</param>
        /// <returns>BulletinBoardEntity</returns>
        BulletinBoardEntity GetBulletinBoard (string after = null, string sourceName = null, string message = null, string sourceId = null, string groupId = null, string limit = null);

        /// <summary>
        /// Gets current bulletins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Includes bulletins with an id after this value. (optional)</param>
        /// <param name="sourceName">Includes bulletins originating from this sources whose name match this regular expression. (optional)</param>
        /// <param name="message">Includes bulletins whose message that match this regular expression. (optional)</param>
        /// <param name="sourceId">Includes bulletins originating from this sources whose id match this regular expression. (optional)</param>
        /// <param name="groupId">Includes bulletins originating from this sources whose group id match this regular expression. (optional)</param>
        /// <param name="limit">The number of bulletins to limit the response to. (optional)</param>
        /// <returns>ApiResponse of BulletinBoardEntity</returns>
        ApiResponse<BulletinBoardEntity> GetBulletinBoardWithHttpInfo (string after = null, string sourceName = null, string message = null, string sourceId = null, string groupId = null, string limit = null);
        /// <summary>
        /// Retrieves Controller level bulletins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ControllerBulletinsEntity</returns>
        ControllerBulletinsEntity GetBulletins ();

        /// <summary>
        /// Retrieves Controller level bulletins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ControllerBulletinsEntity</returns>
        ApiResponse<ControllerBulletinsEntity> GetBulletinsWithHttpInfo ();
        /// <summary>
        /// The cluster summary for this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ClusteSummaryEntity</returns>
        ClusteSummaryEntity GetClusterSummary ();

        /// <summary>
        /// The cluster summary for this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ClusteSummaryEntity</returns>
        ApiResponse<ClusteSummaryEntity> GetClusterSummaryWithHttpInfo ();
        /// <summary>
        /// Gets configuration history for a component
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="componentId">The component id.</param>
        /// <returns>ComponentHistoryEntity</returns>
        ComponentHistoryEntity GetComponentHistory (string componentId);

        /// <summary>
        /// Gets configuration history for a component
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="componentId">The component id.</param>
        /// <returns>ApiResponse of ComponentHistoryEntity</returns>
        ApiResponse<ComponentHistoryEntity> GetComponentHistoryWithHttpInfo (string componentId);
        /// <summary>
        /// Gets status for a connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ConnectionStatusEntity</returns>
        ConnectionStatusEntity GetConnectionStatus (string id, bool? nodewise = null, string clusterNodeId = null);

        /// <summary>
        /// Gets status for a connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ApiResponse of ConnectionStatusEntity</returns>
        ApiResponse<ConnectionStatusEntity> GetConnectionStatusWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null);
        /// <summary>
        /// Gets the status history for a connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>StatusHistoryEntity</returns>
        StatusHistoryEntity GetConnectionStatusHistory (string id);

        /// <summary>
        /// Gets the status history for a connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>ApiResponse of StatusHistoryEntity</returns>
        ApiResponse<StatusHistoryEntity> GetConnectionStatusHistoryWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the types of controller services that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">If specified, will only return controller services that are compatible with this type of service. (optional)</param>
        /// <param name="serviceBundleGroup">If serviceType specified, is the bundle group of the serviceType. (optional)</param>
        /// <param name="serviceBundleArtifact">If serviceType specified, is the bundle artifact of the serviceType. (optional)</param>
        /// <param name="serviceBundleVersion">If serviceType specified, is the bundle version of the serviceType. (optional)</param>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="typeFilter">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>ControllerServiceTypesEntity</returns>
        ControllerServiceTypesEntity GetControllerServiceTypes (string serviceType = null, string serviceBundleGroup = null, string serviceBundleArtifact = null, string serviceBundleVersion = null, string bundleGroupFilter = null, string bundleArtifactFilter = null, string typeFilter = null);

        /// <summary>
        /// Retrieves the types of controller services that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">If specified, will only return controller services that are compatible with this type of service. (optional)</param>
        /// <param name="serviceBundleGroup">If serviceType specified, is the bundle group of the serviceType. (optional)</param>
        /// <param name="serviceBundleArtifact">If serviceType specified, is the bundle artifact of the serviceType. (optional)</param>
        /// <param name="serviceBundleVersion">If serviceType specified, is the bundle version of the serviceType. (optional)</param>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="typeFilter">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>ApiResponse of ControllerServiceTypesEntity</returns>
        ApiResponse<ControllerServiceTypesEntity> GetControllerServiceTypesWithHttpInfo (string serviceType = null, string serviceBundleGroup = null, string serviceBundleArtifact = null, string serviceBundleVersion = null, string bundleGroupFilter = null, string bundleArtifactFilter = null, string typeFilter = null);
        /// <summary>
        /// Gets controller services for reporting tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ControllerServicesEntity</returns>
        ControllerServicesEntity GetControllerServicesFromController ();

        /// <summary>
        /// Gets controller services for reporting tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ControllerServicesEntity</returns>
        ApiResponse<ControllerServicesEntity> GetControllerServicesFromControllerWithHttpInfo ();
        /// <summary>
        /// Gets all controller services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include parent/ancestory process groups (optional, default to true)</param>
        /// <param name="includeDescendantGroups">Whether or not to include descendant process groups (optional, default to false)</param>
        /// <returns>ControllerServicesEntity</returns>
        ControllerServicesEntity GetControllerServicesFromGroup (string id, bool? includeAncestorGroups = null, bool? includeDescendantGroups = null);

        /// <summary>
        /// Gets all controller services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include parent/ancestory process groups (optional, default to true)</param>
        /// <param name="includeDescendantGroups">Whether or not to include descendant process groups (optional, default to false)</param>
        /// <returns>ApiResponse of ControllerServicesEntity</returns>
        ApiResponse<ControllerServicesEntity> GetControllerServicesFromGroupWithHttpInfo (string id, bool? includeAncestorGroups = null, bool? includeDescendantGroups = null);
        /// <summary>
        /// Gets the current status of this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ControllerStatusEntity</returns>
        ControllerStatusEntity GetControllerStatus ();

        /// <summary>
        /// Gets the current status of this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ControllerStatusEntity</returns>
        ApiResponse<ControllerStatusEntity> GetControllerStatusWithHttpInfo ();
        /// <summary>
        /// Retrieves the user identity of the user making the request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>CurrentUserEntity</returns>
        CurrentUserEntity GetCurrentUser ();

        /// <summary>
        /// Retrieves the user identity of the user making the request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CurrentUserEntity</returns>
        ApiResponse<CurrentUserEntity> GetCurrentUserWithHttpInfo ();
        /// <summary>
        /// Gets a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ProcessGroupFlowEntity</returns>
        ProcessGroupFlowEntity GetFlow (string id);

        /// <summary>
        /// Gets a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of ProcessGroupFlowEntity</returns>
        ApiResponse<ProcessGroupFlowEntity> GetFlowWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the configuration for this NiFi flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>FlowConfigurationEntity</returns>
        FlowConfigurationEntity GetFlowConfig ();

        /// <summary>
        /// Retrieves the configuration for this NiFi flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FlowConfigurationEntity</returns>
        ApiResponse<FlowConfigurationEntity> GetFlowConfigWithHttpInfo ();
        /// <summary>
        /// Gets the flows from the specified registry and bucket for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <returns>VersionedFlowsEntity</returns>
        VersionedFlowsEntity GetFlows (string registryId, string bucketId);

        /// <summary>
        /// Gets the flows from the specified registry and bucket for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <returns>ApiResponse of VersionedFlowsEntity</returns>
        ApiResponse<VersionedFlowsEntity> GetFlowsWithHttpInfo (string registryId, string bucketId);
        /// <summary>
        /// Gets status for an input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The input port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>PortStatusEntity</returns>
        PortStatusEntity GetInputPortStatus (string id, bool? nodewise = null, string clusterNodeId = null);

        /// <summary>
        /// Gets status for an input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The input port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ApiResponse of PortStatusEntity</returns>
        ApiResponse<PortStatusEntity> GetInputPortStatusWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null);
        /// <summary>
        /// Gets status for an output port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The output port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>PortStatusEntity</returns>
        PortStatusEntity GetOutputPortStatus (string id, bool? nodewise = null, string clusterNodeId = null);

        /// <summary>
        /// Gets status for an output port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The output port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ApiResponse of PortStatusEntity</returns>
        ApiResponse<PortStatusEntity> GetOutputPortStatusWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null);
        /// <summary>
        /// Retrieves the types of prioritizers that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>PrioritizerTypesEntity</returns>
        PrioritizerTypesEntity GetPrioritizers ();

        /// <summary>
        /// Retrieves the types of prioritizers that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PrioritizerTypesEntity</returns>
        ApiResponse<PrioritizerTypesEntity> GetPrioritizersWithHttpInfo ();
        /// <summary>
        /// Gets the status for a process group
        /// </summary>
        /// <remarks>
        /// The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="recursive">Whether all descendant groups and the status of their content will be included. Optional, defaults to false (optional, default to false)</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ProcessGroupStatusEntity</returns>
        ProcessGroupStatusEntity GetProcessGroupStatus (string id, bool? recursive = null, bool? nodewise = null, string clusterNodeId = null);

        /// <summary>
        /// Gets the status for a process group
        /// </summary>
        /// <remarks>
        /// The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="recursive">Whether all descendant groups and the status of their content will be included. Optional, defaults to false (optional, default to false)</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ApiResponse of ProcessGroupStatusEntity</returns>
        ApiResponse<ProcessGroupStatusEntity> GetProcessGroupStatusWithHttpInfo (string id, bool? recursive = null, bool? nodewise = null, string clusterNodeId = null);
        /// <summary>
        /// Gets status history for a remote process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>StatusHistoryEntity</returns>
        StatusHistoryEntity GetProcessGroupStatusHistory (string id);

        /// <summary>
        /// Gets status history for a remote process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of StatusHistoryEntity</returns>
        ApiResponse<StatusHistoryEntity> GetProcessGroupStatusHistoryWithHttpInfo (string id);
        /// <summary>
        /// Gets status for a processor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ProcessorStatusEntity</returns>
        ProcessorStatusEntity GetProcessorStatus (string id, bool? nodewise = null, string clusterNodeId = null);

        /// <summary>
        /// Gets status for a processor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ApiResponse of ProcessorStatusEntity</returns>
        ApiResponse<ProcessorStatusEntity> GetProcessorStatusWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null);
        /// <summary>
        /// Gets status history for a processor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <returns>StatusHistoryEntity</returns>
        StatusHistoryEntity GetProcessorStatusHistory (string id);

        /// <summary>
        /// Gets status history for a processor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <returns>ApiResponse of StatusHistoryEntity</returns>
        ApiResponse<StatusHistoryEntity> GetProcessorStatusHistoryWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the types of processors that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>ProcessorTypesEntity</returns>
        ProcessorTypesEntity GetProcessorTypes (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null);

        /// <summary>
        /// Retrieves the types of processors that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>ApiResponse of ProcessorTypesEntity</returns>
        ApiResponse<ProcessorTypesEntity> GetProcessorTypesWithHttpInfo (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null);
        /// <summary>
        /// Gets the listing of available registries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>RegistryClientsEntity</returns>
        RegistryClientsEntity GetRegistries ();

        /// <summary>
        /// Gets the listing of available registries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RegistryClientsEntity</returns>
        ApiResponse<RegistryClientsEntity> GetRegistriesWithHttpInfo ();
        /// <summary>
        /// Gets status for a remote process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>RemoteProcessGroupStatusEntity</returns>
        RemoteProcessGroupStatusEntity GetRemoteProcessGroupStatus (string id, bool? nodewise = null, string clusterNodeId = null);

        /// <summary>
        /// Gets status for a remote process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ApiResponse of RemoteProcessGroupStatusEntity</returns>
        ApiResponse<RemoteProcessGroupStatusEntity> GetRemoteProcessGroupStatusWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null);
        /// <summary>
        /// Gets the status history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <returns>StatusHistoryEntity</returns>
        StatusHistoryEntity GetRemoteProcessGroupStatusHistory (string id);

        /// <summary>
        /// Gets the status history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <returns>ApiResponse of StatusHistoryEntity</returns>
        ApiResponse<StatusHistoryEntity> GetRemoteProcessGroupStatusHistoryWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the types of reporting tasks that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>ReportingTaskTypesEntity</returns>
        ReportingTaskTypesEntity GetReportingTaskTypes (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null);

        /// <summary>
        /// Retrieves the types of reporting tasks that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>ApiResponse of ReportingTaskTypesEntity</returns>
        ApiResponse<ReportingTaskTypesEntity> GetReportingTaskTypesWithHttpInfo (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null);
        /// <summary>
        /// Gets all reporting tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ReportingTasksEntity</returns>
        ReportingTasksEntity GetReportingTasks ();

        /// <summary>
        /// Gets all reporting tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ReportingTasksEntity</returns>
        ApiResponse<ReportingTasksEntity> GetReportingTasksWithHttpInfo ();
        /// <summary>
        /// Gets all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>TemplatesEntity</returns>
        TemplatesEntity GetTemplates ();

        /// <summary>
        /// Gets all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TemplatesEntity</returns>
        ApiResponse<TemplatesEntity> GetTemplatesWithHttpInfo ();
        /// <summary>
        /// Gets the flow versions from the specified registry and bucket for the specified flow for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <param name="flowId">The flow id.</param>
        /// <returns>VersionedFlowSnapshotMetadataSetEntity</returns>
        VersionedFlowSnapshotMetadataSetEntity GetVersions (string registryId, string bucketId, string flowId);

        /// <summary>
        /// Gets the flow versions from the specified registry and bucket for the specified flow for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <param name="flowId">The flow id.</param>
        /// <returns>ApiResponse of VersionedFlowSnapshotMetadataSetEntity</returns>
        ApiResponse<VersionedFlowSnapshotMetadataSetEntity> GetVersionsWithHttpInfo (string registryId, string bucketId, string flowId);
        /// <summary>
        /// Gets configuration history
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The offset into the result set.</param>
        /// <param name="count">The number of actions to return.</param>
        /// <param name="sortColumn">The field to sort on. (optional)</param>
        /// <param name="sortOrder">The direction to sort. (optional)</param>
        /// <param name="startDate">Include actions after this date. (optional)</param>
        /// <param name="endDate">Include actions before this date. (optional)</param>
        /// <param name="userIdentity">Include actions performed by this user. (optional)</param>
        /// <param name="sourceId">Include actions on this component. (optional)</param>
        /// <returns>HistoryEntity</returns>
        HistoryEntity QueryHistory (string offset, string count, string sortColumn = null, string sortOrder = null, string startDate = null, string endDate = null, string userIdentity = null, string sourceId = null);

        /// <summary>
        /// Gets configuration history
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The offset into the result set.</param>
        /// <param name="count">The number of actions to return.</param>
        /// <param name="sortColumn">The field to sort on. (optional)</param>
        /// <param name="sortOrder">The direction to sort. (optional)</param>
        /// <param name="startDate">Include actions after this date. (optional)</param>
        /// <param name="endDate">Include actions before this date. (optional)</param>
        /// <param name="userIdentity">Include actions performed by this user. (optional)</param>
        /// <param name="sourceId">Include actions on this component. (optional)</param>
        /// <returns>ApiResponse of HistoryEntity</returns>
        ApiResponse<HistoryEntity> QueryHistoryWithHttpInfo (string offset, string count, string sortColumn = null, string sortOrder = null, string startDate = null, string endDate = null, string userIdentity = null, string sourceId = null);
        /// <summary>
        /// Schedule or unschedule components in the specified Process Group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>ScheduleComponentsEntity</returns>
        ScheduleComponentsEntity ScheduleComponents (string id, ScheduleComponentsEntity body);

        /// <summary>
        /// Schedule or unschedule components in the specified Process Group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>ApiResponse of ScheduleComponentsEntity</returns>
        ApiResponse<ScheduleComponentsEntity> ScheduleComponentsWithHttpInfo (string id, ScheduleComponentsEntity body);
        /// <summary>
        /// Searches the cluster for a node with the specified address
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Node address to search for.</param>
        /// <returns>ClusterSearchResultsEntity</returns>
        ClusterSearchResultsEntity SearchCluster (string q);

        /// <summary>
        /// Searches the cluster for a node with the specified address
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Node address to search for.</param>
        /// <returns>ApiResponse of ClusterSearchResultsEntity</returns>
        ApiResponse<ClusterSearchResultsEntity> SearchClusterWithHttpInfo (string q);
        /// <summary>
        /// Performs a search against this NiFi using the specified search term
        /// </summary>
        /// <remarks>
        /// Only search results from authorized components will be returned.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <returns>SearchResultsEntity</returns>
        SearchResultsEntity SearchFlow (string q = null);

        /// <summary>
        /// Performs a search against this NiFi using the specified search term
        /// </summary>
        /// <remarks>
        /// Only search results from authorized components will be returned.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <returns>ApiResponse of SearchResultsEntity</returns>
        ApiResponse<SearchResultsEntity> SearchFlowWithHttpInfo (string q = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Enable or disable Controller Services in the specified Process Group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>Task of ActivateControllerServicesEntity</returns>
        System.Threading.Tasks.Task<ActivateControllerServicesEntity> ActivateControllerServicesAsync (string id, ActivateControllerServicesEntity body);

        /// <summary>
        /// Enable or disable Controller Services in the specified Process Group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>Task of ApiResponse (ActivateControllerServicesEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActivateControllerServicesEntity>> ActivateControllerServicesAsyncWithHttpInfo (string id, ActivateControllerServicesEntity body);
        /// <summary>
        /// Generates a client id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GenerateClientIdAsync ();

        /// <summary>
        /// Generates a client id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GenerateClientIdAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves details about this NiFi to put in the About dialog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AboutEntity</returns>
        System.Threading.Tasks.Task<AboutEntity> GetAboutInfoAsync ();

        /// <summary>
        /// Retrieves details about this NiFi to put in the About dialog
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AboutEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<AboutEntity>> GetAboutInfoAsyncWithHttpInfo ();
        /// <summary>
        /// Gets an action
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The action id.</param>
        /// <returns>Task of ActionEntity</returns>
        System.Threading.Tasks.Task<ActionEntity> GetActionAsync (string id);

        /// <summary>
        /// Gets an action
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The action id.</param>
        /// <returns>Task of ApiResponse (ActionEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActionEntity>> GetActionAsyncWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the banners for this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BannerEntity</returns>
        System.Threading.Tasks.Task<BannerEntity> GetBannersAsync ();

        /// <summary>
        /// Retrieves the banners for this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BannerEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<BannerEntity>> GetBannersAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the buckets from the specified registry for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>Task of BucketsEntity</returns>
        System.Threading.Tasks.Task<BucketsEntity> GetBucketsAsync (string id);

        /// <summary>
        /// Gets the buckets from the specified registry for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>Task of ApiResponse (BucketsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<BucketsEntity>> GetBucketsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets current bulletins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Includes bulletins with an id after this value. (optional)</param>
        /// <param name="sourceName">Includes bulletins originating from this sources whose name match this regular expression. (optional)</param>
        /// <param name="message">Includes bulletins whose message that match this regular expression. (optional)</param>
        /// <param name="sourceId">Includes bulletins originating from this sources whose id match this regular expression. (optional)</param>
        /// <param name="groupId">Includes bulletins originating from this sources whose group id match this regular expression. (optional)</param>
        /// <param name="limit">The number of bulletins to limit the response to. (optional)</param>
        /// <returns>Task of BulletinBoardEntity</returns>
        System.Threading.Tasks.Task<BulletinBoardEntity> GetBulletinBoardAsync (string after = null, string sourceName = null, string message = null, string sourceId = null, string groupId = null, string limit = null);

        /// <summary>
        /// Gets current bulletins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Includes bulletins with an id after this value. (optional)</param>
        /// <param name="sourceName">Includes bulletins originating from this sources whose name match this regular expression. (optional)</param>
        /// <param name="message">Includes bulletins whose message that match this regular expression. (optional)</param>
        /// <param name="sourceId">Includes bulletins originating from this sources whose id match this regular expression. (optional)</param>
        /// <param name="groupId">Includes bulletins originating from this sources whose group id match this regular expression. (optional)</param>
        /// <param name="limit">The number of bulletins to limit the response to. (optional)</param>
        /// <returns>Task of ApiResponse (BulletinBoardEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<BulletinBoardEntity>> GetBulletinBoardAsyncWithHttpInfo (string after = null, string sourceName = null, string message = null, string sourceId = null, string groupId = null, string limit = null);
        /// <summary>
        /// Retrieves Controller level bulletins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ControllerBulletinsEntity</returns>
        System.Threading.Tasks.Task<ControllerBulletinsEntity> GetBulletinsAsync ();

        /// <summary>
        /// Retrieves Controller level bulletins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ControllerBulletinsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ControllerBulletinsEntity>> GetBulletinsAsyncWithHttpInfo ();
        /// <summary>
        /// The cluster summary for this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ClusteSummaryEntity</returns>
        System.Threading.Tasks.Task<ClusteSummaryEntity> GetClusterSummaryAsync ();

        /// <summary>
        /// The cluster summary for this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ClusteSummaryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClusteSummaryEntity>> GetClusterSummaryAsyncWithHttpInfo ();
        /// <summary>
        /// Gets configuration history for a component
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="componentId">The component id.</param>
        /// <returns>Task of ComponentHistoryEntity</returns>
        System.Threading.Tasks.Task<ComponentHistoryEntity> GetComponentHistoryAsync (string componentId);

        /// <summary>
        /// Gets configuration history for a component
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="componentId">The component id.</param>
        /// <returns>Task of ApiResponse (ComponentHistoryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComponentHistoryEntity>> GetComponentHistoryAsyncWithHttpInfo (string componentId);
        /// <summary>
        /// Gets status for a connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ConnectionStatusEntity</returns>
        System.Threading.Tasks.Task<ConnectionStatusEntity> GetConnectionStatusAsync (string id, bool? nodewise = null, string clusterNodeId = null);

        /// <summary>
        /// Gets status for a connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ApiResponse (ConnectionStatusEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectionStatusEntity>> GetConnectionStatusAsyncWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null);
        /// <summary>
        /// Gets the status history for a connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>Task of StatusHistoryEntity</returns>
        System.Threading.Tasks.Task<StatusHistoryEntity> GetConnectionStatusHistoryAsync (string id);

        /// <summary>
        /// Gets the status history for a connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>Task of ApiResponse (StatusHistoryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusHistoryEntity>> GetConnectionStatusHistoryAsyncWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the types of controller services that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">If specified, will only return controller services that are compatible with this type of service. (optional)</param>
        /// <param name="serviceBundleGroup">If serviceType specified, is the bundle group of the serviceType. (optional)</param>
        /// <param name="serviceBundleArtifact">If serviceType specified, is the bundle artifact of the serviceType. (optional)</param>
        /// <param name="serviceBundleVersion">If serviceType specified, is the bundle version of the serviceType. (optional)</param>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="typeFilter">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>Task of ControllerServiceTypesEntity</returns>
        System.Threading.Tasks.Task<ControllerServiceTypesEntity> GetControllerServiceTypesAsync (string serviceType = null, string serviceBundleGroup = null, string serviceBundleArtifact = null, string serviceBundleVersion = null, string bundleGroupFilter = null, string bundleArtifactFilter = null, string typeFilter = null);

        /// <summary>
        /// Retrieves the types of controller services that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">If specified, will only return controller services that are compatible with this type of service. (optional)</param>
        /// <param name="serviceBundleGroup">If serviceType specified, is the bundle group of the serviceType. (optional)</param>
        /// <param name="serviceBundleArtifact">If serviceType specified, is the bundle artifact of the serviceType. (optional)</param>
        /// <param name="serviceBundleVersion">If serviceType specified, is the bundle version of the serviceType. (optional)</param>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="typeFilter">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>Task of ApiResponse (ControllerServiceTypesEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ControllerServiceTypesEntity>> GetControllerServiceTypesAsyncWithHttpInfo (string serviceType = null, string serviceBundleGroup = null, string serviceBundleArtifact = null, string serviceBundleVersion = null, string bundleGroupFilter = null, string bundleArtifactFilter = null, string typeFilter = null);
        /// <summary>
        /// Gets controller services for reporting tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ControllerServicesEntity</returns>
        System.Threading.Tasks.Task<ControllerServicesEntity> GetControllerServicesFromControllerAsync ();

        /// <summary>
        /// Gets controller services for reporting tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ControllerServicesEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ControllerServicesEntity>> GetControllerServicesFromControllerAsyncWithHttpInfo ();
        /// <summary>
        /// Gets all controller services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include parent/ancestory process groups (optional, default to true)</param>
        /// <param name="includeDescendantGroups">Whether or not to include descendant process groups (optional, default to false)</param>
        /// <returns>Task of ControllerServicesEntity</returns>
        System.Threading.Tasks.Task<ControllerServicesEntity> GetControllerServicesFromGroupAsync (string id, bool? includeAncestorGroups = null, bool? includeDescendantGroups = null);

        /// <summary>
        /// Gets all controller services
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include parent/ancestory process groups (optional, default to true)</param>
        /// <param name="includeDescendantGroups">Whether or not to include descendant process groups (optional, default to false)</param>
        /// <returns>Task of ApiResponse (ControllerServicesEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ControllerServicesEntity>> GetControllerServicesFromGroupAsyncWithHttpInfo (string id, bool? includeAncestorGroups = null, bool? includeDescendantGroups = null);
        /// <summary>
        /// Gets the current status of this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ControllerStatusEntity</returns>
        System.Threading.Tasks.Task<ControllerStatusEntity> GetControllerStatusAsync ();

        /// <summary>
        /// Gets the current status of this NiFi
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ControllerStatusEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ControllerStatusEntity>> GetControllerStatusAsyncWithHttpInfo ();
        /// <summary>
        /// Retrieves the user identity of the user making the request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CurrentUserEntity</returns>
        System.Threading.Tasks.Task<CurrentUserEntity> GetCurrentUserAsync ();

        /// <summary>
        /// Retrieves the user identity of the user making the request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CurrentUserEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<CurrentUserEntity>> GetCurrentUserAsyncWithHttpInfo ();
        /// <summary>
        /// Gets a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ProcessGroupFlowEntity</returns>
        System.Threading.Tasks.Task<ProcessGroupFlowEntity> GetFlowAsync (string id);

        /// <summary>
        /// Gets a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (ProcessGroupFlowEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessGroupFlowEntity>> GetFlowAsyncWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the configuration for this NiFi flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of FlowConfigurationEntity</returns>
        System.Threading.Tasks.Task<FlowConfigurationEntity> GetFlowConfigAsync ();

        /// <summary>
        /// Retrieves the configuration for this NiFi flow
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (FlowConfigurationEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowConfigurationEntity>> GetFlowConfigAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the flows from the specified registry and bucket for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <returns>Task of VersionedFlowsEntity</returns>
        System.Threading.Tasks.Task<VersionedFlowsEntity> GetFlowsAsync (string registryId, string bucketId);

        /// <summary>
        /// Gets the flows from the specified registry and bucket for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <returns>Task of ApiResponse (VersionedFlowsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionedFlowsEntity>> GetFlowsAsyncWithHttpInfo (string registryId, string bucketId);
        /// <summary>
        /// Gets status for an input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The input port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of PortStatusEntity</returns>
        System.Threading.Tasks.Task<PortStatusEntity> GetInputPortStatusAsync (string id, bool? nodewise = null, string clusterNodeId = null);

        /// <summary>
        /// Gets status for an input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The input port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ApiResponse (PortStatusEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortStatusEntity>> GetInputPortStatusAsyncWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null);
        /// <summary>
        /// Gets status for an output port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The output port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of PortStatusEntity</returns>
        System.Threading.Tasks.Task<PortStatusEntity> GetOutputPortStatusAsync (string id, bool? nodewise = null, string clusterNodeId = null);

        /// <summary>
        /// Gets status for an output port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The output port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ApiResponse (PortStatusEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortStatusEntity>> GetOutputPortStatusAsyncWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null);
        /// <summary>
        /// Retrieves the types of prioritizers that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PrioritizerTypesEntity</returns>
        System.Threading.Tasks.Task<PrioritizerTypesEntity> GetPrioritizersAsync ();

        /// <summary>
        /// Retrieves the types of prioritizers that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PrioritizerTypesEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrioritizerTypesEntity>> GetPrioritizersAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the status for a process group
        /// </summary>
        /// <remarks>
        /// The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="recursive">Whether all descendant groups and the status of their content will be included. Optional, defaults to false (optional, default to false)</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ProcessGroupStatusEntity</returns>
        System.Threading.Tasks.Task<ProcessGroupStatusEntity> GetProcessGroupStatusAsync (string id, bool? recursive = null, bool? nodewise = null, string clusterNodeId = null);

        /// <summary>
        /// Gets the status for a process group
        /// </summary>
        /// <remarks>
        /// The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="recursive">Whether all descendant groups and the status of their content will be included. Optional, defaults to false (optional, default to false)</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ApiResponse (ProcessGroupStatusEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessGroupStatusEntity>> GetProcessGroupStatusAsyncWithHttpInfo (string id, bool? recursive = null, bool? nodewise = null, string clusterNodeId = null);
        /// <summary>
        /// Gets status history for a remote process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of StatusHistoryEntity</returns>
        System.Threading.Tasks.Task<StatusHistoryEntity> GetProcessGroupStatusHistoryAsync (string id);

        /// <summary>
        /// Gets status history for a remote process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (StatusHistoryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusHistoryEntity>> GetProcessGroupStatusHistoryAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets status for a processor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ProcessorStatusEntity</returns>
        System.Threading.Tasks.Task<ProcessorStatusEntity> GetProcessorStatusAsync (string id, bool? nodewise = null, string clusterNodeId = null);

        /// <summary>
        /// Gets status for a processor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ApiResponse (ProcessorStatusEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessorStatusEntity>> GetProcessorStatusAsyncWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null);
        /// <summary>
        /// Gets status history for a processor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <returns>Task of StatusHistoryEntity</returns>
        System.Threading.Tasks.Task<StatusHistoryEntity> GetProcessorStatusHistoryAsync (string id);

        /// <summary>
        /// Gets status history for a processor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <returns>Task of ApiResponse (StatusHistoryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusHistoryEntity>> GetProcessorStatusHistoryAsyncWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the types of processors that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>Task of ProcessorTypesEntity</returns>
        System.Threading.Tasks.Task<ProcessorTypesEntity> GetProcessorTypesAsync (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null);

        /// <summary>
        /// Retrieves the types of processors that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>Task of ApiResponse (ProcessorTypesEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessorTypesEntity>> GetProcessorTypesAsyncWithHttpInfo (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null);
        /// <summary>
        /// Gets the listing of available registries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RegistryClientsEntity</returns>
        System.Threading.Tasks.Task<RegistryClientsEntity> GetRegistriesAsync ();

        /// <summary>
        /// Gets the listing of available registries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RegistryClientsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistryClientsEntity>> GetRegistriesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets status for a remote process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of RemoteProcessGroupStatusEntity</returns>
        System.Threading.Tasks.Task<RemoteProcessGroupStatusEntity> GetRemoteProcessGroupStatusAsync (string id, bool? nodewise = null, string clusterNodeId = null);

        /// <summary>
        /// Gets status for a remote process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ApiResponse (RemoteProcessGroupStatusEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoteProcessGroupStatusEntity>> GetRemoteProcessGroupStatusAsyncWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null);
        /// <summary>
        /// Gets the status history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <returns>Task of StatusHistoryEntity</returns>
        System.Threading.Tasks.Task<StatusHistoryEntity> GetRemoteProcessGroupStatusHistoryAsync (string id);

        /// <summary>
        /// Gets the status history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <returns>Task of ApiResponse (StatusHistoryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusHistoryEntity>> GetRemoteProcessGroupStatusHistoryAsyncWithHttpInfo (string id);
        /// <summary>
        /// Retrieves the types of reporting tasks that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>Task of ReportingTaskTypesEntity</returns>
        System.Threading.Tasks.Task<ReportingTaskTypesEntity> GetReportingTaskTypesAsync (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null);

        /// <summary>
        /// Retrieves the types of reporting tasks that this NiFi supports
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>Task of ApiResponse (ReportingTaskTypesEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportingTaskTypesEntity>> GetReportingTaskTypesAsyncWithHttpInfo (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null);
        /// <summary>
        /// Gets all reporting tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ReportingTasksEntity</returns>
        System.Threading.Tasks.Task<ReportingTasksEntity> GetReportingTasksAsync ();

        /// <summary>
        /// Gets all reporting tasks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ReportingTasksEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportingTasksEntity>> GetReportingTasksAsyncWithHttpInfo ();
        /// <summary>
        /// Gets all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TemplatesEntity</returns>
        System.Threading.Tasks.Task<TemplatesEntity> GetTemplatesAsync ();

        /// <summary>
        /// Gets all templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TemplatesEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplatesEntity>> GetTemplatesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the flow versions from the specified registry and bucket for the specified flow for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <param name="flowId">The flow id.</param>
        /// <returns>Task of VersionedFlowSnapshotMetadataSetEntity</returns>
        System.Threading.Tasks.Task<VersionedFlowSnapshotMetadataSetEntity> GetVersionsAsync (string registryId, string bucketId, string flowId);

        /// <summary>
        /// Gets the flow versions from the specified registry and bucket for the specified flow for the current user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <param name="flowId">The flow id.</param>
        /// <returns>Task of ApiResponse (VersionedFlowSnapshotMetadataSetEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionedFlowSnapshotMetadataSetEntity>> GetVersionsAsyncWithHttpInfo (string registryId, string bucketId, string flowId);
        /// <summary>
        /// Gets configuration history
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The offset into the result set.</param>
        /// <param name="count">The number of actions to return.</param>
        /// <param name="sortColumn">The field to sort on. (optional)</param>
        /// <param name="sortOrder">The direction to sort. (optional)</param>
        /// <param name="startDate">Include actions after this date. (optional)</param>
        /// <param name="endDate">Include actions before this date. (optional)</param>
        /// <param name="userIdentity">Include actions performed by this user. (optional)</param>
        /// <param name="sourceId">Include actions on this component. (optional)</param>
        /// <returns>Task of HistoryEntity</returns>
        System.Threading.Tasks.Task<HistoryEntity> QueryHistoryAsync (string offset, string count, string sortColumn = null, string sortOrder = null, string startDate = null, string endDate = null, string userIdentity = null, string sourceId = null);

        /// <summary>
        /// Gets configuration history
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The offset into the result set.</param>
        /// <param name="count">The number of actions to return.</param>
        /// <param name="sortColumn">The field to sort on. (optional)</param>
        /// <param name="sortOrder">The direction to sort. (optional)</param>
        /// <param name="startDate">Include actions after this date. (optional)</param>
        /// <param name="endDate">Include actions before this date. (optional)</param>
        /// <param name="userIdentity">Include actions performed by this user. (optional)</param>
        /// <param name="sourceId">Include actions on this component. (optional)</param>
        /// <returns>Task of ApiResponse (HistoryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<HistoryEntity>> QueryHistoryAsyncWithHttpInfo (string offset, string count, string sortColumn = null, string sortOrder = null, string startDate = null, string endDate = null, string userIdentity = null, string sourceId = null);
        /// <summary>
        /// Schedule or unschedule components in the specified Process Group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>Task of ScheduleComponentsEntity</returns>
        System.Threading.Tasks.Task<ScheduleComponentsEntity> ScheduleComponentsAsync (string id, ScheduleComponentsEntity body);

        /// <summary>
        /// Schedule or unschedule components in the specified Process Group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>Task of ApiResponse (ScheduleComponentsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduleComponentsEntity>> ScheduleComponentsAsyncWithHttpInfo (string id, ScheduleComponentsEntity body);
        /// <summary>
        /// Searches the cluster for a node with the specified address
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Node address to search for.</param>
        /// <returns>Task of ClusterSearchResultsEntity</returns>
        System.Threading.Tasks.Task<ClusterSearchResultsEntity> SearchClusterAsync (string q);

        /// <summary>
        /// Searches the cluster for a node with the specified address
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Node address to search for.</param>
        /// <returns>Task of ApiResponse (ClusterSearchResultsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClusterSearchResultsEntity>> SearchClusterAsyncWithHttpInfo (string q);
        /// <summary>
        /// Performs a search against this NiFi using the specified search term
        /// </summary>
        /// <remarks>
        /// Only search results from authorized components will be returned.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <returns>Task of SearchResultsEntity</returns>
        System.Threading.Tasks.Task<SearchResultsEntity> SearchFlowAsync (string q = null);

        /// <summary>
        /// Performs a search against this NiFi using the specified search term
        /// </summary>
        /// <remarks>
        /// Only search results from authorized components will be returned.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchResultsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResultsEntity>> SearchFlowAsyncWithHttpInfo (string q = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FlowApi : IFlowApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FlowApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FlowApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FlowApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FlowApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this._exceptionFactory != null && this._exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return this._exceptionFactory;
            }
            set { this._exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Enable or disable Controller Services in the specified Process Group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>ActivateControllerServicesEntity</returns>
        public ActivateControllerServicesEntity ActivateControllerServices (string id, ActivateControllerServicesEntity body)
        {
             ApiResponse<ActivateControllerServicesEntity> localVarResponse = this.ActivateControllerServicesWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enable or disable Controller Services in the specified Process Group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>ApiResponse of ActivateControllerServicesEntity</returns>
        public ApiResponse< ActivateControllerServicesEntity > ActivateControllerServicesWithHttpInfo (string id, ActivateControllerServicesEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->ActivateControllerServices");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlowApi->ActivateControllerServices");

            var localVarPath = "/flow/process-groups/{id}/controller-services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ActivateControllerServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActivateControllerServicesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ActivateControllerServicesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivateControllerServicesEntity)));
        }

        /// <summary>
        /// Enable or disable Controller Services in the specified Process Group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>Task of ActivateControllerServicesEntity</returns>
        public async System.Threading.Tasks.Task<ActivateControllerServicesEntity> ActivateControllerServicesAsync (string id, ActivateControllerServicesEntity body)
        {
             ApiResponse<ActivateControllerServicesEntity> localVarResponse = await this.ActivateControllerServicesAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enable or disable Controller Services in the specified Process Group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>Task of ApiResponse (ActivateControllerServicesEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActivateControllerServicesEntity>> ActivateControllerServicesAsyncWithHttpInfo (string id, ActivateControllerServicesEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->ActivateControllerServices");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlowApi->ActivateControllerServices");

            var localVarPath = "/flow/process-groups/{id}/controller-services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ActivateControllerServices", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActivateControllerServicesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ActivateControllerServicesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivateControllerServicesEntity)));
        }

        /// <summary>
        /// Generates a client id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string GenerateClientId ()
        {
             ApiResponse<string> localVarResponse = this.GenerateClientIdWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a client id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GenerateClientIdWithHttpInfo ()
        {

            var localVarPath = "/flow/client-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GenerateClientId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Generates a client id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GenerateClientIdAsync ()
        {
             ApiResponse<string> localVarResponse = await this.GenerateClientIdAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generates a client id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GenerateClientIdAsyncWithHttpInfo ()
        {

            var localVarPath = "/flow/client-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GenerateClientId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Retrieves details about this NiFi to put in the About dialog 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>AboutEntity</returns>
        public AboutEntity GetAboutInfo ()
        {
             ApiResponse<AboutEntity> localVarResponse = this.GetAboutInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves details about this NiFi to put in the About dialog 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AboutEntity</returns>
        public ApiResponse< AboutEntity > GetAboutInfoWithHttpInfo ()
        {

            var localVarPath = "/flow/about";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAboutInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AboutEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AboutEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AboutEntity)));
        }

        /// <summary>
        /// Retrieves details about this NiFi to put in the About dialog 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AboutEntity</returns>
        public async System.Threading.Tasks.Task<AboutEntity> GetAboutInfoAsync ()
        {
             ApiResponse<AboutEntity> localVarResponse = await this.GetAboutInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves details about this NiFi to put in the About dialog 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AboutEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AboutEntity>> GetAboutInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "/flow/about";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAboutInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AboutEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AboutEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AboutEntity)));
        }

        /// <summary>
        /// Gets an action Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The action id.</param>
        /// <returns>ActionEntity</returns>
        public ActionEntity GetAction (string id)
        {
             ApiResponse<ActionEntity> localVarResponse = this.GetActionWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets an action Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The action id.</param>
        /// <returns>ApiResponse of ActionEntity</returns>
        public ApiResponse< ActionEntity > GetActionWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetAction");

            var localVarPath = "/flow/history/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ActionEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionEntity)));
        }

        /// <summary>
        /// Gets an action Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The action id.</param>
        /// <returns>Task of ActionEntity</returns>
        public async System.Threading.Tasks.Task<ActionEntity> GetActionAsync (string id)
        {
             ApiResponse<ActionEntity> localVarResponse = await this.GetActionAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets an action Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The action id.</param>
        /// <returns>Task of ApiResponse (ActionEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActionEntity>> GetActionAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetAction");

            var localVarPath = "/flow/history/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActionEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ActionEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActionEntity)));
        }

        /// <summary>
        /// Retrieves the banners for this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>BannerEntity</returns>
        public BannerEntity GetBanners ()
        {
             ApiResponse<BannerEntity> localVarResponse = this.GetBannersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the banners for this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BannerEntity</returns>
        public ApiResponse< BannerEntity > GetBannersWithHttpInfo ()
        {

            var localVarPath = "/flow/banners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBanners", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BannerEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BannerEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BannerEntity)));
        }

        /// <summary>
        /// Retrieves the banners for this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BannerEntity</returns>
        public async System.Threading.Tasks.Task<BannerEntity> GetBannersAsync ()
        {
             ApiResponse<BannerEntity> localVarResponse = await this.GetBannersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the banners for this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BannerEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BannerEntity>> GetBannersAsyncWithHttpInfo ()
        {

            var localVarPath = "/flow/banners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBanners", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BannerEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BannerEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BannerEntity)));
        }

        /// <summary>
        /// Gets the buckets from the specified registry for the current user 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>BucketsEntity</returns>
        public BucketsEntity GetBuckets (string id)
        {
             ApiResponse<BucketsEntity> localVarResponse = this.GetBucketsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the buckets from the specified registry for the current user 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>ApiResponse of BucketsEntity</returns>
        public ApiResponse< BucketsEntity > GetBucketsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetBuckets");

            var localVarPath = "/flow/registries/{id}/buckets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBuckets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BucketsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BucketsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BucketsEntity)));
        }

        /// <summary>
        /// Gets the buckets from the specified registry for the current user 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>Task of BucketsEntity</returns>
        public async System.Threading.Tasks.Task<BucketsEntity> GetBucketsAsync (string id)
        {
             ApiResponse<BucketsEntity> localVarResponse = await this.GetBucketsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the buckets from the specified registry for the current user 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The registry id.</param>
        /// <returns>Task of ApiResponse (BucketsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BucketsEntity>> GetBucketsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetBuckets");

            var localVarPath = "/flow/registries/{id}/buckets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBuckets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BucketsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BucketsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BucketsEntity)));
        }

        /// <summary>
        /// Gets current bulletins 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Includes bulletins with an id after this value. (optional)</param>
        /// <param name="sourceName">Includes bulletins originating from this sources whose name match this regular expression. (optional)</param>
        /// <param name="message">Includes bulletins whose message that match this regular expression. (optional)</param>
        /// <param name="sourceId">Includes bulletins originating from this sources whose id match this regular expression. (optional)</param>
        /// <param name="groupId">Includes bulletins originating from this sources whose group id match this regular expression. (optional)</param>
        /// <param name="limit">The number of bulletins to limit the response to. (optional)</param>
        /// <returns>BulletinBoardEntity</returns>
        public BulletinBoardEntity GetBulletinBoard (string after = null, string sourceName = null, string message = null, string sourceId = null, string groupId = null, string limit = null)
        {
             ApiResponse<BulletinBoardEntity> localVarResponse = this.GetBulletinBoardWithHttpInfo(after, sourceName, message, sourceId, groupId, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets current bulletins 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Includes bulletins with an id after this value. (optional)</param>
        /// <param name="sourceName">Includes bulletins originating from this sources whose name match this regular expression. (optional)</param>
        /// <param name="message">Includes bulletins whose message that match this regular expression. (optional)</param>
        /// <param name="sourceId">Includes bulletins originating from this sources whose id match this regular expression. (optional)</param>
        /// <param name="groupId">Includes bulletins originating from this sources whose group id match this regular expression. (optional)</param>
        /// <param name="limit">The number of bulletins to limit the response to. (optional)</param>
        /// <returns>ApiResponse of BulletinBoardEntity</returns>
        public ApiResponse< BulletinBoardEntity > GetBulletinBoardWithHttpInfo (string after = null, string sourceName = null, string message = null, string sourceId = null, string groupId = null, string limit = null)
        {

            var localVarPath = "/flow/bulletin-board";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (sourceName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceName", sourceName)); // query parameter
            if (message != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message", message)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceId", sourceId)); // query parameter
            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupId", groupId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBulletinBoard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulletinBoardEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulletinBoardEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulletinBoardEntity)));
        }

        /// <summary>
        /// Gets current bulletins 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Includes bulletins with an id after this value. (optional)</param>
        /// <param name="sourceName">Includes bulletins originating from this sources whose name match this regular expression. (optional)</param>
        /// <param name="message">Includes bulletins whose message that match this regular expression. (optional)</param>
        /// <param name="sourceId">Includes bulletins originating from this sources whose id match this regular expression. (optional)</param>
        /// <param name="groupId">Includes bulletins originating from this sources whose group id match this regular expression. (optional)</param>
        /// <param name="limit">The number of bulletins to limit the response to. (optional)</param>
        /// <returns>Task of BulletinBoardEntity</returns>
        public async System.Threading.Tasks.Task<BulletinBoardEntity> GetBulletinBoardAsync (string after = null, string sourceName = null, string message = null, string sourceId = null, string groupId = null, string limit = null)
        {
             ApiResponse<BulletinBoardEntity> localVarResponse = await this.GetBulletinBoardAsyncWithHttpInfo(after, sourceName, message, sourceId, groupId, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets current bulletins 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Includes bulletins with an id after this value. (optional)</param>
        /// <param name="sourceName">Includes bulletins originating from this sources whose name match this regular expression. (optional)</param>
        /// <param name="message">Includes bulletins whose message that match this regular expression. (optional)</param>
        /// <param name="sourceId">Includes bulletins originating from this sources whose id match this regular expression. (optional)</param>
        /// <param name="groupId">Includes bulletins originating from this sources whose group id match this regular expression. (optional)</param>
        /// <param name="limit">The number of bulletins to limit the response to. (optional)</param>
        /// <returns>Task of ApiResponse (BulletinBoardEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BulletinBoardEntity>> GetBulletinBoardAsyncWithHttpInfo (string after = null, string sourceName = null, string message = null, string sourceId = null, string groupId = null, string limit = null)
        {

            var localVarPath = "/flow/bulletin-board";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (sourceName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceName", sourceName)); // query parameter
            if (message != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message", message)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceId", sourceId)); // query parameter
            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupId", groupId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBulletinBoard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BulletinBoardEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BulletinBoardEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BulletinBoardEntity)));
        }

        /// <summary>
        /// Retrieves Controller level bulletins 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ControllerBulletinsEntity</returns>
        public ControllerBulletinsEntity GetBulletins ()
        {
             ApiResponse<ControllerBulletinsEntity> localVarResponse = this.GetBulletinsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves Controller level bulletins 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ControllerBulletinsEntity</returns>
        public ApiResponse< ControllerBulletinsEntity > GetBulletinsWithHttpInfo ()
        {

            var localVarPath = "/flow/controller/bulletins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBulletins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerBulletinsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerBulletinsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerBulletinsEntity)));
        }

        /// <summary>
        /// Retrieves Controller level bulletins 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ControllerBulletinsEntity</returns>
        public async System.Threading.Tasks.Task<ControllerBulletinsEntity> GetBulletinsAsync ()
        {
             ApiResponse<ControllerBulletinsEntity> localVarResponse = await this.GetBulletinsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves Controller level bulletins 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ControllerBulletinsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ControllerBulletinsEntity>> GetBulletinsAsyncWithHttpInfo ()
        {

            var localVarPath = "/flow/controller/bulletins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetBulletins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerBulletinsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerBulletinsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerBulletinsEntity)));
        }

        /// <summary>
        /// The cluster summary for this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ClusteSummaryEntity</returns>
        public ClusteSummaryEntity GetClusterSummary ()
        {
             ApiResponse<ClusteSummaryEntity> localVarResponse = this.GetClusterSummaryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// The cluster summary for this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ClusteSummaryEntity</returns>
        public ApiResponse< ClusteSummaryEntity > GetClusterSummaryWithHttpInfo ()
        {

            var localVarPath = "/flow/cluster/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetClusterSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClusteSummaryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClusteSummaryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClusteSummaryEntity)));
        }

        /// <summary>
        /// The cluster summary for this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ClusteSummaryEntity</returns>
        public async System.Threading.Tasks.Task<ClusteSummaryEntity> GetClusterSummaryAsync ()
        {
             ApiResponse<ClusteSummaryEntity> localVarResponse = await this.GetClusterSummaryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// The cluster summary for this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ClusteSummaryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClusteSummaryEntity>> GetClusterSummaryAsyncWithHttpInfo ()
        {

            var localVarPath = "/flow/cluster/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetClusterSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClusteSummaryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClusteSummaryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClusteSummaryEntity)));
        }

        /// <summary>
        /// Gets configuration history for a component Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="componentId">The component id.</param>
        /// <returns>ComponentHistoryEntity</returns>
        public ComponentHistoryEntity GetComponentHistory (string componentId)
        {
             ApiResponse<ComponentHistoryEntity> localVarResponse = this.GetComponentHistoryWithHttpInfo(componentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets configuration history for a component Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="componentId">The component id.</param>
        /// <returns>ApiResponse of ComponentHistoryEntity</returns>
        public ApiResponse< ComponentHistoryEntity > GetComponentHistoryWithHttpInfo (string componentId)
        {
            // verify the required parameter 'componentId' is set
            if (componentId == null)
                throw new ApiException(400, "Missing required parameter 'componentId' when calling FlowApi->GetComponentHistory");

            var localVarPath = "/flow/history/components/{componentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (componentId != null) localVarPathParams.Add("componentId", this.Configuration.ApiClient.ParameterToString(componentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetComponentHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComponentHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComponentHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComponentHistoryEntity)));
        }

        /// <summary>
        /// Gets configuration history for a component Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="componentId">The component id.</param>
        /// <returns>Task of ComponentHistoryEntity</returns>
        public async System.Threading.Tasks.Task<ComponentHistoryEntity> GetComponentHistoryAsync (string componentId)
        {
             ApiResponse<ComponentHistoryEntity> localVarResponse = await this.GetComponentHistoryAsyncWithHttpInfo(componentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets configuration history for a component Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="componentId">The component id.</param>
        /// <returns>Task of ApiResponse (ComponentHistoryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ComponentHistoryEntity>> GetComponentHistoryAsyncWithHttpInfo (string componentId)
        {
            // verify the required parameter 'componentId' is set
            if (componentId == null)
                throw new ApiException(400, "Missing required parameter 'componentId' when calling FlowApi->GetComponentHistory");

            var localVarPath = "/flow/history/components/{componentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (componentId != null) localVarPathParams.Add("componentId", this.Configuration.ApiClient.ParameterToString(componentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetComponentHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ComponentHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ComponentHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ComponentHistoryEntity)));
        }

        /// <summary>
        /// Gets status for a connection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ConnectionStatusEntity</returns>
        public ConnectionStatusEntity GetConnectionStatus (string id, bool? nodewise = null, string clusterNodeId = null)
        {
             ApiResponse<ConnectionStatusEntity> localVarResponse = this.GetConnectionStatusWithHttpInfo(id, nodewise, clusterNodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets status for a connection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ApiResponse of ConnectionStatusEntity</returns>
        public ApiResponse< ConnectionStatusEntity > GetConnectionStatusWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetConnectionStatus");

            var localVarPath = "/flow/connections/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nodewise != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodewise", nodewise)); // query parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetConnectionStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectionStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectionStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectionStatusEntity)));
        }

        /// <summary>
        /// Gets status for a connection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ConnectionStatusEntity</returns>
        public async System.Threading.Tasks.Task<ConnectionStatusEntity> GetConnectionStatusAsync (string id, bool? nodewise = null, string clusterNodeId = null)
        {
             ApiResponse<ConnectionStatusEntity> localVarResponse = await this.GetConnectionStatusAsyncWithHttpInfo(id, nodewise, clusterNodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets status for a connection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ApiResponse (ConnectionStatusEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectionStatusEntity>> GetConnectionStatusAsyncWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetConnectionStatus");

            var localVarPath = "/flow/connections/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nodewise != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodewise", nodewise)); // query parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetConnectionStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectionStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectionStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectionStatusEntity)));
        }

        /// <summary>
        /// Gets the status history for a connection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>StatusHistoryEntity</returns>
        public StatusHistoryEntity GetConnectionStatusHistory (string id)
        {
             ApiResponse<StatusHistoryEntity> localVarResponse = this.GetConnectionStatusHistoryWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the status history for a connection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>ApiResponse of StatusHistoryEntity</returns>
        public ApiResponse< StatusHistoryEntity > GetConnectionStatusHistoryWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetConnectionStatusHistory");

            var localVarPath = "/flow/connections/{id}/status/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetConnectionStatusHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusHistoryEntity)));
        }

        /// <summary>
        /// Gets the status history for a connection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>Task of StatusHistoryEntity</returns>
        public async System.Threading.Tasks.Task<StatusHistoryEntity> GetConnectionStatusHistoryAsync (string id)
        {
             ApiResponse<StatusHistoryEntity> localVarResponse = await this.GetConnectionStatusHistoryAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the status history for a connection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The connection id.</param>
        /// <returns>Task of ApiResponse (StatusHistoryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusHistoryEntity>> GetConnectionStatusHistoryAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetConnectionStatusHistory");

            var localVarPath = "/flow/connections/{id}/status/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetConnectionStatusHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusHistoryEntity)));
        }

        /// <summary>
        /// Retrieves the types of controller services that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">If specified, will only return controller services that are compatible with this type of service. (optional)</param>
        /// <param name="serviceBundleGroup">If serviceType specified, is the bundle group of the serviceType. (optional)</param>
        /// <param name="serviceBundleArtifact">If serviceType specified, is the bundle artifact of the serviceType. (optional)</param>
        /// <param name="serviceBundleVersion">If serviceType specified, is the bundle version of the serviceType. (optional)</param>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="typeFilter">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>ControllerServiceTypesEntity</returns>
        public ControllerServiceTypesEntity GetControllerServiceTypes (string serviceType = null, string serviceBundleGroup = null, string serviceBundleArtifact = null, string serviceBundleVersion = null, string bundleGroupFilter = null, string bundleArtifactFilter = null, string typeFilter = null)
        {
             ApiResponse<ControllerServiceTypesEntity> localVarResponse = this.GetControllerServiceTypesWithHttpInfo(serviceType, serviceBundleGroup, serviceBundleArtifact, serviceBundleVersion, bundleGroupFilter, bundleArtifactFilter, typeFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the types of controller services that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">If specified, will only return controller services that are compatible with this type of service. (optional)</param>
        /// <param name="serviceBundleGroup">If serviceType specified, is the bundle group of the serviceType. (optional)</param>
        /// <param name="serviceBundleArtifact">If serviceType specified, is the bundle artifact of the serviceType. (optional)</param>
        /// <param name="serviceBundleVersion">If serviceType specified, is the bundle version of the serviceType. (optional)</param>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="typeFilter">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>ApiResponse of ControllerServiceTypesEntity</returns>
        public ApiResponse< ControllerServiceTypesEntity > GetControllerServiceTypesWithHttpInfo (string serviceType = null, string serviceBundleGroup = null, string serviceBundleArtifact = null, string serviceBundleVersion = null, string bundleGroupFilter = null, string bundleArtifactFilter = null, string typeFilter = null)
        {

            var localVarPath = "/flow/controller-service-types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceType", serviceType)); // query parameter
            if (serviceBundleGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceBundleGroup", serviceBundleGroup)); // query parameter
            if (serviceBundleArtifact != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceBundleArtifact", serviceBundleArtifact)); // query parameter
            if (serviceBundleVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceBundleVersion", serviceBundleVersion)); // query parameter
            if (bundleGroupFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bundleGroupFilter", bundleGroupFilter)); // query parameter
            if (bundleArtifactFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bundleArtifactFilter", bundleArtifactFilter)); // query parameter
            if (typeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "typeFilter", typeFilter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetControllerServiceTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceTypesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceTypesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceTypesEntity)));
        }

        /// <summary>
        /// Retrieves the types of controller services that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">If specified, will only return controller services that are compatible with this type of service. (optional)</param>
        /// <param name="serviceBundleGroup">If serviceType specified, is the bundle group of the serviceType. (optional)</param>
        /// <param name="serviceBundleArtifact">If serviceType specified, is the bundle artifact of the serviceType. (optional)</param>
        /// <param name="serviceBundleVersion">If serviceType specified, is the bundle version of the serviceType. (optional)</param>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="typeFilter">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>Task of ControllerServiceTypesEntity</returns>
        public async System.Threading.Tasks.Task<ControllerServiceTypesEntity> GetControllerServiceTypesAsync (string serviceType = null, string serviceBundleGroup = null, string serviceBundleArtifact = null, string serviceBundleVersion = null, string bundleGroupFilter = null, string bundleArtifactFilter = null, string typeFilter = null)
        {
             ApiResponse<ControllerServiceTypesEntity> localVarResponse = await this.GetControllerServiceTypesAsyncWithHttpInfo(serviceType, serviceBundleGroup, serviceBundleArtifact, serviceBundleVersion, bundleGroupFilter, bundleArtifactFilter, typeFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the types of controller services that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceType">If specified, will only return controller services that are compatible with this type of service. (optional)</param>
        /// <param name="serviceBundleGroup">If serviceType specified, is the bundle group of the serviceType. (optional)</param>
        /// <param name="serviceBundleArtifact">If serviceType specified, is the bundle artifact of the serviceType. (optional)</param>
        /// <param name="serviceBundleVersion">If serviceType specified, is the bundle version of the serviceType. (optional)</param>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="typeFilter">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>Task of ApiResponse (ControllerServiceTypesEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ControllerServiceTypesEntity>> GetControllerServiceTypesAsyncWithHttpInfo (string serviceType = null, string serviceBundleGroup = null, string serviceBundleArtifact = null, string serviceBundleVersion = null, string bundleGroupFilter = null, string bundleArtifactFilter = null, string typeFilter = null)
        {

            var localVarPath = "/flow/controller-service-types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceType", serviceType)); // query parameter
            if (serviceBundleGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceBundleGroup", serviceBundleGroup)); // query parameter
            if (serviceBundleArtifact != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceBundleArtifact", serviceBundleArtifact)); // query parameter
            if (serviceBundleVersion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceBundleVersion", serviceBundleVersion)); // query parameter
            if (bundleGroupFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bundleGroupFilter", bundleGroupFilter)); // query parameter
            if (bundleArtifactFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bundleArtifactFilter", bundleArtifactFilter)); // query parameter
            if (typeFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "typeFilter", typeFilter)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetControllerServiceTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceTypesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceTypesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceTypesEntity)));
        }

        /// <summary>
        /// Gets controller services for reporting tasks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ControllerServicesEntity</returns>
        public ControllerServicesEntity GetControllerServicesFromController ()
        {
             ApiResponse<ControllerServicesEntity> localVarResponse = this.GetControllerServicesFromControllerWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets controller services for reporting tasks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ControllerServicesEntity</returns>
        public ApiResponse< ControllerServicesEntity > GetControllerServicesFromControllerWithHttpInfo ()
        {

            var localVarPath = "/flow/controller/controller-services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetControllerServicesFromController", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServicesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServicesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServicesEntity)));
        }

        /// <summary>
        /// Gets controller services for reporting tasks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ControllerServicesEntity</returns>
        public async System.Threading.Tasks.Task<ControllerServicesEntity> GetControllerServicesFromControllerAsync ()
        {
             ApiResponse<ControllerServicesEntity> localVarResponse = await this.GetControllerServicesFromControllerAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets controller services for reporting tasks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ControllerServicesEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ControllerServicesEntity>> GetControllerServicesFromControllerAsyncWithHttpInfo ()
        {

            var localVarPath = "/flow/controller/controller-services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetControllerServicesFromController", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServicesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServicesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServicesEntity)));
        }

        /// <summary>
        /// Gets all controller services 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include parent/ancestory process groups (optional, default to true)</param>
        /// <param name="includeDescendantGroups">Whether or not to include descendant process groups (optional, default to false)</param>
        /// <returns>ControllerServicesEntity</returns>
        public ControllerServicesEntity GetControllerServicesFromGroup (string id, bool? includeAncestorGroups = null, bool? includeDescendantGroups = null)
        {
             ApiResponse<ControllerServicesEntity> localVarResponse = this.GetControllerServicesFromGroupWithHttpInfo(id, includeAncestorGroups, includeDescendantGroups);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all controller services 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include parent/ancestory process groups (optional, default to true)</param>
        /// <param name="includeDescendantGroups">Whether or not to include descendant process groups (optional, default to false)</param>
        /// <returns>ApiResponse of ControllerServicesEntity</returns>
        public ApiResponse< ControllerServicesEntity > GetControllerServicesFromGroupWithHttpInfo (string id, bool? includeAncestorGroups = null, bool? includeDescendantGroups = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetControllerServicesFromGroup");

            var localVarPath = "/flow/process-groups/{id}/controller-services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeAncestorGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAncestorGroups", includeAncestorGroups)); // query parameter
            if (includeDescendantGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDescendantGroups", includeDescendantGroups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetControllerServicesFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServicesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServicesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServicesEntity)));
        }

        /// <summary>
        /// Gets all controller services 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include parent/ancestory process groups (optional, default to true)</param>
        /// <param name="includeDescendantGroups">Whether or not to include descendant process groups (optional, default to false)</param>
        /// <returns>Task of ControllerServicesEntity</returns>
        public async System.Threading.Tasks.Task<ControllerServicesEntity> GetControllerServicesFromGroupAsync (string id, bool? includeAncestorGroups = null, bool? includeDescendantGroups = null)
        {
             ApiResponse<ControllerServicesEntity> localVarResponse = await this.GetControllerServicesFromGroupAsyncWithHttpInfo(id, includeAncestorGroups, includeDescendantGroups);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all controller services 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include parent/ancestory process groups (optional, default to true)</param>
        /// <param name="includeDescendantGroups">Whether or not to include descendant process groups (optional, default to false)</param>
        /// <returns>Task of ApiResponse (ControllerServicesEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ControllerServicesEntity>> GetControllerServicesFromGroupAsyncWithHttpInfo (string id, bool? includeAncestorGroups = null, bool? includeDescendantGroups = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetControllerServicesFromGroup");

            var localVarPath = "/flow/process-groups/{id}/controller-services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeAncestorGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAncestorGroups", includeAncestorGroups)); // query parameter
            if (includeDescendantGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDescendantGroups", includeDescendantGroups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetControllerServicesFromGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServicesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServicesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServicesEntity)));
        }

        /// <summary>
        /// Gets the current status of this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ControllerStatusEntity</returns>
        public ControllerStatusEntity GetControllerStatus ()
        {
             ApiResponse<ControllerStatusEntity> localVarResponse = this.GetControllerStatusWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the current status of this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ControllerStatusEntity</returns>
        public ApiResponse< ControllerStatusEntity > GetControllerStatusWithHttpInfo ()
        {

            var localVarPath = "/flow/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetControllerStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerStatusEntity)));
        }

        /// <summary>
        /// Gets the current status of this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ControllerStatusEntity</returns>
        public async System.Threading.Tasks.Task<ControllerStatusEntity> GetControllerStatusAsync ()
        {
             ApiResponse<ControllerStatusEntity> localVarResponse = await this.GetControllerStatusAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the current status of this NiFi 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ControllerStatusEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ControllerStatusEntity>> GetControllerStatusAsyncWithHttpInfo ()
        {

            var localVarPath = "/flow/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetControllerStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerStatusEntity)));
        }

        /// <summary>
        /// Retrieves the user identity of the user making the request 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>CurrentUserEntity</returns>
        public CurrentUserEntity GetCurrentUser ()
        {
             ApiResponse<CurrentUserEntity> localVarResponse = this.GetCurrentUserWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the user identity of the user making the request 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CurrentUserEntity</returns>
        public ApiResponse< CurrentUserEntity > GetCurrentUserWithHttpInfo ()
        {

            var localVarPath = "/flow/current-user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CurrentUserEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CurrentUserEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CurrentUserEntity)));
        }

        /// <summary>
        /// Retrieves the user identity of the user making the request 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CurrentUserEntity</returns>
        public async System.Threading.Tasks.Task<CurrentUserEntity> GetCurrentUserAsync ()
        {
             ApiResponse<CurrentUserEntity> localVarResponse = await this.GetCurrentUserAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the user identity of the user making the request 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CurrentUserEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CurrentUserEntity>> GetCurrentUserAsyncWithHttpInfo ()
        {

            var localVarPath = "/flow/current-user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetCurrentUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CurrentUserEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CurrentUserEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CurrentUserEntity)));
        }

        /// <summary>
        /// Gets a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ProcessGroupFlowEntity</returns>
        public ProcessGroupFlowEntity GetFlow (string id)
        {
             ApiResponse<ProcessGroupFlowEntity> localVarResponse = this.GetFlowWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of ProcessGroupFlowEntity</returns>
        public ApiResponse< ProcessGroupFlowEntity > GetFlowWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetFlow");

            var localVarPath = "/flow/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessGroupFlowEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessGroupFlowEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessGroupFlowEntity)));
        }

        /// <summary>
        /// Gets a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ProcessGroupFlowEntity</returns>
        public async System.Threading.Tasks.Task<ProcessGroupFlowEntity> GetFlowAsync (string id)
        {
             ApiResponse<ProcessGroupFlowEntity> localVarResponse = await this.GetFlowAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (ProcessGroupFlowEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessGroupFlowEntity>> GetFlowAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetFlow");

            var localVarPath = "/flow/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessGroupFlowEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessGroupFlowEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessGroupFlowEntity)));
        }

        /// <summary>
        /// Retrieves the configuration for this NiFi flow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>FlowConfigurationEntity</returns>
        public FlowConfigurationEntity GetFlowConfig ()
        {
             ApiResponse<FlowConfigurationEntity> localVarResponse = this.GetFlowConfigWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the configuration for this NiFi flow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of FlowConfigurationEntity</returns>
        public ApiResponse< FlowConfigurationEntity > GetFlowConfigWithHttpInfo ()
        {

            var localVarPath = "/flow/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFlowConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowConfigurationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowConfigurationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowConfigurationEntity)));
        }

        /// <summary>
        /// Retrieves the configuration for this NiFi flow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of FlowConfigurationEntity</returns>
        public async System.Threading.Tasks.Task<FlowConfigurationEntity> GetFlowConfigAsync ()
        {
             ApiResponse<FlowConfigurationEntity> localVarResponse = await this.GetFlowConfigAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the configuration for this NiFi flow 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (FlowConfigurationEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowConfigurationEntity>> GetFlowConfigAsyncWithHttpInfo ()
        {

            var localVarPath = "/flow/config";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFlowConfig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowConfigurationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowConfigurationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowConfigurationEntity)));
        }

        /// <summary>
        /// Gets the flows from the specified registry and bucket for the current user 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <returns>VersionedFlowsEntity</returns>
        public VersionedFlowsEntity GetFlows (string registryId, string bucketId)
        {
             ApiResponse<VersionedFlowsEntity> localVarResponse = this.GetFlowsWithHttpInfo(registryId, bucketId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the flows from the specified registry and bucket for the current user 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <returns>ApiResponse of VersionedFlowsEntity</returns>
        public ApiResponse< VersionedFlowsEntity > GetFlowsWithHttpInfo (string registryId, string bucketId)
        {
            // verify the required parameter 'registryId' is set
            if (registryId == null)
                throw new ApiException(400, "Missing required parameter 'registryId' when calling FlowApi->GetFlows");
            // verify the required parameter 'bucketId' is set
            if (bucketId == null)
                throw new ApiException(400, "Missing required parameter 'bucketId' when calling FlowApi->GetFlows");

            var localVarPath = "/flow/registries/{registry-id}/buckets/{bucket-id}/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registryId != null) localVarPathParams.Add("registry-id", this.Configuration.ApiClient.ParameterToString(registryId)); // path parameter
            if (bucketId != null) localVarPathParams.Add("bucket-id", this.Configuration.ApiClient.ParameterToString(bucketId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFlows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowsEntity)));
        }

        /// <summary>
        /// Gets the flows from the specified registry and bucket for the current user 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <returns>Task of VersionedFlowsEntity</returns>
        public async System.Threading.Tasks.Task<VersionedFlowsEntity> GetFlowsAsync (string registryId, string bucketId)
        {
             ApiResponse<VersionedFlowsEntity> localVarResponse = await this.GetFlowsAsyncWithHttpInfo(registryId, bucketId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the flows from the specified registry and bucket for the current user 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <returns>Task of ApiResponse (VersionedFlowsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VersionedFlowsEntity>> GetFlowsAsyncWithHttpInfo (string registryId, string bucketId)
        {
            // verify the required parameter 'registryId' is set
            if (registryId == null)
                throw new ApiException(400, "Missing required parameter 'registryId' when calling FlowApi->GetFlows");
            // verify the required parameter 'bucketId' is set
            if (bucketId == null)
                throw new ApiException(400, "Missing required parameter 'bucketId' when calling FlowApi->GetFlows");

            var localVarPath = "/flow/registries/{registry-id}/buckets/{bucket-id}/flows";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registryId != null) localVarPathParams.Add("registry-id", this.Configuration.ApiClient.ParameterToString(registryId)); // path parameter
            if (bucketId != null) localVarPathParams.Add("bucket-id", this.Configuration.ApiClient.ParameterToString(bucketId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFlows", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowsEntity)));
        }

        /// <summary>
        /// Gets status for an input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The input port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>PortStatusEntity</returns>
        public PortStatusEntity GetInputPortStatus (string id, bool? nodewise = null, string clusterNodeId = null)
        {
             ApiResponse<PortStatusEntity> localVarResponse = this.GetInputPortStatusWithHttpInfo(id, nodewise, clusterNodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets status for an input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The input port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ApiResponse of PortStatusEntity</returns>
        public ApiResponse< PortStatusEntity > GetInputPortStatusWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetInputPortStatus");

            var localVarPath = "/flow/input-ports/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nodewise != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodewise", nodewise)); // query parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInputPortStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortStatusEntity)));
        }

        /// <summary>
        /// Gets status for an input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The input port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of PortStatusEntity</returns>
        public async System.Threading.Tasks.Task<PortStatusEntity> GetInputPortStatusAsync (string id, bool? nodewise = null, string clusterNodeId = null)
        {
             ApiResponse<PortStatusEntity> localVarResponse = await this.GetInputPortStatusAsyncWithHttpInfo(id, nodewise, clusterNodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets status for an input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The input port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ApiResponse (PortStatusEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortStatusEntity>> GetInputPortStatusAsyncWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetInputPortStatus");

            var localVarPath = "/flow/input-ports/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nodewise != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodewise", nodewise)); // query parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInputPortStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortStatusEntity)));
        }

        /// <summary>
        /// Gets status for an output port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The output port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>PortStatusEntity</returns>
        public PortStatusEntity GetOutputPortStatus (string id, bool? nodewise = null, string clusterNodeId = null)
        {
             ApiResponse<PortStatusEntity> localVarResponse = this.GetOutputPortStatusWithHttpInfo(id, nodewise, clusterNodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets status for an output port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The output port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ApiResponse of PortStatusEntity</returns>
        public ApiResponse< PortStatusEntity > GetOutputPortStatusWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetOutputPortStatus");

            var localVarPath = "/flow/output-ports/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nodewise != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodewise", nodewise)); // query parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOutputPortStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortStatusEntity)));
        }

        /// <summary>
        /// Gets status for an output port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The output port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of PortStatusEntity</returns>
        public async System.Threading.Tasks.Task<PortStatusEntity> GetOutputPortStatusAsync (string id, bool? nodewise = null, string clusterNodeId = null)
        {
             ApiResponse<PortStatusEntity> localVarResponse = await this.GetOutputPortStatusAsyncWithHttpInfo(id, nodewise, clusterNodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets status for an output port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The output port id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ApiResponse (PortStatusEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortStatusEntity>> GetOutputPortStatusAsyncWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetOutputPortStatus");

            var localVarPath = "/flow/output-ports/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nodewise != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodewise", nodewise)); // query parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOutputPortStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortStatusEntity)));
        }

        /// <summary>
        /// Retrieves the types of prioritizers that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>PrioritizerTypesEntity</returns>
        public PrioritizerTypesEntity GetPrioritizers ()
        {
             ApiResponse<PrioritizerTypesEntity> localVarResponse = this.GetPrioritizersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the types of prioritizers that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PrioritizerTypesEntity</returns>
        public ApiResponse< PrioritizerTypesEntity > GetPrioritizersWithHttpInfo ()
        {

            var localVarPath = "/flow/prioritizers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPrioritizers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrioritizerTypesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrioritizerTypesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrioritizerTypesEntity)));
        }

        /// <summary>
        /// Retrieves the types of prioritizers that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PrioritizerTypesEntity</returns>
        public async System.Threading.Tasks.Task<PrioritizerTypesEntity> GetPrioritizersAsync ()
        {
             ApiResponse<PrioritizerTypesEntity> localVarResponse = await this.GetPrioritizersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the types of prioritizers that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PrioritizerTypesEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrioritizerTypesEntity>> GetPrioritizersAsyncWithHttpInfo ()
        {

            var localVarPath = "/flow/prioritizers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPrioritizers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrioritizerTypesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrioritizerTypesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrioritizerTypesEntity)));
        }

        /// <summary>
        /// Gets the status for a process group The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="recursive">Whether all descendant groups and the status of their content will be included. Optional, defaults to false (optional, default to false)</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ProcessGroupStatusEntity</returns>
        public ProcessGroupStatusEntity GetProcessGroupStatus (string id, bool? recursive = null, bool? nodewise = null, string clusterNodeId = null)
        {
             ApiResponse<ProcessGroupStatusEntity> localVarResponse = this.GetProcessGroupStatusWithHttpInfo(id, recursive, nodewise, clusterNodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the status for a process group The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="recursive">Whether all descendant groups and the status of their content will be included. Optional, defaults to false (optional, default to false)</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ApiResponse of ProcessGroupStatusEntity</returns>
        public ApiResponse< ProcessGroupStatusEntity > GetProcessGroupStatusWithHttpInfo (string id, bool? recursive = null, bool? nodewise = null, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetProcessGroupStatus");

            var localVarPath = "/flow/process-groups/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recursive", recursive)); // query parameter
            if (nodewise != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodewise", nodewise)); // query parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessGroupStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessGroupStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessGroupStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessGroupStatusEntity)));
        }

        /// <summary>
        /// Gets the status for a process group The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="recursive">Whether all descendant groups and the status of their content will be included. Optional, defaults to false (optional, default to false)</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ProcessGroupStatusEntity</returns>
        public async System.Threading.Tasks.Task<ProcessGroupStatusEntity> GetProcessGroupStatusAsync (string id, bool? recursive = null, bool? nodewise = null, string clusterNodeId = null)
        {
             ApiResponse<ProcessGroupStatusEntity> localVarResponse = await this.GetProcessGroupStatusAsyncWithHttpInfo(id, recursive, nodewise, clusterNodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the status for a process group The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="recursive">Whether all descendant groups and the status of their content will be included. Optional, defaults to false (optional, default to false)</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ApiResponse (ProcessGroupStatusEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessGroupStatusEntity>> GetProcessGroupStatusAsyncWithHttpInfo (string id, bool? recursive = null, bool? nodewise = null, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetProcessGroupStatus");

            var localVarPath = "/flow/process-groups/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (recursive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recursive", recursive)); // query parameter
            if (nodewise != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodewise", nodewise)); // query parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessGroupStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessGroupStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessGroupStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessGroupStatusEntity)));
        }

        /// <summary>
        /// Gets status history for a remote process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>StatusHistoryEntity</returns>
        public StatusHistoryEntity GetProcessGroupStatusHistory (string id)
        {
             ApiResponse<StatusHistoryEntity> localVarResponse = this.GetProcessGroupStatusHistoryWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets status history for a remote process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of StatusHistoryEntity</returns>
        public ApiResponse< StatusHistoryEntity > GetProcessGroupStatusHistoryWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetProcessGroupStatusHistory");

            var localVarPath = "/flow/process-groups/{id}/status/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessGroupStatusHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusHistoryEntity)));
        }

        /// <summary>
        /// Gets status history for a remote process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of StatusHistoryEntity</returns>
        public async System.Threading.Tasks.Task<StatusHistoryEntity> GetProcessGroupStatusHistoryAsync (string id)
        {
             ApiResponse<StatusHistoryEntity> localVarResponse = await this.GetProcessGroupStatusHistoryAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets status history for a remote process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (StatusHistoryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusHistoryEntity>> GetProcessGroupStatusHistoryAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetProcessGroupStatusHistory");

            var localVarPath = "/flow/process-groups/{id}/status/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessGroupStatusHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusHistoryEntity)));
        }

        /// <summary>
        /// Gets status for a processor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ProcessorStatusEntity</returns>
        public ProcessorStatusEntity GetProcessorStatus (string id, bool? nodewise = null, string clusterNodeId = null)
        {
             ApiResponse<ProcessorStatusEntity> localVarResponse = this.GetProcessorStatusWithHttpInfo(id, nodewise, clusterNodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets status for a processor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ApiResponse of ProcessorStatusEntity</returns>
        public ApiResponse< ProcessorStatusEntity > GetProcessorStatusWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetProcessorStatus");

            var localVarPath = "/flow/processors/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nodewise != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodewise", nodewise)); // query parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessorStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessorStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessorStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessorStatusEntity)));
        }

        /// <summary>
        /// Gets status for a processor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ProcessorStatusEntity</returns>
        public async System.Threading.Tasks.Task<ProcessorStatusEntity> GetProcessorStatusAsync (string id, bool? nodewise = null, string clusterNodeId = null)
        {
             ApiResponse<ProcessorStatusEntity> localVarResponse = await this.GetProcessorStatusAsyncWithHttpInfo(id, nodewise, clusterNodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets status for a processor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ApiResponse (ProcessorStatusEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessorStatusEntity>> GetProcessorStatusAsyncWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetProcessorStatus");

            var localVarPath = "/flow/processors/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nodewise != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodewise", nodewise)); // query parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessorStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessorStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessorStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessorStatusEntity)));
        }

        /// <summary>
        /// Gets status history for a processor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <returns>StatusHistoryEntity</returns>
        public StatusHistoryEntity GetProcessorStatusHistory (string id)
        {
             ApiResponse<StatusHistoryEntity> localVarResponse = this.GetProcessorStatusHistoryWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets status history for a processor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <returns>ApiResponse of StatusHistoryEntity</returns>
        public ApiResponse< StatusHistoryEntity > GetProcessorStatusHistoryWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetProcessorStatusHistory");

            var localVarPath = "/flow/processors/{id}/status/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessorStatusHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusHistoryEntity)));
        }

        /// <summary>
        /// Gets status history for a processor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <returns>Task of StatusHistoryEntity</returns>
        public async System.Threading.Tasks.Task<StatusHistoryEntity> GetProcessorStatusHistoryAsync (string id)
        {
             ApiResponse<StatusHistoryEntity> localVarResponse = await this.GetProcessorStatusHistoryAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets status history for a processor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The processor id.</param>
        /// <returns>Task of ApiResponse (StatusHistoryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusHistoryEntity>> GetProcessorStatusHistoryAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetProcessorStatusHistory");

            var localVarPath = "/flow/processors/{id}/status/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessorStatusHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusHistoryEntity)));
        }

        /// <summary>
        /// Retrieves the types of processors that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>ProcessorTypesEntity</returns>
        public ProcessorTypesEntity GetProcessorTypes (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null)
        {
             ApiResponse<ProcessorTypesEntity> localVarResponse = this.GetProcessorTypesWithHttpInfo(bundleGroupFilter, bundleArtifactFilter, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the types of processors that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>ApiResponse of ProcessorTypesEntity</returns>
        public ApiResponse< ProcessorTypesEntity > GetProcessorTypesWithHttpInfo (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null)
        {

            var localVarPath = "/flow/processor-types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bundleGroupFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bundleGroupFilter", bundleGroupFilter)); // query parameter
            if (bundleArtifactFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bundleArtifactFilter", bundleArtifactFilter)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessorTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessorTypesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessorTypesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessorTypesEntity)));
        }

        /// <summary>
        /// Retrieves the types of processors that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>Task of ProcessorTypesEntity</returns>
        public async System.Threading.Tasks.Task<ProcessorTypesEntity> GetProcessorTypesAsync (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null)
        {
             ApiResponse<ProcessorTypesEntity> localVarResponse = await this.GetProcessorTypesAsyncWithHttpInfo(bundleGroupFilter, bundleArtifactFilter, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the types of processors that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>Task of ApiResponse (ProcessorTypesEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessorTypesEntity>> GetProcessorTypesAsyncWithHttpInfo (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null)
        {

            var localVarPath = "/flow/processor-types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bundleGroupFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bundleGroupFilter", bundleGroupFilter)); // query parameter
            if (bundleArtifactFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bundleArtifactFilter", bundleArtifactFilter)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessorTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessorTypesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessorTypesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessorTypesEntity)));
        }

        /// <summary>
        /// Gets the listing of available registries 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>RegistryClientsEntity</returns>
        public RegistryClientsEntity GetRegistries ()
        {
             ApiResponse<RegistryClientsEntity> localVarResponse = this.GetRegistriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the listing of available registries 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RegistryClientsEntity</returns>
        public ApiResponse< RegistryClientsEntity > GetRegistriesWithHttpInfo ()
        {

            var localVarPath = "/flow/registries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRegistries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistryClientsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistryClientsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistryClientsEntity)));
        }

        /// <summary>
        /// Gets the listing of available registries 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RegistryClientsEntity</returns>
        public async System.Threading.Tasks.Task<RegistryClientsEntity> GetRegistriesAsync ()
        {
             ApiResponse<RegistryClientsEntity> localVarResponse = await this.GetRegistriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the listing of available registries 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RegistryClientsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegistryClientsEntity>> GetRegistriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/flow/registries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRegistries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistryClientsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistryClientsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistryClientsEntity)));
        }

        /// <summary>
        /// Gets status for a remote process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>RemoteProcessGroupStatusEntity</returns>
        public RemoteProcessGroupStatusEntity GetRemoteProcessGroupStatus (string id, bool? nodewise = null, string clusterNodeId = null)
        {
             ApiResponse<RemoteProcessGroupStatusEntity> localVarResponse = this.GetRemoteProcessGroupStatusWithHttpInfo(id, nodewise, clusterNodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets status for a remote process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>ApiResponse of RemoteProcessGroupStatusEntity</returns>
        public ApiResponse< RemoteProcessGroupStatusEntity > GetRemoteProcessGroupStatusWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetRemoteProcessGroupStatus");

            var localVarPath = "/flow/remote-process-groups/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nodewise != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodewise", nodewise)); // query parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRemoteProcessGroupStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteProcessGroupStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteProcessGroupStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteProcessGroupStatusEntity)));
        }

        /// <summary>
        /// Gets status for a remote process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of RemoteProcessGroupStatusEntity</returns>
        public async System.Threading.Tasks.Task<RemoteProcessGroupStatusEntity> GetRemoteProcessGroupStatusAsync (string id, bool? nodewise = null, string clusterNodeId = null)
        {
             ApiResponse<RemoteProcessGroupStatusEntity> localVarResponse = await this.GetRemoteProcessGroupStatusAsyncWithHttpInfo(id, nodewise, clusterNodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets status for a remote process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <param name="nodewise">Whether or not to include the breakdown per node. Optional, defaults to false (optional, default to false)</param>
        /// <param name="clusterNodeId">The id of the node where to get the status. (optional)</param>
        /// <returns>Task of ApiResponse (RemoteProcessGroupStatusEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoteProcessGroupStatusEntity>> GetRemoteProcessGroupStatusAsyncWithHttpInfo (string id, bool? nodewise = null, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetRemoteProcessGroupStatus");

            var localVarPath = "/flow/remote-process-groups/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (nodewise != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nodewise", nodewise)); // query parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRemoteProcessGroupStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteProcessGroupStatusEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteProcessGroupStatusEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteProcessGroupStatusEntity)));
        }

        /// <summary>
        /// Gets the status history 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <returns>StatusHistoryEntity</returns>
        public StatusHistoryEntity GetRemoteProcessGroupStatusHistory (string id)
        {
             ApiResponse<StatusHistoryEntity> localVarResponse = this.GetRemoteProcessGroupStatusHistoryWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the status history 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <returns>ApiResponse of StatusHistoryEntity</returns>
        public ApiResponse< StatusHistoryEntity > GetRemoteProcessGroupStatusHistoryWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetRemoteProcessGroupStatusHistory");

            var localVarPath = "/flow/remote-process-groups/{id}/status/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRemoteProcessGroupStatusHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusHistoryEntity)));
        }

        /// <summary>
        /// Gets the status history 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <returns>Task of StatusHistoryEntity</returns>
        public async System.Threading.Tasks.Task<StatusHistoryEntity> GetRemoteProcessGroupStatusHistoryAsync (string id)
        {
             ApiResponse<StatusHistoryEntity> localVarResponse = await this.GetRemoteProcessGroupStatusHistoryAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the status history 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The remote process group id.</param>
        /// <returns>Task of ApiResponse (StatusHistoryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusHistoryEntity>> GetRemoteProcessGroupStatusHistoryAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->GetRemoteProcessGroupStatusHistory");

            var localVarPath = "/flow/remote-process-groups/{id}/status/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRemoteProcessGroupStatusHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusHistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusHistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusHistoryEntity)));
        }

        /// <summary>
        /// Retrieves the types of reporting tasks that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>ReportingTaskTypesEntity</returns>
        public ReportingTaskTypesEntity GetReportingTaskTypes (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null)
        {
             ApiResponse<ReportingTaskTypesEntity> localVarResponse = this.GetReportingTaskTypesWithHttpInfo(bundleGroupFilter, bundleArtifactFilter, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the types of reporting tasks that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>ApiResponse of ReportingTaskTypesEntity</returns>
        public ApiResponse< ReportingTaskTypesEntity > GetReportingTaskTypesWithHttpInfo (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null)
        {

            var localVarPath = "/flow/reporting-task-types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bundleGroupFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bundleGroupFilter", bundleGroupFilter)); // query parameter
            if (bundleArtifactFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bundleArtifactFilter", bundleArtifactFilter)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReportingTaskTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportingTaskTypesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportingTaskTypesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportingTaskTypesEntity)));
        }

        /// <summary>
        /// Retrieves the types of reporting tasks that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>Task of ReportingTaskTypesEntity</returns>
        public async System.Threading.Tasks.Task<ReportingTaskTypesEntity> GetReportingTaskTypesAsync (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null)
        {
             ApiResponse<ReportingTaskTypesEntity> localVarResponse = await this.GetReportingTaskTypesAsyncWithHttpInfo(bundleGroupFilter, bundleArtifactFilter, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the types of reporting tasks that this NiFi supports Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="bundleGroupFilter">If specified, will only return types that are a member of this bundle group. (optional)</param>
        /// <param name="bundleArtifactFilter">If specified, will only return types that are a member of this bundle artifact. (optional)</param>
        /// <param name="type">If specified, will only return types whose fully qualified classname matches. (optional)</param>
        /// <returns>Task of ApiResponse (ReportingTaskTypesEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportingTaskTypesEntity>> GetReportingTaskTypesAsyncWithHttpInfo (string bundleGroupFilter = null, string bundleArtifactFilter = null, string type = null)
        {

            var localVarPath = "/flow/reporting-task-types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bundleGroupFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bundleGroupFilter", bundleGroupFilter)); // query parameter
            if (bundleArtifactFilter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bundleArtifactFilter", bundleArtifactFilter)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReportingTaskTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportingTaskTypesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportingTaskTypesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportingTaskTypesEntity)));
        }

        /// <summary>
        /// Gets all reporting tasks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ReportingTasksEntity</returns>
        public ReportingTasksEntity GetReportingTasks ()
        {
             ApiResponse<ReportingTasksEntity> localVarResponse = this.GetReportingTasksWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all reporting tasks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ReportingTasksEntity</returns>
        public ApiResponse< ReportingTasksEntity > GetReportingTasksWithHttpInfo ()
        {

            var localVarPath = "/flow/reporting-tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReportingTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportingTasksEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportingTasksEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportingTasksEntity)));
        }

        /// <summary>
        /// Gets all reporting tasks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ReportingTasksEntity</returns>
        public async System.Threading.Tasks.Task<ReportingTasksEntity> GetReportingTasksAsync ()
        {
             ApiResponse<ReportingTasksEntity> localVarResponse = await this.GetReportingTasksAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all reporting tasks 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ReportingTasksEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportingTasksEntity>> GetReportingTasksAsyncWithHttpInfo ()
        {

            var localVarPath = "/flow/reporting-tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetReportingTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportingTasksEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportingTasksEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportingTasksEntity)));
        }

        /// <summary>
        /// Gets all templates 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>TemplatesEntity</returns>
        public TemplatesEntity GetTemplates ()
        {
             ApiResponse<TemplatesEntity> localVarResponse = this.GetTemplatesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all templates 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TemplatesEntity</returns>
        public ApiResponse< TemplatesEntity > GetTemplatesWithHttpInfo ()
        {

            var localVarPath = "/flow/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplatesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplatesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplatesEntity)));
        }

        /// <summary>
        /// Gets all templates 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TemplatesEntity</returns>
        public async System.Threading.Tasks.Task<TemplatesEntity> GetTemplatesAsync ()
        {
             ApiResponse<TemplatesEntity> localVarResponse = await this.GetTemplatesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all templates 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TemplatesEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplatesEntity>> GetTemplatesAsyncWithHttpInfo ()
        {

            var localVarPath = "/flow/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplatesEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplatesEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplatesEntity)));
        }

        /// <summary>
        /// Gets the flow versions from the specified registry and bucket for the specified flow for the current user 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <param name="flowId">The flow id.</param>
        /// <returns>VersionedFlowSnapshotMetadataSetEntity</returns>
        public VersionedFlowSnapshotMetadataSetEntity GetVersions (string registryId, string bucketId, string flowId)
        {
             ApiResponse<VersionedFlowSnapshotMetadataSetEntity> localVarResponse = this.GetVersionsWithHttpInfo(registryId, bucketId, flowId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the flow versions from the specified registry and bucket for the specified flow for the current user 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <param name="flowId">The flow id.</param>
        /// <returns>ApiResponse of VersionedFlowSnapshotMetadataSetEntity</returns>
        public ApiResponse< VersionedFlowSnapshotMetadataSetEntity > GetVersionsWithHttpInfo (string registryId, string bucketId, string flowId)
        {
            // verify the required parameter 'registryId' is set
            if (registryId == null)
                throw new ApiException(400, "Missing required parameter 'registryId' when calling FlowApi->GetVersions");
            // verify the required parameter 'bucketId' is set
            if (bucketId == null)
                throw new ApiException(400, "Missing required parameter 'bucketId' when calling FlowApi->GetVersions");
            // verify the required parameter 'flowId' is set
            if (flowId == null)
                throw new ApiException(400, "Missing required parameter 'flowId' when calling FlowApi->GetVersions");

            var localVarPath = "/flow/registries/{registry-id}/buckets/{bucket-id}/flows/{flow-id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registryId != null) localVarPathParams.Add("registry-id", this.Configuration.ApiClient.ParameterToString(registryId)); // path parameter
            if (bucketId != null) localVarPathParams.Add("bucket-id", this.Configuration.ApiClient.ParameterToString(bucketId)); // path parameter
            if (flowId != null) localVarPathParams.Add("flow-id", this.Configuration.ApiClient.ParameterToString(flowId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowSnapshotMetadataSetEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowSnapshotMetadataSetEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowSnapshotMetadataSetEntity)));
        }

        /// <summary>
        /// Gets the flow versions from the specified registry and bucket for the specified flow for the current user 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <param name="flowId">The flow id.</param>
        /// <returns>Task of VersionedFlowSnapshotMetadataSetEntity</returns>
        public async System.Threading.Tasks.Task<VersionedFlowSnapshotMetadataSetEntity> GetVersionsAsync (string registryId, string bucketId, string flowId)
        {
             ApiResponse<VersionedFlowSnapshotMetadataSetEntity> localVarResponse = await this.GetVersionsAsyncWithHttpInfo(registryId, bucketId, flowId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the flow versions from the specified registry and bucket for the specified flow for the current user 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="registryId">The registry id.</param>
        /// <param name="bucketId">The bucket id.</param>
        /// <param name="flowId">The flow id.</param>
        /// <returns>Task of ApiResponse (VersionedFlowSnapshotMetadataSetEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VersionedFlowSnapshotMetadataSetEntity>> GetVersionsAsyncWithHttpInfo (string registryId, string bucketId, string flowId)
        {
            // verify the required parameter 'registryId' is set
            if (registryId == null)
                throw new ApiException(400, "Missing required parameter 'registryId' when calling FlowApi->GetVersions");
            // verify the required parameter 'bucketId' is set
            if (bucketId == null)
                throw new ApiException(400, "Missing required parameter 'bucketId' when calling FlowApi->GetVersions");
            // verify the required parameter 'flowId' is set
            if (flowId == null)
                throw new ApiException(400, "Missing required parameter 'flowId' when calling FlowApi->GetVersions");

            var localVarPath = "/flow/registries/{registry-id}/buckets/{bucket-id}/flows/{flow-id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (registryId != null) localVarPathParams.Add("registry-id", this.Configuration.ApiClient.ParameterToString(registryId)); // path parameter
            if (bucketId != null) localVarPathParams.Add("bucket-id", this.Configuration.ApiClient.ParameterToString(bucketId)); // path parameter
            if (flowId != null) localVarPathParams.Add("flow-id", this.Configuration.ApiClient.ParameterToString(flowId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowSnapshotMetadataSetEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowSnapshotMetadataSetEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowSnapshotMetadataSetEntity)));
        }

        /// <summary>
        /// Gets configuration history Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The offset into the result set.</param>
        /// <param name="count">The number of actions to return.</param>
        /// <param name="sortColumn">The field to sort on. (optional)</param>
        /// <param name="sortOrder">The direction to sort. (optional)</param>
        /// <param name="startDate">Include actions after this date. (optional)</param>
        /// <param name="endDate">Include actions before this date. (optional)</param>
        /// <param name="userIdentity">Include actions performed by this user. (optional)</param>
        /// <param name="sourceId">Include actions on this component. (optional)</param>
        /// <returns>HistoryEntity</returns>
        public HistoryEntity QueryHistory (string offset, string count, string sortColumn = null, string sortOrder = null, string startDate = null, string endDate = null, string userIdentity = null, string sourceId = null)
        {
             ApiResponse<HistoryEntity> localVarResponse = this.QueryHistoryWithHttpInfo(offset, count, sortColumn, sortOrder, startDate, endDate, userIdentity, sourceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets configuration history Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The offset into the result set.</param>
        /// <param name="count">The number of actions to return.</param>
        /// <param name="sortColumn">The field to sort on. (optional)</param>
        /// <param name="sortOrder">The direction to sort. (optional)</param>
        /// <param name="startDate">Include actions after this date. (optional)</param>
        /// <param name="endDate">Include actions before this date. (optional)</param>
        /// <param name="userIdentity">Include actions performed by this user. (optional)</param>
        /// <param name="sourceId">Include actions on this component. (optional)</param>
        /// <returns>ApiResponse of HistoryEntity</returns>
        public ApiResponse< HistoryEntity > QueryHistoryWithHttpInfo (string offset, string count, string sortColumn = null, string sortOrder = null, string startDate = null, string endDate = null, string userIdentity = null, string sourceId = null)
        {
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling FlowApi->QueryHistory");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling FlowApi->QueryHistory");

            var localVarPath = "/flow/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (sortColumn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortColumn", sortColumn)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (userIdentity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIdentity", userIdentity)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceId", sourceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("QueryHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoryEntity)));
        }

        /// <summary>
        /// Gets configuration history Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The offset into the result set.</param>
        /// <param name="count">The number of actions to return.</param>
        /// <param name="sortColumn">The field to sort on. (optional)</param>
        /// <param name="sortOrder">The direction to sort. (optional)</param>
        /// <param name="startDate">Include actions after this date. (optional)</param>
        /// <param name="endDate">Include actions before this date. (optional)</param>
        /// <param name="userIdentity">Include actions performed by this user. (optional)</param>
        /// <param name="sourceId">Include actions on this component. (optional)</param>
        /// <returns>Task of HistoryEntity</returns>
        public async System.Threading.Tasks.Task<HistoryEntity> QueryHistoryAsync (string offset, string count, string sortColumn = null, string sortOrder = null, string startDate = null, string endDate = null, string userIdentity = null, string sourceId = null)
        {
             ApiResponse<HistoryEntity> localVarResponse = await this.QueryHistoryAsyncWithHttpInfo(offset, count, sortColumn, sortOrder, startDate, endDate, userIdentity, sourceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets configuration history Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The offset into the result set.</param>
        /// <param name="count">The number of actions to return.</param>
        /// <param name="sortColumn">The field to sort on. (optional)</param>
        /// <param name="sortOrder">The direction to sort. (optional)</param>
        /// <param name="startDate">Include actions after this date. (optional)</param>
        /// <param name="endDate">Include actions before this date. (optional)</param>
        /// <param name="userIdentity">Include actions performed by this user. (optional)</param>
        /// <param name="sourceId">Include actions on this component. (optional)</param>
        /// <returns>Task of ApiResponse (HistoryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HistoryEntity>> QueryHistoryAsyncWithHttpInfo (string offset, string count, string sortColumn = null, string sortOrder = null, string startDate = null, string endDate = null, string userIdentity = null, string sourceId = null)
        {
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling FlowApi->QueryHistory");
            // verify the required parameter 'count' is set
            if (count == null)
                throw new ApiException(400, "Missing required parameter 'count' when calling FlowApi->QueryHistory");

            var localVarPath = "/flow/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (count != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "count", count)); // query parameter
            if (sortColumn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortColumn", sortColumn)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortOrder", sortOrder)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (userIdentity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIdentity", userIdentity)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceId", sourceId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("QueryHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HistoryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HistoryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(HistoryEntity)));
        }

        /// <summary>
        /// Schedule or unschedule components in the specified Process Group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>ScheduleComponentsEntity</returns>
        public ScheduleComponentsEntity ScheduleComponents (string id, ScheduleComponentsEntity body)
        {
             ApiResponse<ScheduleComponentsEntity> localVarResponse = this.ScheduleComponentsWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Schedule or unschedule components in the specified Process Group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>ApiResponse of ScheduleComponentsEntity</returns>
        public ApiResponse< ScheduleComponentsEntity > ScheduleComponentsWithHttpInfo (string id, ScheduleComponentsEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->ScheduleComponents");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlowApi->ScheduleComponents");

            var localVarPath = "/flow/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ScheduleComponents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduleComponentsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduleComponentsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduleComponentsEntity)));
        }

        /// <summary>
        /// Schedule or unschedule components in the specified Process Group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>Task of ScheduleComponentsEntity</returns>
        public async System.Threading.Tasks.Task<ScheduleComponentsEntity> ScheduleComponentsAsync (string id, ScheduleComponentsEntity body)
        {
             ApiResponse<ScheduleComponentsEntity> localVarResponse = await this.ScheduleComponentsAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Schedule or unschedule components in the specified Process Group. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The request to schedule or unschedule. If the comopnents in the request are not specified, all authorized components will be considered.</param>
        /// <returns>Task of ApiResponse (ScheduleComponentsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ScheduleComponentsEntity>> ScheduleComponentsAsyncWithHttpInfo (string id, ScheduleComponentsEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FlowApi->ScheduleComponents");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FlowApi->ScheduleComponents");

            var localVarPath = "/flow/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ScheduleComponents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ScheduleComponentsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ScheduleComponentsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ScheduleComponentsEntity)));
        }

        /// <summary>
        /// Searches the cluster for a node with the specified address Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Node address to search for.</param>
        /// <returns>ClusterSearchResultsEntity</returns>
        public ClusterSearchResultsEntity SearchCluster (string q)
        {
             ApiResponse<ClusterSearchResultsEntity> localVarResponse = this.SearchClusterWithHttpInfo(q);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Searches the cluster for a node with the specified address Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Node address to search for.</param>
        /// <returns>ApiResponse of ClusterSearchResultsEntity</returns>
        public ApiResponse< ClusterSearchResultsEntity > SearchClusterWithHttpInfo (string q)
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling FlowApi->SearchCluster");

            var localVarPath = "/flow/cluster/search-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SearchCluster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClusterSearchResultsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClusterSearchResultsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClusterSearchResultsEntity)));
        }

        /// <summary>
        /// Searches the cluster for a node with the specified address Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Node address to search for.</param>
        /// <returns>Task of ClusterSearchResultsEntity</returns>
        public async System.Threading.Tasks.Task<ClusterSearchResultsEntity> SearchClusterAsync (string q)
        {
             ApiResponse<ClusterSearchResultsEntity> localVarResponse = await this.SearchClusterAsyncWithHttpInfo(q);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Searches the cluster for a node with the specified address Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Node address to search for.</param>
        /// <returns>Task of ApiResponse (ClusterSearchResultsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClusterSearchResultsEntity>> SearchClusterAsyncWithHttpInfo (string q)
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling FlowApi->SearchCluster");

            var localVarPath = "/flow/cluster/search-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SearchCluster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClusterSearchResultsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClusterSearchResultsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClusterSearchResultsEntity)));
        }

        /// <summary>
        /// Performs a search against this NiFi using the specified search term Only search results from authorized components will be returned.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <returns>SearchResultsEntity</returns>
        public SearchResultsEntity SearchFlow (string q = null)
        {
             ApiResponse<SearchResultsEntity> localVarResponse = this.SearchFlowWithHttpInfo(q);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Performs a search against this NiFi using the specified search term Only search results from authorized components will be returned.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <returns>ApiResponse of SearchResultsEntity</returns>
        public ApiResponse< SearchResultsEntity > SearchFlowWithHttpInfo (string q = null)
        {

            var localVarPath = "/flow/search-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SearchFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchResultsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchResultsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchResultsEntity)));
        }

        /// <summary>
        /// Performs a search against this NiFi using the specified search term Only search results from authorized components will be returned.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <returns>Task of SearchResultsEntity</returns>
        public async System.Threading.Tasks.Task<SearchResultsEntity> SearchFlowAsync (string q = null)
        {
             ApiResponse<SearchResultsEntity> localVarResponse = await this.SearchFlowAsyncWithHttpInfo(q);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Performs a search against this NiFi using the specified search term Only search results from authorized components will be returned.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q"> (optional)</param>
        /// <returns>Task of ApiResponse (SearchResultsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchResultsEntity>> SearchFlowAsyncWithHttpInfo (string q = null)
        {

            var localVarPath = "/flow/search-results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "q", q)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SearchFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SearchResultsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SearchResultsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SearchResultsEntity)));
        }

    }
}
