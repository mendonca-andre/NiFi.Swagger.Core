/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Api
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;

    using NiFi.Swagger.Core.Client;
    using NiFi.Swagger.Core.Model;

    using RestSharp;

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProvenanceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a lineage query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>LineageEntity</returns>
        LineageEntity DeleteLineage (string id, string clusterNodeId = null);

        /// <summary>
        /// Deletes a lineage query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>ApiResponse of LineageEntity</returns>
        ApiResponse<LineageEntity> DeleteLineageWithHttpInfo (string id, string clusterNodeId = null);
        /// <summary>
        /// Deletes a provenance query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>ProvenanceEntity</returns>
        ProvenanceEntity DeleteProvenance (string id, string clusterNodeId = null);

        /// <summary>
        /// Deletes a provenance query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>ApiResponse of ProvenanceEntity</returns>
        ApiResponse<ProvenanceEntity> DeleteProvenanceWithHttpInfo (string id, string clusterNodeId = null);
        /// <summary>
        /// Gets a lineage query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>LineageEntity</returns>
        LineageEntity GetLineage (string id, string clusterNodeId = null);

        /// <summary>
        /// Gets a lineage query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>ApiResponse of LineageEntity</returns>
        ApiResponse<LineageEntity> GetLineageWithHttpInfo (string id, string clusterNodeId = null);
        /// <summary>
        /// Gets a provenance query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <param name="summarize">Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default. (optional, default to false)</param>
        /// <param name="incrementalResults">Whether or not to summarize provenance events returned. This property is false by default. (optional, default to true)</param>
        /// <returns>ProvenanceEntity</returns>
        ProvenanceEntity GetProvenance (string id, string clusterNodeId = null, bool? summarize = null, bool? incrementalResults = null);

        /// <summary>
        /// Gets a provenance query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <param name="summarize">Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default. (optional, default to false)</param>
        /// <param name="incrementalResults">Whether or not to summarize provenance events returned. This property is false by default. (optional, default to true)</param>
        /// <returns>ApiResponse of ProvenanceEntity</returns>
        ApiResponse<ProvenanceEntity> GetProvenanceWithHttpInfo (string id, string clusterNodeId = null, bool? summarize = null, bool? incrementalResults = null);
        /// <summary>
        /// Gets the searchable attributes for provenance events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProvenanceOptionsEntity</returns>
        ProvenanceOptionsEntity GetSearchOptions ();

        /// <summary>
        /// Gets the searchable attributes for provenance events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProvenanceOptionsEntity</returns>
        ApiResponse<ProvenanceOptionsEntity> GetSearchOptionsWithHttpInfo ();
        /// <summary>
        /// Submits a lineage query
        /// </summary>
        /// <remarks>
        /// Lineage queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the lineage request should be deleted by the client who originally submitted it.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The lineage query details.</param>
        /// <returns>LineageEntity</returns>
        LineageEntity SubmitLineageRequest (LineageEntity body);

        /// <summary>
        /// Submits a lineage query
        /// </summary>
        /// <remarks>
        /// Lineage queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the lineage request should be deleted by the client who originally submitted it.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The lineage query details.</param>
        /// <returns>ApiResponse of LineageEntity</returns>
        ApiResponse<LineageEntity> SubmitLineageRequestWithHttpInfo (LineageEntity body);
        /// <summary>
        /// Submits a provenance query
        /// </summary>
        /// <remarks>
        /// Provenance queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the provenance request should be deleted by the client who originally submitted it.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The provenance query details.</param>
        /// <returns>ProvenanceEntity</returns>
        ProvenanceEntity SubmitProvenanceRequest (ProvenanceEntity body);

        /// <summary>
        /// Submits a provenance query
        /// </summary>
        /// <remarks>
        /// Provenance queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the provenance request should be deleted by the client who originally submitted it.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The provenance query details.</param>
        /// <returns>ApiResponse of ProvenanceEntity</returns>
        ApiResponse<ProvenanceEntity> SubmitProvenanceRequestWithHttpInfo (ProvenanceEntity body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a lineage query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>Task of LineageEntity</returns>
        System.Threading.Tasks.Task<LineageEntity> DeleteLineageAsync (string id, string clusterNodeId = null);

        /// <summary>
        /// Deletes a lineage query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>Task of ApiResponse (LineageEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineageEntity>> DeleteLineageAsyncWithHttpInfo (string id, string clusterNodeId = null);
        /// <summary>
        /// Deletes a provenance query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>Task of ProvenanceEntity</returns>
        System.Threading.Tasks.Task<ProvenanceEntity> DeleteProvenanceAsync (string id, string clusterNodeId = null);

        /// <summary>
        /// Deletes a provenance query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>Task of ApiResponse (ProvenanceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvenanceEntity>> DeleteProvenanceAsyncWithHttpInfo (string id, string clusterNodeId = null);
        /// <summary>
        /// Gets a lineage query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>Task of LineageEntity</returns>
        System.Threading.Tasks.Task<LineageEntity> GetLineageAsync (string id, string clusterNodeId = null);

        /// <summary>
        /// Gets a lineage query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>Task of ApiResponse (LineageEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineageEntity>> GetLineageAsyncWithHttpInfo (string id, string clusterNodeId = null);
        /// <summary>
        /// Gets a provenance query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <param name="summarize">Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default. (optional, default to false)</param>
        /// <param name="incrementalResults">Whether or not to summarize provenance events returned. This property is false by default. (optional, default to true)</param>
        /// <returns>Task of ProvenanceEntity</returns>
        System.Threading.Tasks.Task<ProvenanceEntity> GetProvenanceAsync (string id, string clusterNodeId = null, bool? summarize = null, bool? incrementalResults = null);

        /// <summary>
        /// Gets a provenance query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <param name="summarize">Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default. (optional, default to false)</param>
        /// <param name="incrementalResults">Whether or not to summarize provenance events returned. This property is false by default. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ProvenanceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvenanceEntity>> GetProvenanceAsyncWithHttpInfo (string id, string clusterNodeId = null, bool? summarize = null, bool? incrementalResults = null);
        /// <summary>
        /// Gets the searchable attributes for provenance events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProvenanceOptionsEntity</returns>
        System.Threading.Tasks.Task<ProvenanceOptionsEntity> GetSearchOptionsAsync ();

        /// <summary>
        /// Gets the searchable attributes for provenance events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProvenanceOptionsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvenanceOptionsEntity>> GetSearchOptionsAsyncWithHttpInfo ();
        /// <summary>
        /// Submits a lineage query
        /// </summary>
        /// <remarks>
        /// Lineage queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the lineage request should be deleted by the client who originally submitted it.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The lineage query details.</param>
        /// <returns>Task of LineageEntity</returns>
        System.Threading.Tasks.Task<LineageEntity> SubmitLineageRequestAsync (LineageEntity body);

        /// <summary>
        /// Submits a lineage query
        /// </summary>
        /// <remarks>
        /// Lineage queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the lineage request should be deleted by the client who originally submitted it.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The lineage query details.</param>
        /// <returns>Task of ApiResponse (LineageEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<LineageEntity>> SubmitLineageRequestAsyncWithHttpInfo (LineageEntity body);
        /// <summary>
        /// Submits a provenance query
        /// </summary>
        /// <remarks>
        /// Provenance queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the provenance request should be deleted by the client who originally submitted it.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The provenance query details.</param>
        /// <returns>Task of ProvenanceEntity</returns>
        System.Threading.Tasks.Task<ProvenanceEntity> SubmitProvenanceRequestAsync (ProvenanceEntity body);

        /// <summary>
        /// Submits a provenance query
        /// </summary>
        /// <remarks>
        /// Provenance queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the provenance request should be deleted by the client who originally submitted it.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The provenance query details.</param>
        /// <returns>Task of ApiResponse (ProvenanceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProvenanceEntity>> SubmitProvenanceRequestAsyncWithHttpInfo (ProvenanceEntity body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProvenanceApi : IProvenanceApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvenanceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProvenanceApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProvenanceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProvenanceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this._exceptionFactory != null && this._exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return this._exceptionFactory;
            }
            set { this._exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes a lineage query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>LineageEntity</returns>
        public LineageEntity DeleteLineage (string id, string clusterNodeId = null)
        {
             ApiResponse<LineageEntity> localVarResponse = this.DeleteLineageWithHttpInfo(id, clusterNodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a lineage query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>ApiResponse of LineageEntity</returns>
        public ApiResponse< LineageEntity > DeleteLineageWithHttpInfo (string id, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProvenanceApi->DeleteLineage");

            var localVarPath = "/provenance/lineage/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteLineage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineageEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineageEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineageEntity)));
        }

        /// <summary>
        /// Deletes a lineage query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>Task of LineageEntity</returns>
        public async System.Threading.Tasks.Task<LineageEntity> DeleteLineageAsync (string id, string clusterNodeId = null)
        {
             ApiResponse<LineageEntity> localVarResponse = await this.DeleteLineageAsyncWithHttpInfo(id, clusterNodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a lineage query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>Task of ApiResponse (LineageEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LineageEntity>> DeleteLineageAsyncWithHttpInfo (string id, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProvenanceApi->DeleteLineage");

            var localVarPath = "/provenance/lineage/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteLineage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineageEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineageEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineageEntity)));
        }

        /// <summary>
        /// Deletes a provenance query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>ProvenanceEntity</returns>
        public ProvenanceEntity DeleteProvenance (string id, string clusterNodeId = null)
        {
             ApiResponse<ProvenanceEntity> localVarResponse = this.DeleteProvenanceWithHttpInfo(id, clusterNodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a provenance query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>ApiResponse of ProvenanceEntity</returns>
        public ApiResponse< ProvenanceEntity > DeleteProvenanceWithHttpInfo (string id, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProvenanceApi->DeleteProvenance");

            var localVarPath = "/provenance/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteProvenance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProvenanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProvenanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProvenanceEntity)));
        }

        /// <summary>
        /// Deletes a provenance query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>Task of ProvenanceEntity</returns>
        public async System.Threading.Tasks.Task<ProvenanceEntity> DeleteProvenanceAsync (string id, string clusterNodeId = null)
        {
             ApiResponse<ProvenanceEntity> localVarResponse = await this.DeleteProvenanceAsyncWithHttpInfo(id, clusterNodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a provenance query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>Task of ApiResponse (ProvenanceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProvenanceEntity>> DeleteProvenanceAsyncWithHttpInfo (string id, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProvenanceApi->DeleteProvenance");

            var localVarPath = "/provenance/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteProvenance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProvenanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProvenanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProvenanceEntity)));
        }

        /// <summary>
        /// Gets a lineage query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>LineageEntity</returns>
        public LineageEntity GetLineage (string id, string clusterNodeId = null)
        {
             ApiResponse<LineageEntity> localVarResponse = this.GetLineageWithHttpInfo(id, clusterNodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a lineage query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>ApiResponse of LineageEntity</returns>
        public ApiResponse< LineageEntity > GetLineageWithHttpInfo (string id, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProvenanceApi->GetLineage");

            var localVarPath = "/provenance/lineage/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLineage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineageEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineageEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineageEntity)));
        }

        /// <summary>
        /// Gets a lineage query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>Task of LineageEntity</returns>
        public async System.Threading.Tasks.Task<LineageEntity> GetLineageAsync (string id, string clusterNodeId = null)
        {
             ApiResponse<LineageEntity> localVarResponse = await this.GetLineageAsyncWithHttpInfo(id, clusterNodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a lineage query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the lineage query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <returns>Task of ApiResponse (LineageEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LineageEntity>> GetLineageAsyncWithHttpInfo (string id, string clusterNodeId = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProvenanceApi->GetLineage");

            var localVarPath = "/provenance/lineage/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLineage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineageEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineageEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineageEntity)));
        }

        /// <summary>
        /// Gets a provenance query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <param name="summarize">Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default. (optional, default to false)</param>
        /// <param name="incrementalResults">Whether or not to summarize provenance events returned. This property is false by default. (optional, default to true)</param>
        /// <returns>ProvenanceEntity</returns>
        public ProvenanceEntity GetProvenance (string id, string clusterNodeId = null, bool? summarize = null, bool? incrementalResults = null)
        {
             ApiResponse<ProvenanceEntity> localVarResponse = this.GetProvenanceWithHttpInfo(id, clusterNodeId, summarize, incrementalResults);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a provenance query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <param name="summarize">Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default. (optional, default to false)</param>
        /// <param name="incrementalResults">Whether or not to summarize provenance events returned. This property is false by default. (optional, default to true)</param>
        /// <returns>ApiResponse of ProvenanceEntity</returns>
        public ApiResponse< ProvenanceEntity > GetProvenanceWithHttpInfo (string id, string clusterNodeId = null, bool? summarize = null, bool? incrementalResults = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProvenanceApi->GetProvenance");

            var localVarPath = "/provenance/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter
            if (summarize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "summarize", summarize)); // query parameter
            if (incrementalResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incrementalResults", incrementalResults)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProvenance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProvenanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProvenanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProvenanceEntity)));
        }

        /// <summary>
        /// Gets a provenance query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <param name="summarize">Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default. (optional, default to false)</param>
        /// <param name="incrementalResults">Whether or not to summarize provenance events returned. This property is false by default. (optional, default to true)</param>
        /// <returns>Task of ProvenanceEntity</returns>
        public async System.Threading.Tasks.Task<ProvenanceEntity> GetProvenanceAsync (string id, string clusterNodeId = null, bool? summarize = null, bool? incrementalResults = null)
        {
             ApiResponse<ProvenanceEntity> localVarResponse = await this.GetProvenanceAsyncWithHttpInfo(id, clusterNodeId, summarize, incrementalResults);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a provenance query 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the provenance query.</param>
        /// <param name="clusterNodeId">The id of the node where this query exists if clustered. (optional)</param>
        /// <param name="summarize">Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default. (optional, default to false)</param>
        /// <param name="incrementalResults">Whether or not to summarize provenance events returned. This property is false by default. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ProvenanceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProvenanceEntity>> GetProvenanceAsyncWithHttpInfo (string id, string clusterNodeId = null, bool? summarize = null, bool? incrementalResults = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProvenanceApi->GetProvenance");

            var localVarPath = "/provenance/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clusterNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterNodeId", clusterNodeId)); // query parameter
            if (summarize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "summarize", summarize)); // query parameter
            if (incrementalResults != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "incrementalResults", incrementalResults)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProvenance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProvenanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProvenanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProvenanceEntity)));
        }

        /// <summary>
        /// Gets the searchable attributes for provenance events 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProvenanceOptionsEntity</returns>
        public ProvenanceOptionsEntity GetSearchOptions ()
        {
             ApiResponse<ProvenanceOptionsEntity> localVarResponse = this.GetSearchOptionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the searchable attributes for provenance events 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProvenanceOptionsEntity</returns>
        public ApiResponse< ProvenanceOptionsEntity > GetSearchOptionsWithHttpInfo ()
        {

            var localVarPath = "/provenance/search-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSearchOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProvenanceOptionsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProvenanceOptionsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProvenanceOptionsEntity)));
        }

        /// <summary>
        /// Gets the searchable attributes for provenance events 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProvenanceOptionsEntity</returns>
        public async System.Threading.Tasks.Task<ProvenanceOptionsEntity> GetSearchOptionsAsync ()
        {
             ApiResponse<ProvenanceOptionsEntity> localVarResponse = await this.GetSearchOptionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the searchable attributes for provenance events 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProvenanceOptionsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProvenanceOptionsEntity>> GetSearchOptionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/provenance/search-options";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetSearchOptions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProvenanceOptionsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProvenanceOptionsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProvenanceOptionsEntity)));
        }

        /// <summary>
        /// Submits a lineage query Lineage queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the lineage request should be deleted by the client who originally submitted it.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The lineage query details.</param>
        /// <returns>LineageEntity</returns>
        public LineageEntity SubmitLineageRequest (LineageEntity body)
        {
             ApiResponse<LineageEntity> localVarResponse = this.SubmitLineageRequestWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submits a lineage query Lineage queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the lineage request should be deleted by the client who originally submitted it.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The lineage query details.</param>
        /// <returns>ApiResponse of LineageEntity</returns>
        public ApiResponse< LineageEntity > SubmitLineageRequestWithHttpInfo (LineageEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProvenanceApi->SubmitLineageRequest");

            var localVarPath = "/provenance/lineage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitLineageRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineageEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineageEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineageEntity)));
        }

        /// <summary>
        /// Submits a lineage query Lineage queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the lineage request should be deleted by the client who originally submitted it.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The lineage query details.</param>
        /// <returns>Task of LineageEntity</returns>
        public async System.Threading.Tasks.Task<LineageEntity> SubmitLineageRequestAsync (LineageEntity body)
        {
             ApiResponse<LineageEntity> localVarResponse = await this.SubmitLineageRequestAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submits a lineage query Lineage queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the lineage request should be deleted by the client who originally submitted it.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The lineage query details.</param>
        /// <returns>Task of ApiResponse (LineageEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LineageEntity>> SubmitLineageRequestAsyncWithHttpInfo (LineageEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProvenanceApi->SubmitLineageRequest");

            var localVarPath = "/provenance/lineage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitLineageRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LineageEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LineageEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LineageEntity)));
        }

        /// <summary>
        /// Submits a provenance query Provenance queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the provenance request should be deleted by the client who originally submitted it.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The provenance query details.</param>
        /// <returns>ProvenanceEntity</returns>
        public ProvenanceEntity SubmitProvenanceRequest (ProvenanceEntity body)
        {
             ApiResponse<ProvenanceEntity> localVarResponse = this.SubmitProvenanceRequestWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submits a provenance query Provenance queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the provenance request should be deleted by the client who originally submitted it.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The provenance query details.</param>
        /// <returns>ApiResponse of ProvenanceEntity</returns>
        public ApiResponse< ProvenanceEntity > SubmitProvenanceRequestWithHttpInfo (ProvenanceEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProvenanceApi->SubmitProvenanceRequest");

            var localVarPath = "/provenance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitProvenanceRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProvenanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProvenanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProvenanceEntity)));
        }

        /// <summary>
        /// Submits a provenance query Provenance queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the provenance request should be deleted by the client who originally submitted it.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The provenance query details.</param>
        /// <returns>Task of ProvenanceEntity</returns>
        public async System.Threading.Tasks.Task<ProvenanceEntity> SubmitProvenanceRequestAsync (ProvenanceEntity body)
        {
             ApiResponse<ProvenanceEntity> localVarResponse = await this.SubmitProvenanceRequestAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submits a provenance query Provenance queries may be long running so this endpoint submits a request. The response will include the current state of the query. If the request is not completed the URI in the response can be used at a later time to get the updated state of the query. Once the query has completed the provenance request should be deleted by the client who originally submitted it.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The provenance query details.</param>
        /// <returns>Task of ApiResponse (ProvenanceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProvenanceEntity>> SubmitProvenanceRequestAsyncWithHttpInfo (ProvenanceEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProvenanceApi->SubmitProvenanceRequest");

            var localVarPath = "/provenance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitProvenanceRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProvenanceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProvenanceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProvenanceEntity)));
        }

    }
}
