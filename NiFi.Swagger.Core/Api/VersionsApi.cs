/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Api
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;

    using NiFi.Swagger.Core.Client;
    using NiFi.Swagger.Core.Model;

    using RestSharp;

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVersionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a version control request
        /// </summary>
        /// <remarks>
        /// Creates a request so that a Process Group can be placed under Version Control or have its Version Control configuration changed. Creating this request will prevent any other threads from simultaneously saving local changes to Version Control. It will not, however, actually save the local flow to the Flow Registry. A POST to /versions/process-groups/{id} should be used to initiate saving of the local flow to the Flow Registry. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>string</returns>
        string CreateVersionControlRequest (CreateActiveRequestEntity body);

        /// <summary>
        /// Create a version control request
        /// </summary>
        /// <remarks>
        /// Creates a request so that a Process Group can be placed under Version Control or have its Version Control configuration changed. Creating this request will prevent any other threads from simultaneously saving local changes to Version Control. It will not, however, actually save the local flow to the Flow Registry. A POST to /versions/process-groups/{id} should be used to initiate saving of the local flow to the Flow Registry. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CreateVersionControlRequestWithHttpInfo (CreateActiveRequestEntity body);
        /// <summary>
        /// Deletes the Revert Request with the given ID
        /// </summary>
        /// <remarks>
        /// Deletes the Revert Request with the given ID. After a request is created via a POST to /versions/revert-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Revert process has completed. If the request is deleted before the request completes, then the Revert request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>VersionedFlowUpdateRequestEntity</returns>
        VersionedFlowUpdateRequestEntity DeleteRevertRequest (string id, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes the Revert Request with the given ID
        /// </summary>
        /// <remarks>
        /// Deletes the Revert Request with the given ID. After a request is created via a POST to /versions/revert-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Revert process has completed. If the request is deleted before the request completes, then the Revert request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of VersionedFlowUpdateRequestEntity</returns>
        ApiResponse<VersionedFlowUpdateRequestEntity> DeleteRevertRequestWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Deletes the Update Request with the given ID
        /// </summary>
        /// <remarks>
        /// Deletes the Update Request with the given ID. After a request is created via a POST to /versions/update-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Update process has completed. If the request is deleted before the request completes, then the Update request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>VersionedFlowUpdateRequestEntity</returns>
        VersionedFlowUpdateRequestEntity DeleteUpdateRequest (string id, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes the Update Request with the given ID
        /// </summary>
        /// <remarks>
        /// Deletes the Update Request with the given ID. After a request is created via a POST to /versions/update-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Update process has completed. If the request is deleted before the request completes, then the Update request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of VersionedFlowUpdateRequestEntity</returns>
        ApiResponse<VersionedFlowUpdateRequestEntity> DeleteUpdateRequestWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Deletes the version control request with the given ID
        /// </summary>
        /// <remarks>
        /// Deletes the Version Control Request with the given ID. This will allow other threads to save flows to the Flow Registry. See also the documentation for POSTing to /versions/active-requests for information regarding why this is done. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns></returns>
        void DeleteVersionControlRequest (string id, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes the version control request with the given ID
        /// </summary>
        /// <remarks>
        /// Deletes the Version Control Request with the given ID. This will allow other threads to save flows to the Flow Registry. See also the documentation for POSTing to /versions/active-requests for information regarding why this is done. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVersionControlRequestWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Returns the Revert Request with the given ID
        /// </summary>
        /// <remarks>
        /// Returns the Revert Request with the given ID. Once a Revert Request has been created by performing a POST to /versions/revert-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <returns>VersionedFlowUpdateRequestEntity</returns>
        VersionedFlowUpdateRequestEntity GetRevertRequest (string id);

        /// <summary>
        /// Returns the Revert Request with the given ID
        /// </summary>
        /// <remarks>
        /// Returns the Revert Request with the given ID. Once a Revert Request has been created by performing a POST to /versions/revert-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <returns>ApiResponse of VersionedFlowUpdateRequestEntity</returns>
        ApiResponse<VersionedFlowUpdateRequestEntity> GetRevertRequestWithHttpInfo (string id);
        /// <summary>
        /// Returns the Update Request with the given ID
        /// </summary>
        /// <remarks>
        /// Returns the Update Request with the given ID. Once an Update Request has been created by performing a POST to /versions/update-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <returns>VersionedFlowUpdateRequestEntity</returns>
        VersionedFlowUpdateRequestEntity GetUpdateRequest (string id);

        /// <summary>
        /// Returns the Update Request with the given ID
        /// </summary>
        /// <remarks>
        /// Returns the Update Request with the given ID. Once an Update Request has been created by performing a POST to /versions/update-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <returns>ApiResponse of VersionedFlowUpdateRequestEntity</returns>
        ApiResponse<VersionedFlowUpdateRequestEntity> GetUpdateRequestWithHttpInfo (string id);
        /// <summary>
        /// Gets the Version Control information for a process group
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>VersionControlInformationEntity</returns>
        VersionControlInformationEntity GetVersionInformation (string id);

        /// <summary>
        /// Gets the Version Control information for a process group
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of VersionControlInformationEntity</returns>
        ApiResponse<VersionControlInformationEntity> GetVersionInformationWithHttpInfo (string id);
        /// <summary>
        /// Initiate the Revert Request of a Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// For a Process Group that is already under Version Control, this will initiate the action of reverting any local changes that have been made to the Process Group since it was last synchronized with the Flow Registry. This will result in the flow matching the Versioned Flow that exists in the Flow Registry. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/revert-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/revert-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>VersionedFlowUpdateRequestEntity</returns>
        VersionedFlowUpdateRequestEntity InitiateRevertFlowVersion (string id, VersionControlInformationEntity body);

        /// <summary>
        /// Initiate the Revert Request of a Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// For a Process Group that is already under Version Control, this will initiate the action of reverting any local changes that have been made to the Process Group since it was last synchronized with the Flow Registry. This will result in the flow matching the Versioned Flow that exists in the Flow Registry. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/revert-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/revert-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ApiResponse of VersionedFlowUpdateRequestEntity</returns>
        ApiResponse<VersionedFlowUpdateRequestEntity> InitiateRevertFlowVersionWithHttpInfo (string id, VersionControlInformationEntity body);
        /// <summary>
        /// Initiate the Update Request of a Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// For a Process Group that is already under Version Control, this will initiate the action of changing from a specific version of the flow in the Flow Registry to a different version of the flow. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/update-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/update-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>VersionedFlowUpdateRequestEntity</returns>
        VersionedFlowUpdateRequestEntity InitiateVersionControlUpdate (string id, VersionControlInformationEntity body);

        /// <summary>
        /// Initiate the Update Request of a Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// For a Process Group that is already under Version Control, this will initiate the action of changing from a specific version of the flow in the Flow Registry to a different version of the flow. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/update-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/update-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ApiResponse of VersionedFlowUpdateRequestEntity</returns>
        ApiResponse<VersionedFlowUpdateRequestEntity> InitiateVersionControlUpdateWithHttpInfo (string id, VersionControlInformationEntity body);
        /// <summary>
        /// Save the Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// Begins version controlling the Process Group with the given ID or commits changes to the Versioned Flow, depending on if the provided VersionControlInformation includes a flowId. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>VersionControlInformationEntity</returns>
        VersionControlInformationEntity SaveToFlowRegistry (string id, StartVersionControlRequestEntity body);

        /// <summary>
        /// Save the Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// Begins version controlling the Process Group with the given ID or commits changes to the Versioned Flow, depending on if the provided VersionControlInformation includes a flowId. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>ApiResponse of VersionControlInformationEntity</returns>
        ApiResponse<VersionControlInformationEntity> SaveToFlowRegistryWithHttpInfo (string id, StartVersionControlRequestEntity body);
        /// <summary>
        /// Stops version controlling the Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// Stops version controlling the Process Group with the given ID. The Process Group will no longer track to any Versioned Flow. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The version is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, a new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>VersionControlInformationEntity</returns>
        VersionControlInformationEntity StopVersionControl (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Stops version controlling the Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// Stops version controlling the Process Group with the given ID. The Process Group will no longer track to any Versioned Flow. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The version is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, a new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of VersionControlInformationEntity</returns>
        ApiResponse<VersionControlInformationEntity> StopVersionControlWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Update the version of a Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// For a Process Group that is already under Version Control, this will update the version of the flow to a different version. This endpoint expects that the given snapshot will not modify any Processor that is currently running or any Controller Service that is enabled. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>VersionControlInformationEntity</returns>
        VersionControlInformationEntity UpdateFlowVersion (string id, VersionedFlowSnapshotEntity body);

        /// <summary>
        /// Update the version of a Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// For a Process Group that is already under Version Control, this will update the version of the flow to a different version. This endpoint expects that the given snapshot will not modify any Processor that is currently running or any Controller Service that is enabled. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ApiResponse of VersionControlInformationEntity</returns>
        ApiResponse<VersionControlInformationEntity> UpdateFlowVersionWithHttpInfo (string id, VersionedFlowSnapshotEntity body);
        /// <summary>
        /// Updates the request with the given ID
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="body">The version control component mapping.</param>
        /// <returns>VersionControlInformationEntity</returns>
        VersionControlInformationEntity UpdateVersionControlRequest (string id, VersionControlComponentMappingEntity body);

        /// <summary>
        /// Updates the request with the given ID
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="body">The version control component mapping.</param>
        /// <returns>ApiResponse of VersionControlInformationEntity</returns>
        ApiResponse<VersionControlInformationEntity> UpdateVersionControlRequestWithHttpInfo (string id, VersionControlComponentMappingEntity body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a version control request
        /// </summary>
        /// <remarks>
        /// Creates a request so that a Process Group can be placed under Version Control or have its Version Control configuration changed. Creating this request will prevent any other threads from simultaneously saving local changes to Version Control. It will not, however, actually save the local flow to the Flow Registry. A POST to /versions/process-groups/{id} should be used to initiate saving of the local flow to the Flow Registry. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CreateVersionControlRequestAsync (CreateActiveRequestEntity body);

        /// <summary>
        /// Create a version control request
        /// </summary>
        /// <remarks>
        /// Creates a request so that a Process Group can be placed under Version Control or have its Version Control configuration changed. Creating this request will prevent any other threads from simultaneously saving local changes to Version Control. It will not, however, actually save the local flow to the Flow Registry. A POST to /versions/process-groups/{id} should be used to initiate saving of the local flow to the Flow Registry. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CreateVersionControlRequestAsyncWithHttpInfo (CreateActiveRequestEntity body);
        /// <summary>
        /// Deletes the Revert Request with the given ID
        /// </summary>
        /// <remarks>
        /// Deletes the Revert Request with the given ID. After a request is created via a POST to /versions/revert-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Revert process has completed. If the request is deleted before the request completes, then the Revert request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of VersionedFlowUpdateRequestEntity</returns>
        System.Threading.Tasks.Task<VersionedFlowUpdateRequestEntity> DeleteRevertRequestAsync (string id, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes the Revert Request with the given ID
        /// </summary>
        /// <remarks>
        /// Deletes the Revert Request with the given ID. After a request is created via a POST to /versions/revert-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Revert process has completed. If the request is deleted before the request completes, then the Revert request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (VersionedFlowUpdateRequestEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionedFlowUpdateRequestEntity>> DeleteRevertRequestAsyncWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Deletes the Update Request with the given ID
        /// </summary>
        /// <remarks>
        /// Deletes the Update Request with the given ID. After a request is created via a POST to /versions/update-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Update process has completed. If the request is deleted before the request completes, then the Update request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of VersionedFlowUpdateRequestEntity</returns>
        System.Threading.Tasks.Task<VersionedFlowUpdateRequestEntity> DeleteUpdateRequestAsync (string id, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes the Update Request with the given ID
        /// </summary>
        /// <remarks>
        /// Deletes the Update Request with the given ID. After a request is created via a POST to /versions/update-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Update process has completed. If the request is deleted before the request completes, then the Update request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (VersionedFlowUpdateRequestEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionedFlowUpdateRequestEntity>> DeleteUpdateRequestAsyncWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Deletes the version control request with the given ID
        /// </summary>
        /// <remarks>
        /// Deletes the Version Control Request with the given ID. This will allow other threads to save flows to the Flow Registry. See also the documentation for POSTing to /versions/active-requests for information regarding why this is done. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVersionControlRequestAsync (string id, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes the version control request with the given ID
        /// </summary>
        /// <remarks>
        /// Deletes the Version Control Request with the given ID. This will allow other threads to save flows to the Flow Registry. See also the documentation for POSTing to /versions/active-requests for information regarding why this is done. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVersionControlRequestAsyncWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Returns the Revert Request with the given ID
        /// </summary>
        /// <remarks>
        /// Returns the Revert Request with the given ID. Once a Revert Request has been created by performing a POST to /versions/revert-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <returns>Task of VersionedFlowUpdateRequestEntity</returns>
        System.Threading.Tasks.Task<VersionedFlowUpdateRequestEntity> GetRevertRequestAsync (string id);

        /// <summary>
        /// Returns the Revert Request with the given ID
        /// </summary>
        /// <remarks>
        /// Returns the Revert Request with the given ID. Once a Revert Request has been created by performing a POST to /versions/revert-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <returns>Task of ApiResponse (VersionedFlowUpdateRequestEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionedFlowUpdateRequestEntity>> GetRevertRequestAsyncWithHttpInfo (string id);
        /// <summary>
        /// Returns the Update Request with the given ID
        /// </summary>
        /// <remarks>
        /// Returns the Update Request with the given ID. Once an Update Request has been created by performing a POST to /versions/update-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <returns>Task of VersionedFlowUpdateRequestEntity</returns>
        System.Threading.Tasks.Task<VersionedFlowUpdateRequestEntity> GetUpdateRequestAsync (string id);

        /// <summary>
        /// Returns the Update Request with the given ID
        /// </summary>
        /// <remarks>
        /// Returns the Update Request with the given ID. Once an Update Request has been created by performing a POST to /versions/update-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <returns>Task of ApiResponse (VersionedFlowUpdateRequestEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionedFlowUpdateRequestEntity>> GetUpdateRequestAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets the Version Control information for a process group
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of VersionControlInformationEntity</returns>
        System.Threading.Tasks.Task<VersionControlInformationEntity> GetVersionInformationAsync (string id);

        /// <summary>
        /// Gets the Version Control information for a process group
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (VersionControlInformationEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionControlInformationEntity>> GetVersionInformationAsyncWithHttpInfo (string id);
        /// <summary>
        /// Initiate the Revert Request of a Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// For a Process Group that is already under Version Control, this will initiate the action of reverting any local changes that have been made to the Process Group since it was last synchronized with the Flow Registry. This will result in the flow matching the Versioned Flow that exists in the Flow Registry. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/revert-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/revert-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of VersionedFlowUpdateRequestEntity</returns>
        System.Threading.Tasks.Task<VersionedFlowUpdateRequestEntity> InitiateRevertFlowVersionAsync (string id, VersionControlInformationEntity body);

        /// <summary>
        /// Initiate the Revert Request of a Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// For a Process Group that is already under Version Control, this will initiate the action of reverting any local changes that have been made to the Process Group since it was last synchronized with the Flow Registry. This will result in the flow matching the Versioned Flow that exists in the Flow Registry. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/revert-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/revert-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ApiResponse (VersionedFlowUpdateRequestEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionedFlowUpdateRequestEntity>> InitiateRevertFlowVersionAsyncWithHttpInfo (string id, VersionControlInformationEntity body);
        /// <summary>
        /// Initiate the Update Request of a Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// For a Process Group that is already under Version Control, this will initiate the action of changing from a specific version of the flow in the Flow Registry to a different version of the flow. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/update-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/update-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of VersionedFlowUpdateRequestEntity</returns>
        System.Threading.Tasks.Task<VersionedFlowUpdateRequestEntity> InitiateVersionControlUpdateAsync (string id, VersionControlInformationEntity body);

        /// <summary>
        /// Initiate the Update Request of a Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// For a Process Group that is already under Version Control, this will initiate the action of changing from a specific version of the flow in the Flow Registry to a different version of the flow. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/update-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/update-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ApiResponse (VersionedFlowUpdateRequestEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionedFlowUpdateRequestEntity>> InitiateVersionControlUpdateAsyncWithHttpInfo (string id, VersionControlInformationEntity body);
        /// <summary>
        /// Save the Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// Begins version controlling the Process Group with the given ID or commits changes to the Versioned Flow, depending on if the provided VersionControlInformation includes a flowId. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>Task of VersionControlInformationEntity</returns>
        System.Threading.Tasks.Task<VersionControlInformationEntity> SaveToFlowRegistryAsync (string id, StartVersionControlRequestEntity body);

        /// <summary>
        /// Save the Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// Begins version controlling the Process Group with the given ID or commits changes to the Versioned Flow, depending on if the provided VersionControlInformation includes a flowId. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>Task of ApiResponse (VersionControlInformationEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionControlInformationEntity>> SaveToFlowRegistryAsyncWithHttpInfo (string id, StartVersionControlRequestEntity body);
        /// <summary>
        /// Stops version controlling the Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// Stops version controlling the Process Group with the given ID. The Process Group will no longer track to any Versioned Flow. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The version is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, a new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of VersionControlInformationEntity</returns>
        System.Threading.Tasks.Task<VersionControlInformationEntity> StopVersionControlAsync (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Stops version controlling the Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// Stops version controlling the Process Group with the given ID. The Process Group will no longer track to any Versioned Flow. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The version is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, a new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (VersionControlInformationEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionControlInformationEntity>> StopVersionControlAsyncWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Update the version of a Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// For a Process Group that is already under Version Control, this will update the version of the flow to a different version. This endpoint expects that the given snapshot will not modify any Processor that is currently running or any Controller Service that is enabled. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of VersionControlInformationEntity</returns>
        System.Threading.Tasks.Task<VersionControlInformationEntity> UpdateFlowVersionAsync (string id, VersionedFlowSnapshotEntity body);

        /// <summary>
        /// Update the version of a Process Group with the given ID
        /// </summary>
        /// <remarks>
        /// For a Process Group that is already under Version Control, this will update the version of the flow to a different version. This endpoint expects that the given snapshot will not modify any Processor that is currently running or any Controller Service that is enabled. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ApiResponse (VersionControlInformationEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionControlInformationEntity>> UpdateFlowVersionAsyncWithHttpInfo (string id, VersionedFlowSnapshotEntity body);
        /// <summary>
        /// Updates the request with the given ID
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="body">The version control component mapping.</param>
        /// <returns>Task of VersionControlInformationEntity</returns>
        System.Threading.Tasks.Task<VersionControlInformationEntity> UpdateVersionControlRequestAsync (string id, VersionControlComponentMappingEntity body);

        /// <summary>
        /// Updates the request with the given ID
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="body">The version control component mapping.</param>
        /// <returns>Task of ApiResponse (VersionControlInformationEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VersionControlInformationEntity>> UpdateVersionControlRequestAsyncWithHttpInfo (string id, VersionControlComponentMappingEntity body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VersionsApi : IVersionsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VersionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VersionsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VersionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VersionsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this._exceptionFactory != null && this._exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return this._exceptionFactory;
            }
            set { this._exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a version control request Creates a request so that a Process Group can be placed under Version Control or have its Version Control configuration changed. Creating this request will prevent any other threads from simultaneously saving local changes to Version Control. It will not, however, actually save the local flow to the Flow Registry. A POST to /versions/process-groups/{id} should be used to initiate saving of the local flow to the Flow Registry. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>string</returns>
        public string CreateVersionControlRequest (CreateActiveRequestEntity body)
        {
             ApiResponse<string> localVarResponse = this.CreateVersionControlRequestWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a version control request Creates a request so that a Process Group can be placed under Version Control or have its Version Control configuration changed. Creating this request will prevent any other threads from simultaneously saving local changes to Version Control. It will not, however, actually save the local flow to the Flow Registry. A POST to /versions/process-groups/{id} should be used to initiate saving of the local flow to the Flow Registry. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CreateVersionControlRequestWithHttpInfo (CreateActiveRequestEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VersionsApi->CreateVersionControlRequest");

            var localVarPath = "/versions/active-requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateVersionControlRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create a version control request Creates a request so that a Process Group can be placed under Version Control or have its Version Control configuration changed. Creating this request will prevent any other threads from simultaneously saving local changes to Version Control. It will not, however, actually save the local flow to the Flow Registry. A POST to /versions/process-groups/{id} should be used to initiate saving of the local flow to the Flow Registry. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CreateVersionControlRequestAsync (CreateActiveRequestEntity body)
        {
             ApiResponse<string> localVarResponse = await this.CreateVersionControlRequestAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a version control request Creates a request so that a Process Group can be placed under Version Control or have its Version Control configuration changed. Creating this request will prevent any other threads from simultaneously saving local changes to Version Control. It will not, however, actually save the local flow to the Flow Registry. A POST to /versions/process-groups/{id} should be used to initiate saving of the local flow to the Flow Registry. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CreateVersionControlRequestAsyncWithHttpInfo (CreateActiveRequestEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VersionsApi->CreateVersionControlRequest");

            var localVarPath = "/versions/active-requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateVersionControlRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Deletes the Revert Request with the given ID Deletes the Revert Request with the given ID. After a request is created via a POST to /versions/revert-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Revert process has completed. If the request is deleted before the request completes, then the Revert request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>VersionedFlowUpdateRequestEntity</returns>
        public VersionedFlowUpdateRequestEntity DeleteRevertRequest (string id, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<VersionedFlowUpdateRequestEntity> localVarResponse = this.DeleteRevertRequestWithHttpInfo(id, disconnectedNodeAcknowledged);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the Revert Request with the given ID Deletes the Revert Request with the given ID. After a request is created via a POST to /versions/revert-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Revert process has completed. If the request is deleted before the request completes, then the Revert request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of VersionedFlowUpdateRequestEntity</returns>
        public ApiResponse< VersionedFlowUpdateRequestEntity > DeleteRevertRequestWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->DeleteRevertRequest");

            var localVarPath = "/versions/revert-requests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteRevertRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowUpdateRequestEntity)));
        }

        /// <summary>
        /// Deletes the Revert Request with the given ID Deletes the Revert Request with the given ID. After a request is created via a POST to /versions/revert-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Revert process has completed. If the request is deleted before the request completes, then the Revert request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of VersionedFlowUpdateRequestEntity</returns>
        public async System.Threading.Tasks.Task<VersionedFlowUpdateRequestEntity> DeleteRevertRequestAsync (string id, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<VersionedFlowUpdateRequestEntity> localVarResponse = await this.DeleteRevertRequestAsyncWithHttpInfo(id, disconnectedNodeAcknowledged);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the Revert Request with the given ID Deletes the Revert Request with the given ID. After a request is created via a POST to /versions/revert-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Revert process has completed. If the request is deleted before the request completes, then the Revert request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (VersionedFlowUpdateRequestEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VersionedFlowUpdateRequestEntity>> DeleteRevertRequestAsyncWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->DeleteRevertRequest");

            var localVarPath = "/versions/revert-requests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteRevertRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowUpdateRequestEntity)));
        }

        /// <summary>
        /// Deletes the Update Request with the given ID Deletes the Update Request with the given ID. After a request is created via a POST to /versions/update-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Update process has completed. If the request is deleted before the request completes, then the Update request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>VersionedFlowUpdateRequestEntity</returns>
        public VersionedFlowUpdateRequestEntity DeleteUpdateRequest (string id, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<VersionedFlowUpdateRequestEntity> localVarResponse = this.DeleteUpdateRequestWithHttpInfo(id, disconnectedNodeAcknowledged);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the Update Request with the given ID Deletes the Update Request with the given ID. After a request is created via a POST to /versions/update-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Update process has completed. If the request is deleted before the request completes, then the Update request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of VersionedFlowUpdateRequestEntity</returns>
        public ApiResponse< VersionedFlowUpdateRequestEntity > DeleteUpdateRequestWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->DeleteUpdateRequest");

            var localVarPath = "/versions/update-requests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteUpdateRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowUpdateRequestEntity)));
        }

        /// <summary>
        /// Deletes the Update Request with the given ID Deletes the Update Request with the given ID. After a request is created via a POST to /versions/update-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Update process has completed. If the request is deleted before the request completes, then the Update request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of VersionedFlowUpdateRequestEntity</returns>
        public async System.Threading.Tasks.Task<VersionedFlowUpdateRequestEntity> DeleteUpdateRequestAsync (string id, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<VersionedFlowUpdateRequestEntity> localVarResponse = await this.DeleteUpdateRequestAsyncWithHttpInfo(id, disconnectedNodeAcknowledged);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the Update Request with the given ID Deletes the Update Request with the given ID. After a request is created via a POST to /versions/update-requests/process-groups/{id}, it is expected that the client will properly clean up the request by DELETE&#39;ing it, once the Update process has completed. If the request is deleted before the request completes, then the Update request will finish the step that it is currently performing and then will cancel any subsequent steps. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (VersionedFlowUpdateRequestEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VersionedFlowUpdateRequestEntity>> DeleteUpdateRequestAsyncWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->DeleteUpdateRequest");

            var localVarPath = "/versions/update-requests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteUpdateRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowUpdateRequestEntity)));
        }

        /// <summary>
        /// Deletes the version control request with the given ID Deletes the Version Control Request with the given ID. This will allow other threads to save flows to the Flow Registry. See also the documentation for POSTing to /versions/active-requests for information regarding why this is done. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteVersionControlRequest (string id, bool? disconnectedNodeAcknowledged = null)
        {
             this.DeleteVersionControlRequestWithHttpInfo(id, disconnectedNodeAcknowledged);
        }

        /// <summary>
        /// Deletes the version control request with the given ID Deletes the Version Control Request with the given ID. This will allow other threads to save flows to the Flow Registry. See also the documentation for POSTing to /versions/active-requests for information regarding why this is done. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteVersionControlRequestWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->DeleteVersionControlRequest");

            var localVarPath = "/versions/active-requests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteVersionControlRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the version control request with the given ID Deletes the Version Control Request with the given ID. This will allow other threads to save flows to the Flow Registry. See also the documentation for POSTing to /versions/active-requests for information regarding why this is done. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVersionControlRequestAsync (string id, bool? disconnectedNodeAcknowledged = null)
        {
             await this.DeleteVersionControlRequestAsyncWithHttpInfo(id, disconnectedNodeAcknowledged);

        }

        /// <summary>
        /// Deletes the version control request with the given ID Deletes the Version Control Request with the given ID. This will allow other threads to save flows to the Flow Registry. See also the documentation for POSTing to /versions/active-requests for information regarding why this is done. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVersionControlRequestAsyncWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->DeleteVersionControlRequest");

            var localVarPath = "/versions/active-requests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteVersionControlRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns the Revert Request with the given ID Returns the Revert Request with the given ID. Once a Revert Request has been created by performing a POST to /versions/revert-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <returns>VersionedFlowUpdateRequestEntity</returns>
        public VersionedFlowUpdateRequestEntity GetRevertRequest (string id)
        {
             ApiResponse<VersionedFlowUpdateRequestEntity> localVarResponse = this.GetRevertRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Revert Request with the given ID Returns the Revert Request with the given ID. Once a Revert Request has been created by performing a POST to /versions/revert-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <returns>ApiResponse of VersionedFlowUpdateRequestEntity</returns>
        public ApiResponse< VersionedFlowUpdateRequestEntity > GetRevertRequestWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->GetRevertRequest");

            var localVarPath = "/versions/revert-requests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRevertRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowUpdateRequestEntity)));
        }

        /// <summary>
        /// Returns the Revert Request with the given ID Returns the Revert Request with the given ID. Once a Revert Request has been created by performing a POST to /versions/revert-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <returns>Task of VersionedFlowUpdateRequestEntity</returns>
        public async System.Threading.Tasks.Task<VersionedFlowUpdateRequestEntity> GetRevertRequestAsync (string id)
        {
             ApiResponse<VersionedFlowUpdateRequestEntity> localVarResponse = await this.GetRevertRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Revert Request with the given ID Returns the Revert Request with the given ID. Once a Revert Request has been created by performing a POST to /versions/revert-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Revert Request</param>
        /// <returns>Task of ApiResponse (VersionedFlowUpdateRequestEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VersionedFlowUpdateRequestEntity>> GetRevertRequestAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->GetRevertRequest");

            var localVarPath = "/versions/revert-requests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRevertRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowUpdateRequestEntity)));
        }

        /// <summary>
        /// Returns the Update Request with the given ID Returns the Update Request with the given ID. Once an Update Request has been created by performing a POST to /versions/update-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <returns>VersionedFlowUpdateRequestEntity</returns>
        public VersionedFlowUpdateRequestEntity GetUpdateRequest (string id)
        {
             ApiResponse<VersionedFlowUpdateRequestEntity> localVarResponse = this.GetUpdateRequestWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Update Request with the given ID Returns the Update Request with the given ID. Once an Update Request has been created by performing a POST to /versions/update-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <returns>ApiResponse of VersionedFlowUpdateRequestEntity</returns>
        public ApiResponse< VersionedFlowUpdateRequestEntity > GetUpdateRequestWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->GetUpdateRequest");

            var localVarPath = "/versions/update-requests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetUpdateRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowUpdateRequestEntity)));
        }

        /// <summary>
        /// Returns the Update Request with the given ID Returns the Update Request with the given ID. Once an Update Request has been created by performing a POST to /versions/update-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <returns>Task of VersionedFlowUpdateRequestEntity</returns>
        public async System.Threading.Tasks.Task<VersionedFlowUpdateRequestEntity> GetUpdateRequestAsync (string id)
        {
             ApiResponse<VersionedFlowUpdateRequestEntity> localVarResponse = await this.GetUpdateRequestAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Update Request with the given ID Returns the Update Request with the given ID. Once an Update Request has been created by performing a POST to /versions/update-requests/process-groups/{id}, that request can subsequently be retrieved via this endpoint, and the request that is fetched will contain the updated state, such as percent complete, the current state of the request, and any failures. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the Update Request</param>
        /// <returns>Task of ApiResponse (VersionedFlowUpdateRequestEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VersionedFlowUpdateRequestEntity>> GetUpdateRequestAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->GetUpdateRequest");

            var localVarPath = "/versions/update-requests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetUpdateRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowUpdateRequestEntity)));
        }

        /// <summary>
        /// Gets the Version Control information for a process group Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>VersionControlInformationEntity</returns>
        public VersionControlInformationEntity GetVersionInformation (string id)
        {
             ApiResponse<VersionControlInformationEntity> localVarResponse = this.GetVersionInformationWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the Version Control information for a process group Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of VersionControlInformationEntity</returns>
        public ApiResponse< VersionControlInformationEntity > GetVersionInformationWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->GetVersionInformation");

            var localVarPath = "/versions/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetVersionInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionControlInformationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionControlInformationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionControlInformationEntity)));
        }

        /// <summary>
        /// Gets the Version Control information for a process group Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of VersionControlInformationEntity</returns>
        public async System.Threading.Tasks.Task<VersionControlInformationEntity> GetVersionInformationAsync (string id)
        {
             ApiResponse<VersionControlInformationEntity> localVarResponse = await this.GetVersionInformationAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the Version Control information for a process group Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (VersionControlInformationEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VersionControlInformationEntity>> GetVersionInformationAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->GetVersionInformation");

            var localVarPath = "/versions/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetVersionInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionControlInformationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionControlInformationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionControlInformationEntity)));
        }

        /// <summary>
        /// Initiate the Revert Request of a Process Group with the given ID For a Process Group that is already under Version Control, this will initiate the action of reverting any local changes that have been made to the Process Group since it was last synchronized with the Flow Registry. This will result in the flow matching the Versioned Flow that exists in the Flow Registry. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/revert-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/revert-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>VersionedFlowUpdateRequestEntity</returns>
        public VersionedFlowUpdateRequestEntity InitiateRevertFlowVersion (string id, VersionControlInformationEntity body)
        {
             ApiResponse<VersionedFlowUpdateRequestEntity> localVarResponse = this.InitiateRevertFlowVersionWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate the Revert Request of a Process Group with the given ID For a Process Group that is already under Version Control, this will initiate the action of reverting any local changes that have been made to the Process Group since it was last synchronized with the Flow Registry. This will result in the flow matching the Versioned Flow that exists in the Flow Registry. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/revert-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/revert-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ApiResponse of VersionedFlowUpdateRequestEntity</returns>
        public ApiResponse< VersionedFlowUpdateRequestEntity > InitiateRevertFlowVersionWithHttpInfo (string id, VersionControlInformationEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->InitiateRevertFlowVersion");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VersionsApi->InitiateRevertFlowVersion");

            var localVarPath = "/versions/revert-requests/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("InitiateRevertFlowVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowUpdateRequestEntity)));
        }

        /// <summary>
        /// Initiate the Revert Request of a Process Group with the given ID For a Process Group that is already under Version Control, this will initiate the action of reverting any local changes that have been made to the Process Group since it was last synchronized with the Flow Registry. This will result in the flow matching the Versioned Flow that exists in the Flow Registry. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/revert-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/revert-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of VersionedFlowUpdateRequestEntity</returns>
        public async System.Threading.Tasks.Task<VersionedFlowUpdateRequestEntity> InitiateRevertFlowVersionAsync (string id, VersionControlInformationEntity body)
        {
             ApiResponse<VersionedFlowUpdateRequestEntity> localVarResponse = await this.InitiateRevertFlowVersionAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate the Revert Request of a Process Group with the given ID For a Process Group that is already under Version Control, this will initiate the action of reverting any local changes that have been made to the Process Group since it was last synchronized with the Flow Registry. This will result in the flow matching the Versioned Flow that exists in the Flow Registry. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/revert-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/revert-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ApiResponse (VersionedFlowUpdateRequestEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VersionedFlowUpdateRequestEntity>> InitiateRevertFlowVersionAsyncWithHttpInfo (string id, VersionControlInformationEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->InitiateRevertFlowVersion");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VersionsApi->InitiateRevertFlowVersion");

            var localVarPath = "/versions/revert-requests/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("InitiateRevertFlowVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowUpdateRequestEntity)));
        }

        /// <summary>
        /// Initiate the Update Request of a Process Group with the given ID For a Process Group that is already under Version Control, this will initiate the action of changing from a specific version of the flow in the Flow Registry to a different version of the flow. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/update-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/update-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>VersionedFlowUpdateRequestEntity</returns>
        public VersionedFlowUpdateRequestEntity InitiateVersionControlUpdate (string id, VersionControlInformationEntity body)
        {
             ApiResponse<VersionedFlowUpdateRequestEntity> localVarResponse = this.InitiateVersionControlUpdateWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate the Update Request of a Process Group with the given ID For a Process Group that is already under Version Control, this will initiate the action of changing from a specific version of the flow in the Flow Registry to a different version of the flow. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/update-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/update-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ApiResponse of VersionedFlowUpdateRequestEntity</returns>
        public ApiResponse< VersionedFlowUpdateRequestEntity > InitiateVersionControlUpdateWithHttpInfo (string id, VersionControlInformationEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->InitiateVersionControlUpdate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VersionsApi->InitiateVersionControlUpdate");

            var localVarPath = "/versions/update-requests/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("InitiateVersionControlUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowUpdateRequestEntity)));
        }

        /// <summary>
        /// Initiate the Update Request of a Process Group with the given ID For a Process Group that is already under Version Control, this will initiate the action of changing from a specific version of the flow in the Flow Registry to a different version of the flow. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/update-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/update-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of VersionedFlowUpdateRequestEntity</returns>
        public async System.Threading.Tasks.Task<VersionedFlowUpdateRequestEntity> InitiateVersionControlUpdateAsync (string id, VersionControlInformationEntity body)
        {
             ApiResponse<VersionedFlowUpdateRequestEntity> localVarResponse = await this.InitiateVersionControlUpdateAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate the Update Request of a Process Group with the given ID For a Process Group that is already under Version Control, this will initiate the action of changing from a specific version of the flow in the Flow Registry to a different version of the flow. This can be a lengthy process, as it will stop any Processors and disable any Controller Services necessary to perform the action and then restart them. As a result, the endpoint will immediately return a VersionedFlowUpdateRequestEntity, and the process of updating the flow will occur asynchronously in the background. The client may then periodically poll the status of the request by issuing a GET request to /versions/update-requests/{requestId}. Once the request is completed, the client is expected to issue a DELETE request to /versions/update-requests/{requestId}. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ApiResponse (VersionedFlowUpdateRequestEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VersionedFlowUpdateRequestEntity>> InitiateVersionControlUpdateAsyncWithHttpInfo (string id, VersionControlInformationEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->InitiateVersionControlUpdate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VersionsApi->InitiateVersionControlUpdate");

            var localVarPath = "/versions/update-requests/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("InitiateVersionControlUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionedFlowUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionedFlowUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionedFlowUpdateRequestEntity)));
        }

        /// <summary>
        /// Save the Process Group with the given ID Begins version controlling the Process Group with the given ID or commits changes to the Versioned Flow, depending on if the provided VersionControlInformation includes a flowId. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>VersionControlInformationEntity</returns>
        public VersionControlInformationEntity SaveToFlowRegistry (string id, StartVersionControlRequestEntity body)
        {
             ApiResponse<VersionControlInformationEntity> localVarResponse = this.SaveToFlowRegistryWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Save the Process Group with the given ID Begins version controlling the Process Group with the given ID or commits changes to the Versioned Flow, depending on if the provided VersionControlInformation includes a flowId. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>ApiResponse of VersionControlInformationEntity</returns>
        public ApiResponse< VersionControlInformationEntity > SaveToFlowRegistryWithHttpInfo (string id, StartVersionControlRequestEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->SaveToFlowRegistry");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VersionsApi->SaveToFlowRegistry");

            var localVarPath = "/versions/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveToFlowRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionControlInformationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionControlInformationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionControlInformationEntity)));
        }

        /// <summary>
        /// Save the Process Group with the given ID Begins version controlling the Process Group with the given ID or commits changes to the Versioned Flow, depending on if the provided VersionControlInformation includes a flowId. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>Task of VersionControlInformationEntity</returns>
        public async System.Threading.Tasks.Task<VersionControlInformationEntity> SaveToFlowRegistryAsync (string id, StartVersionControlRequestEntity body)
        {
             ApiResponse<VersionControlInformationEntity> localVarResponse = await this.SaveToFlowRegistryAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Save the Process Group with the given ID Begins version controlling the Process Group with the given ID or commits changes to the Versioned Flow, depending on if the provided VersionControlInformation includes a flowId. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The versioned flow details.</param>
        /// <returns>Task of ApiResponse (VersionControlInformationEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VersionControlInformationEntity>> SaveToFlowRegistryAsyncWithHttpInfo (string id, StartVersionControlRequestEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->SaveToFlowRegistry");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VersionsApi->SaveToFlowRegistry");

            var localVarPath = "/versions/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SaveToFlowRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionControlInformationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionControlInformationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionControlInformationEntity)));
        }

        /// <summary>
        /// Stops version controlling the Process Group with the given ID Stops version controlling the Process Group with the given ID. The Process Group will no longer track to any Versioned Flow. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The version is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, a new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>VersionControlInformationEntity</returns>
        public VersionControlInformationEntity StopVersionControl (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<VersionControlInformationEntity> localVarResponse = this.StopVersionControlWithHttpInfo(id, version, clientId, disconnectedNodeAcknowledged);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stops version controlling the Process Group with the given ID Stops version controlling the Process Group with the given ID. The Process Group will no longer track to any Versioned Flow. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The version is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, a new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of VersionControlInformationEntity</returns>
        public ApiResponse< VersionControlInformationEntity > StopVersionControlWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->StopVersionControl");

            var localVarPath = "/versions/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clientId", clientId)); // query parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("StopVersionControl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionControlInformationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionControlInformationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionControlInformationEntity)));
        }

        /// <summary>
        /// Stops version controlling the Process Group with the given ID Stops version controlling the Process Group with the given ID. The Process Group will no longer track to any Versioned Flow. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The version is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, a new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of VersionControlInformationEntity</returns>
        public async System.Threading.Tasks.Task<VersionControlInformationEntity> StopVersionControlAsync (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<VersionControlInformationEntity> localVarResponse = await this.StopVersionControlAsyncWithHttpInfo(id, version, clientId, disconnectedNodeAcknowledged);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stops version controlling the Process Group with the given ID Stops version controlling the Process Group with the given ID. The Process Group will no longer track to any Versioned Flow. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The version is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, a new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (VersionControlInformationEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VersionControlInformationEntity>> StopVersionControlAsyncWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->StopVersionControl");

            var localVarPath = "/versions/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clientId", clientId)); // query parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("StopVersionControl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionControlInformationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionControlInformationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionControlInformationEntity)));
        }

        /// <summary>
        /// Update the version of a Process Group with the given ID For a Process Group that is already under Version Control, this will update the version of the flow to a different version. This endpoint expects that the given snapshot will not modify any Processor that is currently running or any Controller Service that is enabled. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>VersionControlInformationEntity</returns>
        public VersionControlInformationEntity UpdateFlowVersion (string id, VersionedFlowSnapshotEntity body)
        {
             ApiResponse<VersionControlInformationEntity> localVarResponse = this.UpdateFlowVersionWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the version of a Process Group with the given ID For a Process Group that is already under Version Control, this will update the version of the flow to a different version. This endpoint expects that the given snapshot will not modify any Processor that is currently running or any Controller Service that is enabled. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ApiResponse of VersionControlInformationEntity</returns>
        public ApiResponse< VersionControlInformationEntity > UpdateFlowVersionWithHttpInfo (string id, VersionedFlowSnapshotEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->UpdateFlowVersion");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VersionsApi->UpdateFlowVersion");

            var localVarPath = "/versions/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateFlowVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionControlInformationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionControlInformationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionControlInformationEntity)));
        }

        /// <summary>
        /// Update the version of a Process Group with the given ID For a Process Group that is already under Version Control, this will update the version of the flow to a different version. This endpoint expects that the given snapshot will not modify any Processor that is currently running or any Controller Service that is enabled. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of VersionControlInformationEntity</returns>
        public async System.Threading.Tasks.Task<VersionControlInformationEntity> UpdateFlowVersionAsync (string id, VersionedFlowSnapshotEntity body)
        {
             ApiResponse<VersionControlInformationEntity> localVarResponse = await this.UpdateFlowVersionAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the version of a Process Group with the given ID For a Process Group that is already under Version Control, this will update the version of the flow to a different version. This endpoint expects that the given snapshot will not modify any Processor that is currently running or any Controller Service that is enabled. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ApiResponse (VersionControlInformationEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VersionControlInformationEntity>> UpdateFlowVersionAsyncWithHttpInfo (string id, VersionedFlowSnapshotEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->UpdateFlowVersion");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VersionsApi->UpdateFlowVersion");

            var localVarPath = "/versions/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateFlowVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionControlInformationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionControlInformationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionControlInformationEntity)));
        }

        /// <summary>
        /// Updates the request with the given ID Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="body">The version control component mapping.</param>
        /// <returns>VersionControlInformationEntity</returns>
        public VersionControlInformationEntity UpdateVersionControlRequest (string id, VersionControlComponentMappingEntity body)
        {
             ApiResponse<VersionControlInformationEntity> localVarResponse = this.UpdateVersionControlRequestWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the request with the given ID Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="body">The version control component mapping.</param>
        /// <returns>ApiResponse of VersionControlInformationEntity</returns>
        public ApiResponse< VersionControlInformationEntity > UpdateVersionControlRequestWithHttpInfo (string id, VersionControlComponentMappingEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->UpdateVersionControlRequest");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VersionsApi->UpdateVersionControlRequest");

            var localVarPath = "/versions/active-requests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateVersionControlRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionControlInformationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionControlInformationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionControlInformationEntity)));
        }

        /// <summary>
        /// Updates the request with the given ID Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="body">The version control component mapping.</param>
        /// <returns>Task of VersionControlInformationEntity</returns>
        public async System.Threading.Tasks.Task<VersionControlInformationEntity> UpdateVersionControlRequestAsync (string id, VersionControlComponentMappingEntity body)
        {
             ApiResponse<VersionControlInformationEntity> localVarResponse = await this.UpdateVersionControlRequestAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the request with the given ID Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The request ID.</param>
        /// <param name="body">The version control component mapping.</param>
        /// <returns>Task of ApiResponse (VersionControlInformationEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VersionControlInformationEntity>> UpdateVersionControlRequestAsyncWithHttpInfo (string id, VersionControlComponentMappingEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VersionsApi->UpdateVersionControlRequest");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VersionsApi->UpdateVersionControlRequest");

            var localVarPath = "/versions/active-requests/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateVersionControlRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VersionControlInformationEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VersionControlInformationEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VersionControlInformationEntity)));
        }

    }
}
