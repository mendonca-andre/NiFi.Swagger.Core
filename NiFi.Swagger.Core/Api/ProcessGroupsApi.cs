/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Api
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;

    using NiFi.Swagger.Core.Client;
    using NiFi.Swagger.Core.Model;

    using RestSharp;

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProcessGroupsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Copies a snippet and discards it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The copy snippet request.</param>
        /// <returns>FlowEntity</returns>
        FlowEntity CopySnippet (string id, CopySnippetRequestEntity body);

        /// <summary>
        /// Copies a snippet and discards it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The copy snippet request.</param>
        /// <returns>ApiResponse of FlowEntity</returns>
        ApiResponse<FlowEntity> CopySnippetWithHttpInfo (string id, CopySnippetRequestEntity body);
        /// <summary>
        /// Creates a connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The connection configuration details.</param>
        /// <returns>ConnectionEntity</returns>
        ConnectionEntity CreateConnection (string id, ConnectionEntity body);

        /// <summary>
        /// Creates a connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The connection configuration details.</param>
        /// <returns>ApiResponse of ConnectionEntity</returns>
        ApiResponse<ConnectionEntity> CreateConnectionWithHttpInfo (string id, ConnectionEntity body);
        /// <summary>
        /// Creates a new controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ControllerServiceEntity</returns>
        ControllerServiceEntity CreateControllerService (string id, ControllerServiceEntity body);

        /// <summary>
        /// Creates a new controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ApiResponse of ControllerServiceEntity</returns>
        ApiResponse<ControllerServiceEntity> CreateControllerServiceWithHttpInfo (string id, ControllerServiceEntity body);
        /// <summary>
        /// Creates a funnel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The funnel configuration details.</param>
        /// <returns>FunnelEntity</returns>
        FunnelEntity CreateFunnel (string id, FunnelEntity body);

        /// <summary>
        /// Creates a funnel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The funnel configuration details.</param>
        /// <returns>ApiResponse of FunnelEntity</returns>
        ApiResponse<FunnelEntity> CreateFunnelWithHttpInfo (string id, FunnelEntity body);
        /// <summary>
        /// Creates an input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The input port configuration details.</param>
        /// <returns>PortEntity</returns>
        PortEntity CreateInputPort (string id, PortEntity body);

        /// <summary>
        /// Creates an input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The input port configuration details.</param>
        /// <returns>ApiResponse of PortEntity</returns>
        ApiResponse<PortEntity> CreateInputPortWithHttpInfo (string id, PortEntity body);
        /// <summary>
        /// Creates a label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The label configuration details.</param>
        /// <returns>LabelEntity</returns>
        LabelEntity CreateLabel (string id, LabelEntity body);

        /// <summary>
        /// Creates a label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The label configuration details.</param>
        /// <returns>ApiResponse of LabelEntity</returns>
        ApiResponse<LabelEntity> CreateLabelWithHttpInfo (string id, LabelEntity body);
        /// <summary>
        /// Creates an output port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The output port configuration.</param>
        /// <returns>PortEntity</returns>
        PortEntity CreateOutputPort (string id, PortEntity body);

        /// <summary>
        /// Creates an output port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The output port configuration.</param>
        /// <returns>ApiResponse of PortEntity</returns>
        ApiResponse<PortEntity> CreateOutputPortWithHttpInfo (string id, PortEntity body);
        /// <summary>
        /// Creates a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>ProcessGroupEntity</returns>
        ProcessGroupEntity CreateProcessGroup (string id, ProcessGroupEntity body);

        /// <summary>
        /// Creates a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>ApiResponse of ProcessGroupEntity</returns>
        ApiResponse<ProcessGroupEntity> CreateProcessGroupWithHttpInfo (string id, ProcessGroupEntity body);
        /// <summary>
        /// Creates a new processor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The processor configuration details.</param>
        /// <returns>ProcessorEntity</returns>
        ProcessorEntity CreateProcessor (string id, ProcessorEntity body);

        /// <summary>
        /// Creates a new processor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The processor configuration details.</param>
        /// <returns>ApiResponse of ProcessorEntity</returns>
        ApiResponse<ProcessorEntity> CreateProcessorWithHttpInfo (string id, ProcessorEntity body);
        /// <summary>
        /// Creates a new process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The remote process group configuration details.</param>
        /// <returns>RemoteProcessGroupEntity</returns>
        RemoteProcessGroupEntity CreateRemoteProcessGroup (string id, RemoteProcessGroupEntity body);

        /// <summary>
        /// Creates a new process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The remote process group configuration details.</param>
        /// <returns>ApiResponse of RemoteProcessGroupEntity</returns>
        ApiResponse<RemoteProcessGroupEntity> CreateRemoteProcessGroupWithHttpInfo (string id, RemoteProcessGroupEntity body);
        /// <summary>
        /// Creates a template and discards the specified snippet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The create template request.</param>
        /// <returns>TemplateEntity</returns>
        TemplateEntity CreateTemplate (string id, CreateTemplateRequestEntity body);

        /// <summary>
        /// Creates a template and discards the specified snippet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The create template request.</param>
        /// <returns>ApiResponse of TemplateEntity</returns>
        ApiResponse<TemplateEntity> CreateTemplateWithHttpInfo (string id, CreateTemplateRequestEntity body);
        /// <summary>
        /// Deletes an update request for a process group&#39;s variable registry. If the request is not yet complete, it will automatically be cancelled.
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>VariableRegistryUpdateRequestEntity</returns>
        VariableRegistryUpdateRequestEntity DeleteVariableRegistryUpdateRequest (string groupId, string updateId, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes an update request for a process group&#39;s variable registry. If the request is not yet complete, it will automatically be cancelled.
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of VariableRegistryUpdateRequestEntity</returns>
        ApiResponse<VariableRegistryUpdateRequestEntity> DeleteVariableRegistryUpdateRequestWithHttpInfo (string groupId, string updateId, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Gets all connections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ConnectionsEntity</returns>
        ConnectionsEntity GetConnections (string id);

        /// <summary>
        /// Gets all connections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of ConnectionsEntity</returns>
        ApiResponse<ConnectionsEntity> GetConnectionsWithHttpInfo (string id);
        /// <summary>
        /// Gets all funnels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>FunnelsEntity</returns>
        FunnelsEntity GetFunnels (string id);

        /// <summary>
        /// Gets all funnels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of FunnelsEntity</returns>
        ApiResponse<FunnelsEntity> GetFunnelsWithHttpInfo (string id);
        /// <summary>
        /// Gets all input ports
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>InputPortsEntity</returns>
        InputPortsEntity GetInputPorts (string id);

        /// <summary>
        /// Gets all input ports
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of InputPortsEntity</returns>
        ApiResponse<InputPortsEntity> GetInputPortsWithHttpInfo (string id);
        /// <summary>
        /// Gets all labels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>LabelsEntity</returns>
        LabelsEntity GetLabels (string id);

        /// <summary>
        /// Gets all labels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of LabelsEntity</returns>
        ApiResponse<LabelsEntity> GetLabelsWithHttpInfo (string id);
        /// <summary>
        /// Gets a list of local modifications to the Process Group since it was last synchronized with the Flow Registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>FlowComparisonEntity</returns>
        FlowComparisonEntity GetLocalModifications (string id);

        /// <summary>
        /// Gets a list of local modifications to the Process Group since it was last synchronized with the Flow Registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of FlowComparisonEntity</returns>
        ApiResponse<FlowComparisonEntity> GetLocalModificationsWithHttpInfo (string id);
        /// <summary>
        /// Gets all output ports
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>OutputPortsEntity</returns>
        OutputPortsEntity GetOutputPorts (string id);

        /// <summary>
        /// Gets all output ports
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of OutputPortsEntity</returns>
        ApiResponse<OutputPortsEntity> GetOutputPortsWithHttpInfo (string id);
        /// <summary>
        /// Gets a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ProcessGroupEntity</returns>
        ProcessGroupEntity GetProcessGroup (string id);

        /// <summary>
        /// Gets a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of ProcessGroupEntity</returns>
        ApiResponse<ProcessGroupEntity> GetProcessGroupWithHttpInfo (string id);
        /// <summary>
        /// Gets all process groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ProcessGroupsEntity</returns>
        ProcessGroupsEntity GetProcessGroups (string id);

        /// <summary>
        /// Gets all process groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of ProcessGroupsEntity</returns>
        ApiResponse<ProcessGroupsEntity> GetProcessGroupsWithHttpInfo (string id);
        /// <summary>
        /// Gets all processors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeDescendantGroups">Whether or not to include processors from descendant process groups (optional, default to false)</param>
        /// <returns>ProcessorsEntity</returns>
        ProcessorsEntity GetProcessors (string id, bool? includeDescendantGroups = null);

        /// <summary>
        /// Gets all processors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeDescendantGroups">Whether or not to include processors from descendant process groups (optional, default to false)</param>
        /// <returns>ApiResponse of ProcessorsEntity</returns>
        ApiResponse<ProcessorsEntity> GetProcessorsWithHttpInfo (string id, bool? includeDescendantGroups = null);
        /// <summary>
        /// Gets all remote process groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>RemoteProcessGroupsEntity</returns>
        RemoteProcessGroupsEntity GetRemoteProcessGroups (string id);

        /// <summary>
        /// Gets all remote process groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of RemoteProcessGroupsEntity</returns>
        ApiResponse<RemoteProcessGroupsEntity> GetRemoteProcessGroupsWithHttpInfo (string id);
        /// <summary>
        /// Gets a process group&#39;s variable registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include ancestor groups (optional, default to true)</param>
        /// <returns>VariableRegistryEntity</returns>
        VariableRegistryEntity GetVariableRegistry (string id, bool? includeAncestorGroups = null);

        /// <summary>
        /// Gets a process group&#39;s variable registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include ancestor groups (optional, default to true)</param>
        /// <returns>ApiResponse of VariableRegistryEntity</returns>
        ApiResponse<VariableRegistryEntity> GetVariableRegistryWithHttpInfo (string id, bool? includeAncestorGroups = null);
        /// <summary>
        /// Gets a process group&#39;s variable registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <returns>VariableRegistryUpdateRequestEntity</returns>
        VariableRegistryUpdateRequestEntity GetVariableRegistryUpdateRequest (string groupId, string updateId);

        /// <summary>
        /// Gets a process group&#39;s variable registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <returns>ApiResponse of VariableRegistryUpdateRequestEntity</returns>
        ApiResponse<VariableRegistryUpdateRequestEntity> GetVariableRegistryUpdateRequestWithHttpInfo (string groupId, string updateId);
        /// <summary>
        /// Imports a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>TemplateEntity</returns>
        TemplateEntity ImportTemplate (string id);

        /// <summary>
        /// Imports a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of TemplateEntity</returns>
        ApiResponse<TemplateEntity> ImportTemplateWithHttpInfo (string id);
        /// <summary>
        /// Instantiates a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The instantiate template request.</param>
        /// <returns>FlowEntity</returns>
        FlowEntity InstantiateTemplate (string id, InstantiateTemplateRequestEntity body);

        /// <summary>
        /// Instantiates a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The instantiate template request.</param>
        /// <returns>ApiResponse of FlowEntity</returns>
        ApiResponse<FlowEntity> InstantiateTemplateWithHttpInfo (string id, InstantiateTemplateRequestEntity body);
        /// <summary>
        /// Deletes a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ProcessGroupEntity</returns>
        ProcessGroupEntity RemoveProcessGroup (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of ProcessGroupEntity</returns>
        ApiResponse<ProcessGroupEntity> RemoveProcessGroupWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Submits a request to update a process group&#39;s variable registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>VariableRegistryUpdateRequestEntity</returns>
        VariableRegistryUpdateRequestEntity SubmitUpdateVariableRegistryRequest (string id, VariableRegistryEntity body);

        /// <summary>
        /// Submits a request to update a process group&#39;s variable registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>ApiResponse of VariableRegistryUpdateRequestEntity</returns>
        ApiResponse<VariableRegistryUpdateRequestEntity> SubmitUpdateVariableRegistryRequestWithHttpInfo (string id, VariableRegistryEntity body);
        /// <summary>
        /// Updates a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>ProcessGroupEntity</returns>
        ProcessGroupEntity UpdateProcessGroup (string id, ProcessGroupEntity body);

        /// <summary>
        /// Updates a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>ApiResponse of ProcessGroupEntity</returns>
        ApiResponse<ProcessGroupEntity> UpdateProcessGroupWithHttpInfo (string id, ProcessGroupEntity body);
        /// <summary>
        /// Updates the contents of a Process Group&#39;s variable Registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>VariableRegistryEntity</returns>
        VariableRegistryEntity UpdateVariableRegistry (string id, VariableRegistryEntity body);

        /// <summary>
        /// Updates the contents of a Process Group&#39;s variable Registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>ApiResponse of VariableRegistryEntity</returns>
        ApiResponse<VariableRegistryEntity> UpdateVariableRegistryWithHttpInfo (string id, VariableRegistryEntity body);
        /// <summary>
        /// Uploads a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="template">The binary content of the template file being uploaded.</param>
        /// <param name="body">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional)</param>
        /// <returns>TemplateEntity</returns>
        TemplateEntity UploadTemplate (string id, System.IO.Stream template, bool? body = null);

        /// <summary>
        /// Uploads a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="template">The binary content of the template file being uploaded.</param>
        /// <param name="body">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional)</param>
        /// <returns>ApiResponse of TemplateEntity</returns>
        ApiResponse<TemplateEntity> UploadTemplateWithHttpInfo (string id, System.IO.Stream template, bool? body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Copies a snippet and discards it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The copy snippet request.</param>
        /// <returns>Task of FlowEntity</returns>
        System.Threading.Tasks.Task<FlowEntity> CopySnippetAsync (string id, CopySnippetRequestEntity body);

        /// <summary>
        /// Copies a snippet and discards it.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The copy snippet request.</param>
        /// <returns>Task of ApiResponse (FlowEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowEntity>> CopySnippetAsyncWithHttpInfo (string id, CopySnippetRequestEntity body);
        /// <summary>
        /// Creates a connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The connection configuration details.</param>
        /// <returns>Task of ConnectionEntity</returns>
        System.Threading.Tasks.Task<ConnectionEntity> CreateConnectionAsync (string id, ConnectionEntity body);

        /// <summary>
        /// Creates a connection
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The connection configuration details.</param>
        /// <returns>Task of ApiResponse (ConnectionEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectionEntity>> CreateConnectionAsyncWithHttpInfo (string id, ConnectionEntity body);
        /// <summary>
        /// Creates a new controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ControllerServiceEntity</returns>
        System.Threading.Tasks.Task<ControllerServiceEntity> CreateControllerServiceAsync (string id, ControllerServiceEntity body);

        /// <summary>
        /// Creates a new controller service
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ApiResponse (ControllerServiceEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ControllerServiceEntity>> CreateControllerServiceAsyncWithHttpInfo (string id, ControllerServiceEntity body);
        /// <summary>
        /// Creates a funnel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The funnel configuration details.</param>
        /// <returns>Task of FunnelEntity</returns>
        System.Threading.Tasks.Task<FunnelEntity> CreateFunnelAsync (string id, FunnelEntity body);

        /// <summary>
        /// Creates a funnel
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The funnel configuration details.</param>
        /// <returns>Task of ApiResponse (FunnelEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<FunnelEntity>> CreateFunnelAsyncWithHttpInfo (string id, FunnelEntity body);
        /// <summary>
        /// Creates an input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The input port configuration details.</param>
        /// <returns>Task of PortEntity</returns>
        System.Threading.Tasks.Task<PortEntity> CreateInputPortAsync (string id, PortEntity body);

        /// <summary>
        /// Creates an input port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The input port configuration details.</param>
        /// <returns>Task of ApiResponse (PortEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortEntity>> CreateInputPortAsyncWithHttpInfo (string id, PortEntity body);
        /// <summary>
        /// Creates a label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The label configuration details.</param>
        /// <returns>Task of LabelEntity</returns>
        System.Threading.Tasks.Task<LabelEntity> CreateLabelAsync (string id, LabelEntity body);

        /// <summary>
        /// Creates a label
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The label configuration details.</param>
        /// <returns>Task of ApiResponse (LabelEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<LabelEntity>> CreateLabelAsyncWithHttpInfo (string id, LabelEntity body);
        /// <summary>
        /// Creates an output port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The output port configuration.</param>
        /// <returns>Task of PortEntity</returns>
        System.Threading.Tasks.Task<PortEntity> CreateOutputPortAsync (string id, PortEntity body);

        /// <summary>
        /// Creates an output port
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The output port configuration.</param>
        /// <returns>Task of ApiResponse (PortEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortEntity>> CreateOutputPortAsyncWithHttpInfo (string id, PortEntity body);
        /// <summary>
        /// Creates a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>Task of ProcessGroupEntity</returns>
        System.Threading.Tasks.Task<ProcessGroupEntity> CreateProcessGroupAsync (string id, ProcessGroupEntity body);

        /// <summary>
        /// Creates a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>Task of ApiResponse (ProcessGroupEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessGroupEntity>> CreateProcessGroupAsyncWithHttpInfo (string id, ProcessGroupEntity body);
        /// <summary>
        /// Creates a new processor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The processor configuration details.</param>
        /// <returns>Task of ProcessorEntity</returns>
        System.Threading.Tasks.Task<ProcessorEntity> CreateProcessorAsync (string id, ProcessorEntity body);

        /// <summary>
        /// Creates a new processor
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The processor configuration details.</param>
        /// <returns>Task of ApiResponse (ProcessorEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessorEntity>> CreateProcessorAsyncWithHttpInfo (string id, ProcessorEntity body);
        /// <summary>
        /// Creates a new process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The remote process group configuration details.</param>
        /// <returns>Task of RemoteProcessGroupEntity</returns>
        System.Threading.Tasks.Task<RemoteProcessGroupEntity> CreateRemoteProcessGroupAsync (string id, RemoteProcessGroupEntity body);

        /// <summary>
        /// Creates a new process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The remote process group configuration details.</param>
        /// <returns>Task of ApiResponse (RemoteProcessGroupEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoteProcessGroupEntity>> CreateRemoteProcessGroupAsyncWithHttpInfo (string id, RemoteProcessGroupEntity body);
        /// <summary>
        /// Creates a template and discards the specified snippet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The create template request.</param>
        /// <returns>Task of TemplateEntity</returns>
        System.Threading.Tasks.Task<TemplateEntity> CreateTemplateAsync (string id, CreateTemplateRequestEntity body);

        /// <summary>
        /// Creates a template and discards the specified snippet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The create template request.</param>
        /// <returns>Task of ApiResponse (TemplateEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateEntity>> CreateTemplateAsyncWithHttpInfo (string id, CreateTemplateRequestEntity body);
        /// <summary>
        /// Deletes an update request for a process group&#39;s variable registry. If the request is not yet complete, it will automatically be cancelled.
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of VariableRegistryUpdateRequestEntity</returns>
        System.Threading.Tasks.Task<VariableRegistryUpdateRequestEntity> DeleteVariableRegistryUpdateRequestAsync (string groupId, string updateId, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes an update request for a process group&#39;s variable registry. If the request is not yet complete, it will automatically be cancelled.
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (VariableRegistryUpdateRequestEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableRegistryUpdateRequestEntity>> DeleteVariableRegistryUpdateRequestAsyncWithHttpInfo (string groupId, string updateId, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Gets all connections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ConnectionsEntity</returns>
        System.Threading.Tasks.Task<ConnectionsEntity> GetConnectionsAsync (string id);

        /// <summary>
        /// Gets all connections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (ConnectionsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectionsEntity>> GetConnectionsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets all funnels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of FunnelsEntity</returns>
        System.Threading.Tasks.Task<FunnelsEntity> GetFunnelsAsync (string id);

        /// <summary>
        /// Gets all funnels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (FunnelsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<FunnelsEntity>> GetFunnelsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets all input ports
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of InputPortsEntity</returns>
        System.Threading.Tasks.Task<InputPortsEntity> GetInputPortsAsync (string id);

        /// <summary>
        /// Gets all input ports
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (InputPortsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<InputPortsEntity>> GetInputPortsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets all labels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of LabelsEntity</returns>
        System.Threading.Tasks.Task<LabelsEntity> GetLabelsAsync (string id);

        /// <summary>
        /// Gets all labels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (LabelsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<LabelsEntity>> GetLabelsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets a list of local modifications to the Process Group since it was last synchronized with the Flow Registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of FlowComparisonEntity</returns>
        System.Threading.Tasks.Task<FlowComparisonEntity> GetLocalModificationsAsync (string id);

        /// <summary>
        /// Gets a list of local modifications to the Process Group since it was last synchronized with the Flow Registry
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (FlowComparisonEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowComparisonEntity>> GetLocalModificationsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets all output ports
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of OutputPortsEntity</returns>
        System.Threading.Tasks.Task<OutputPortsEntity> GetOutputPortsAsync (string id);

        /// <summary>
        /// Gets all output ports
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (OutputPortsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutputPortsEntity>> GetOutputPortsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ProcessGroupEntity</returns>
        System.Threading.Tasks.Task<ProcessGroupEntity> GetProcessGroupAsync (string id);

        /// <summary>
        /// Gets a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (ProcessGroupEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessGroupEntity>> GetProcessGroupAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets all process groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ProcessGroupsEntity</returns>
        System.Threading.Tasks.Task<ProcessGroupsEntity> GetProcessGroupsAsync (string id);

        /// <summary>
        /// Gets all process groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (ProcessGroupsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessGroupsEntity>> GetProcessGroupsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets all processors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeDescendantGroups">Whether or not to include processors from descendant process groups (optional, default to false)</param>
        /// <returns>Task of ProcessorsEntity</returns>
        System.Threading.Tasks.Task<ProcessorsEntity> GetProcessorsAsync (string id, bool? includeDescendantGroups = null);

        /// <summary>
        /// Gets all processors
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeDescendantGroups">Whether or not to include processors from descendant process groups (optional, default to false)</param>
        /// <returns>Task of ApiResponse (ProcessorsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessorsEntity>> GetProcessorsAsyncWithHttpInfo (string id, bool? includeDescendantGroups = null);
        /// <summary>
        /// Gets all remote process groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of RemoteProcessGroupsEntity</returns>
        System.Threading.Tasks.Task<RemoteProcessGroupsEntity> GetRemoteProcessGroupsAsync (string id);

        /// <summary>
        /// Gets all remote process groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (RemoteProcessGroupsEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoteProcessGroupsEntity>> GetRemoteProcessGroupsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets a process group&#39;s variable registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include ancestor groups (optional, default to true)</param>
        /// <returns>Task of VariableRegistryEntity</returns>
        System.Threading.Tasks.Task<VariableRegistryEntity> GetVariableRegistryAsync (string id, bool? includeAncestorGroups = null);

        /// <summary>
        /// Gets a process group&#39;s variable registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include ancestor groups (optional, default to true)</param>
        /// <returns>Task of ApiResponse (VariableRegistryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableRegistryEntity>> GetVariableRegistryAsyncWithHttpInfo (string id, bool? includeAncestorGroups = null);
        /// <summary>
        /// Gets a process group&#39;s variable registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <returns>Task of VariableRegistryUpdateRequestEntity</returns>
        System.Threading.Tasks.Task<VariableRegistryUpdateRequestEntity> GetVariableRegistryUpdateRequestAsync (string groupId, string updateId);

        /// <summary>
        /// Gets a process group&#39;s variable registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <returns>Task of ApiResponse (VariableRegistryUpdateRequestEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableRegistryUpdateRequestEntity>> GetVariableRegistryUpdateRequestAsyncWithHttpInfo (string groupId, string updateId);
        /// <summary>
        /// Imports a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of TemplateEntity</returns>
        System.Threading.Tasks.Task<TemplateEntity> ImportTemplateAsync (string id);

        /// <summary>
        /// Imports a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (TemplateEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateEntity>> ImportTemplateAsyncWithHttpInfo (string id);
        /// <summary>
        /// Instantiates a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The instantiate template request.</param>
        /// <returns>Task of FlowEntity</returns>
        System.Threading.Tasks.Task<FlowEntity> InstantiateTemplateAsync (string id, InstantiateTemplateRequestEntity body);

        /// <summary>
        /// Instantiates a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The instantiate template request.</param>
        /// <returns>Task of ApiResponse (FlowEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<FlowEntity>> InstantiateTemplateAsyncWithHttpInfo (string id, InstantiateTemplateRequestEntity body);
        /// <summary>
        /// Deletes a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ProcessGroupEntity</returns>
        System.Threading.Tasks.Task<ProcessGroupEntity> RemoveProcessGroupAsync (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (ProcessGroupEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessGroupEntity>> RemoveProcessGroupAsyncWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Submits a request to update a process group&#39;s variable registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>Task of VariableRegistryUpdateRequestEntity</returns>
        System.Threading.Tasks.Task<VariableRegistryUpdateRequestEntity> SubmitUpdateVariableRegistryRequestAsync (string id, VariableRegistryEntity body);

        /// <summary>
        /// Submits a request to update a process group&#39;s variable registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>Task of ApiResponse (VariableRegistryUpdateRequestEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableRegistryUpdateRequestEntity>> SubmitUpdateVariableRegistryRequestAsyncWithHttpInfo (string id, VariableRegistryEntity body);
        /// <summary>
        /// Updates a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>Task of ProcessGroupEntity</returns>
        System.Threading.Tasks.Task<ProcessGroupEntity> UpdateProcessGroupAsync (string id, ProcessGroupEntity body);

        /// <summary>
        /// Updates a process group
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>Task of ApiResponse (ProcessGroupEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProcessGroupEntity>> UpdateProcessGroupAsyncWithHttpInfo (string id, ProcessGroupEntity body);
        /// <summary>
        /// Updates the contents of a Process Group&#39;s variable Registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>Task of VariableRegistryEntity</returns>
        System.Threading.Tasks.Task<VariableRegistryEntity> UpdateVariableRegistryAsync (string id, VariableRegistryEntity body);

        /// <summary>
        /// Updates the contents of a Process Group&#39;s variable Registry
        /// </summary>
        /// <remarks>
        /// Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>Task of ApiResponse (VariableRegistryEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<VariableRegistryEntity>> UpdateVariableRegistryAsyncWithHttpInfo (string id, VariableRegistryEntity body);
        /// <summary>
        /// Uploads a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="template">The binary content of the template file being uploaded.</param>
        /// <param name="body">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional)</param>
        /// <returns>Task of TemplateEntity</returns>
        System.Threading.Tasks.Task<TemplateEntity> UploadTemplateAsync (string id, System.IO.Stream template, bool? body = null);

        /// <summary>
        /// Uploads a template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="template">The binary content of the template file being uploaded.</param>
        /// <param name="body">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional)</param>
        /// <returns>Task of ApiResponse (TemplateEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateEntity>> UploadTemplateAsyncWithHttpInfo (string id, System.IO.Stream template, bool? body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProcessGroupsApi : IProcessGroupsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProcessGroupsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProcessGroupsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this._exceptionFactory != null && this._exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return this._exceptionFactory;
            }
            set { this._exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Copies a snippet and discards it. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The copy snippet request.</param>
        /// <returns>FlowEntity</returns>
        public FlowEntity CopySnippet (string id, CopySnippetRequestEntity body)
        {
             ApiResponse<FlowEntity> localVarResponse = this.CopySnippetWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copies a snippet and discards it. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The copy snippet request.</param>
        /// <returns>ApiResponse of FlowEntity</returns>
        public ApiResponse< FlowEntity > CopySnippetWithHttpInfo (string id, CopySnippetRequestEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CopySnippet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CopySnippet");

            var localVarPath = "/process-groups/{id}/snippet-instance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CopySnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowEntity)));
        }

        /// <summary>
        /// Copies a snippet and discards it. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The copy snippet request.</param>
        /// <returns>Task of FlowEntity</returns>
        public async System.Threading.Tasks.Task<FlowEntity> CopySnippetAsync (string id, CopySnippetRequestEntity body)
        {
             ApiResponse<FlowEntity> localVarResponse = await this.CopySnippetAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copies a snippet and discards it. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The copy snippet request.</param>
        /// <returns>Task of ApiResponse (FlowEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowEntity>> CopySnippetAsyncWithHttpInfo (string id, CopySnippetRequestEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CopySnippet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CopySnippet");

            var localVarPath = "/process-groups/{id}/snippet-instance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CopySnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowEntity)));
        }

        /// <summary>
        /// Creates a connection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The connection configuration details.</param>
        /// <returns>ConnectionEntity</returns>
        public ConnectionEntity CreateConnection (string id, ConnectionEntity body)
        {
             ApiResponse<ConnectionEntity> localVarResponse = this.CreateConnectionWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a connection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The connection configuration details.</param>
        /// <returns>ApiResponse of ConnectionEntity</returns>
        public ApiResponse< ConnectionEntity > CreateConnectionWithHttpInfo (string id, ConnectionEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateConnection");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateConnection");

            var localVarPath = "/process-groups/{id}/connections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectionEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectionEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectionEntity)));
        }

        /// <summary>
        /// Creates a connection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The connection configuration details.</param>
        /// <returns>Task of ConnectionEntity</returns>
        public async System.Threading.Tasks.Task<ConnectionEntity> CreateConnectionAsync (string id, ConnectionEntity body)
        {
             ApiResponse<ConnectionEntity> localVarResponse = await this.CreateConnectionAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a connection 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The connection configuration details.</param>
        /// <returns>Task of ApiResponse (ConnectionEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectionEntity>> CreateConnectionAsyncWithHttpInfo (string id, ConnectionEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateConnection");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateConnection");

            var localVarPath = "/process-groups/{id}/connections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectionEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectionEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectionEntity)));
        }

        /// <summary>
        /// Creates a new controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ControllerServiceEntity</returns>
        public ControllerServiceEntity CreateControllerService (string id, ControllerServiceEntity body)
        {
             ApiResponse<ControllerServiceEntity> localVarResponse = this.CreateControllerServiceWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>ApiResponse of ControllerServiceEntity</returns>
        public ApiResponse< ControllerServiceEntity > CreateControllerServiceWithHttpInfo (string id, ControllerServiceEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateControllerService");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateControllerService");

            var localVarPath = "/process-groups/{id}/controller-services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateControllerService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceEntity)));
        }

        /// <summary>
        /// Creates a new controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ControllerServiceEntity</returns>
        public async System.Threading.Tasks.Task<ControllerServiceEntity> CreateControllerServiceAsync (string id, ControllerServiceEntity body)
        {
             ApiResponse<ControllerServiceEntity> localVarResponse = await this.CreateControllerServiceAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new controller service 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The controller service configuration details.</param>
        /// <returns>Task of ApiResponse (ControllerServiceEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ControllerServiceEntity>> CreateControllerServiceAsyncWithHttpInfo (string id, ControllerServiceEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateControllerService");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateControllerService");

            var localVarPath = "/process-groups/{id}/controller-services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateControllerService", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ControllerServiceEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ControllerServiceEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ControllerServiceEntity)));
        }

        /// <summary>
        /// Creates a funnel 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The funnel configuration details.</param>
        /// <returns>FunnelEntity</returns>
        public FunnelEntity CreateFunnel (string id, FunnelEntity body)
        {
             ApiResponse<FunnelEntity> localVarResponse = this.CreateFunnelWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a funnel 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The funnel configuration details.</param>
        /// <returns>ApiResponse of FunnelEntity</returns>
        public ApiResponse< FunnelEntity > CreateFunnelWithHttpInfo (string id, FunnelEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateFunnel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateFunnel");

            var localVarPath = "/process-groups/{id}/funnels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateFunnel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FunnelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FunnelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FunnelEntity)));
        }

        /// <summary>
        /// Creates a funnel 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The funnel configuration details.</param>
        /// <returns>Task of FunnelEntity</returns>
        public async System.Threading.Tasks.Task<FunnelEntity> CreateFunnelAsync (string id, FunnelEntity body)
        {
             ApiResponse<FunnelEntity> localVarResponse = await this.CreateFunnelAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a funnel 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The funnel configuration details.</param>
        /// <returns>Task of ApiResponse (FunnelEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FunnelEntity>> CreateFunnelAsyncWithHttpInfo (string id, FunnelEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateFunnel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateFunnel");

            var localVarPath = "/process-groups/{id}/funnels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateFunnel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FunnelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FunnelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FunnelEntity)));
        }

        /// <summary>
        /// Creates an input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The input port configuration details.</param>
        /// <returns>PortEntity</returns>
        public PortEntity CreateInputPort (string id, PortEntity body)
        {
             ApiResponse<PortEntity> localVarResponse = this.CreateInputPortWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The input port configuration details.</param>
        /// <returns>ApiResponse of PortEntity</returns>
        public ApiResponse< PortEntity > CreateInputPortWithHttpInfo (string id, PortEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateInputPort");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateInputPort");

            var localVarPath = "/process-groups/{id}/input-ports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateInputPort", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortEntity)));
        }

        /// <summary>
        /// Creates an input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The input port configuration details.</param>
        /// <returns>Task of PortEntity</returns>
        public async System.Threading.Tasks.Task<PortEntity> CreateInputPortAsync (string id, PortEntity body)
        {
             ApiResponse<PortEntity> localVarResponse = await this.CreateInputPortAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an input port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The input port configuration details.</param>
        /// <returns>Task of ApiResponse (PortEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortEntity>> CreateInputPortAsyncWithHttpInfo (string id, PortEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateInputPort");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateInputPort");

            var localVarPath = "/process-groups/{id}/input-ports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateInputPort", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortEntity)));
        }

        /// <summary>
        /// Creates a label 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The label configuration details.</param>
        /// <returns>LabelEntity</returns>
        public LabelEntity CreateLabel (string id, LabelEntity body)
        {
             ApiResponse<LabelEntity> localVarResponse = this.CreateLabelWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a label 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The label configuration details.</param>
        /// <returns>ApiResponse of LabelEntity</returns>
        public ApiResponse< LabelEntity > CreateLabelWithHttpInfo (string id, LabelEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateLabel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateLabel");

            var localVarPath = "/process-groups/{id}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateLabel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelEntity)));
        }

        /// <summary>
        /// Creates a label 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The label configuration details.</param>
        /// <returns>Task of LabelEntity</returns>
        public async System.Threading.Tasks.Task<LabelEntity> CreateLabelAsync (string id, LabelEntity body)
        {
             ApiResponse<LabelEntity> localVarResponse = await this.CreateLabelAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a label 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The label configuration details.</param>
        /// <returns>Task of ApiResponse (LabelEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LabelEntity>> CreateLabelAsyncWithHttpInfo (string id, LabelEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateLabel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateLabel");

            var localVarPath = "/process-groups/{id}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateLabel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelEntity)));
        }

        /// <summary>
        /// Creates an output port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The output port configuration.</param>
        /// <returns>PortEntity</returns>
        public PortEntity CreateOutputPort (string id, PortEntity body)
        {
             ApiResponse<PortEntity> localVarResponse = this.CreateOutputPortWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an output port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The output port configuration.</param>
        /// <returns>ApiResponse of PortEntity</returns>
        public ApiResponse< PortEntity > CreateOutputPortWithHttpInfo (string id, PortEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateOutputPort");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateOutputPort");

            var localVarPath = "/process-groups/{id}/output-ports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateOutputPort", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortEntity)));
        }

        /// <summary>
        /// Creates an output port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The output port configuration.</param>
        /// <returns>Task of PortEntity</returns>
        public async System.Threading.Tasks.Task<PortEntity> CreateOutputPortAsync (string id, PortEntity body)
        {
             ApiResponse<PortEntity> localVarResponse = await this.CreateOutputPortAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates an output port 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The output port configuration.</param>
        /// <returns>Task of ApiResponse (PortEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortEntity>> CreateOutputPortAsyncWithHttpInfo (string id, PortEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateOutputPort");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateOutputPort");

            var localVarPath = "/process-groups/{id}/output-ports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateOutputPort", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortEntity)));
        }

        /// <summary>
        /// Creates a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>ProcessGroupEntity</returns>
        public ProcessGroupEntity CreateProcessGroup (string id, ProcessGroupEntity body)
        {
             ApiResponse<ProcessGroupEntity> localVarResponse = this.CreateProcessGroupWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>ApiResponse of ProcessGroupEntity</returns>
        public ApiResponse< ProcessGroupEntity > CreateProcessGroupWithHttpInfo (string id, ProcessGroupEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateProcessGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateProcessGroup");

            var localVarPath = "/process-groups/{id}/process-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateProcessGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessGroupEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessGroupEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessGroupEntity)));
        }

        /// <summary>
        /// Creates a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>Task of ProcessGroupEntity</returns>
        public async System.Threading.Tasks.Task<ProcessGroupEntity> CreateProcessGroupAsync (string id, ProcessGroupEntity body)
        {
             ApiResponse<ProcessGroupEntity> localVarResponse = await this.CreateProcessGroupAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>Task of ApiResponse (ProcessGroupEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessGroupEntity>> CreateProcessGroupAsyncWithHttpInfo (string id, ProcessGroupEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateProcessGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateProcessGroup");

            var localVarPath = "/process-groups/{id}/process-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateProcessGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessGroupEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessGroupEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessGroupEntity)));
        }

        /// <summary>
        /// Creates a new processor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The processor configuration details.</param>
        /// <returns>ProcessorEntity</returns>
        public ProcessorEntity CreateProcessor (string id, ProcessorEntity body)
        {
             ApiResponse<ProcessorEntity> localVarResponse = this.CreateProcessorWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new processor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The processor configuration details.</param>
        /// <returns>ApiResponse of ProcessorEntity</returns>
        public ApiResponse< ProcessorEntity > CreateProcessorWithHttpInfo (string id, ProcessorEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateProcessor");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateProcessor");

            var localVarPath = "/process-groups/{id}/processors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateProcessor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessorEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessorEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessorEntity)));
        }

        /// <summary>
        /// Creates a new processor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The processor configuration details.</param>
        /// <returns>Task of ProcessorEntity</returns>
        public async System.Threading.Tasks.Task<ProcessorEntity> CreateProcessorAsync (string id, ProcessorEntity body)
        {
             ApiResponse<ProcessorEntity> localVarResponse = await this.CreateProcessorAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new processor 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The processor configuration details.</param>
        /// <returns>Task of ApiResponse (ProcessorEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessorEntity>> CreateProcessorAsyncWithHttpInfo (string id, ProcessorEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateProcessor");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateProcessor");

            var localVarPath = "/process-groups/{id}/processors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateProcessor", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessorEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessorEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessorEntity)));
        }

        /// <summary>
        /// Creates a new process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The remote process group configuration details.</param>
        /// <returns>RemoteProcessGroupEntity</returns>
        public RemoteProcessGroupEntity CreateRemoteProcessGroup (string id, RemoteProcessGroupEntity body)
        {
             ApiResponse<RemoteProcessGroupEntity> localVarResponse = this.CreateRemoteProcessGroupWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The remote process group configuration details.</param>
        /// <returns>ApiResponse of RemoteProcessGroupEntity</returns>
        public ApiResponse< RemoteProcessGroupEntity > CreateRemoteProcessGroupWithHttpInfo (string id, RemoteProcessGroupEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateRemoteProcessGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateRemoteProcessGroup");

            var localVarPath = "/process-groups/{id}/remote-process-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateRemoteProcessGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteProcessGroupEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteProcessGroupEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteProcessGroupEntity)));
        }

        /// <summary>
        /// Creates a new process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The remote process group configuration details.</param>
        /// <returns>Task of RemoteProcessGroupEntity</returns>
        public async System.Threading.Tasks.Task<RemoteProcessGroupEntity> CreateRemoteProcessGroupAsync (string id, RemoteProcessGroupEntity body)
        {
             ApiResponse<RemoteProcessGroupEntity> localVarResponse = await this.CreateRemoteProcessGroupAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The remote process group configuration details.</param>
        /// <returns>Task of ApiResponse (RemoteProcessGroupEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoteProcessGroupEntity>> CreateRemoteProcessGroupAsyncWithHttpInfo (string id, RemoteProcessGroupEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateRemoteProcessGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateRemoteProcessGroup");

            var localVarPath = "/process-groups/{id}/remote-process-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateRemoteProcessGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteProcessGroupEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteProcessGroupEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteProcessGroupEntity)));
        }

        /// <summary>
        /// Creates a template and discards the specified snippet. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The create template request.</param>
        /// <returns>TemplateEntity</returns>
        public TemplateEntity CreateTemplate (string id, CreateTemplateRequestEntity body)
        {
             ApiResponse<TemplateEntity> localVarResponse = this.CreateTemplateWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a template and discards the specified snippet. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The create template request.</param>
        /// <returns>ApiResponse of TemplateEntity</returns>
        public ApiResponse< TemplateEntity > CreateTemplateWithHttpInfo (string id, CreateTemplateRequestEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateTemplate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateTemplate");

            var localVarPath = "/process-groups/{id}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateEntity)));
        }

        /// <summary>
        /// Creates a template and discards the specified snippet. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The create template request.</param>
        /// <returns>Task of TemplateEntity</returns>
        public async System.Threading.Tasks.Task<TemplateEntity> CreateTemplateAsync (string id, CreateTemplateRequestEntity body)
        {
             ApiResponse<TemplateEntity> localVarResponse = await this.CreateTemplateAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a template and discards the specified snippet. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The create template request.</param>
        /// <returns>Task of ApiResponse (TemplateEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateEntity>> CreateTemplateAsyncWithHttpInfo (string id, CreateTemplateRequestEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->CreateTemplate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->CreateTemplate");

            var localVarPath = "/process-groups/{id}/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateEntity)));
        }

        /// <summary>
        /// Deletes an update request for a process group&#39;s variable registry. If the request is not yet complete, it will automatically be cancelled. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>VariableRegistryUpdateRequestEntity</returns>
        public VariableRegistryUpdateRequestEntity DeleteVariableRegistryUpdateRequest (string groupId, string updateId, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<VariableRegistryUpdateRequestEntity> localVarResponse = this.DeleteVariableRegistryUpdateRequestWithHttpInfo(groupId, updateId, disconnectedNodeAcknowledged);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes an update request for a process group&#39;s variable registry. If the request is not yet complete, it will automatically be cancelled. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of VariableRegistryUpdateRequestEntity</returns>
        public ApiResponse< VariableRegistryUpdateRequestEntity > DeleteVariableRegistryUpdateRequestWithHttpInfo (string groupId, string updateId, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ProcessGroupsApi->DeleteVariableRegistryUpdateRequest");
            // verify the required parameter 'updateId' is set
            if (updateId == null)
                throw new ApiException(400, "Missing required parameter 'updateId' when calling ProcessGroupsApi->DeleteVariableRegistryUpdateRequest");

            var localVarPath = "/process-groups/{groupId}/variable-registry/update-requests/{updateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (updateId != null) localVarPathParams.Add("updateId", this.Configuration.ApiClient.ParameterToString(updateId)); // path parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteVariableRegistryUpdateRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableRegistryUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VariableRegistryUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableRegistryUpdateRequestEntity)));
        }

        /// <summary>
        /// Deletes an update request for a process group&#39;s variable registry. If the request is not yet complete, it will automatically be cancelled. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of VariableRegistryUpdateRequestEntity</returns>
        public async System.Threading.Tasks.Task<VariableRegistryUpdateRequestEntity> DeleteVariableRegistryUpdateRequestAsync (string groupId, string updateId, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<VariableRegistryUpdateRequestEntity> localVarResponse = await this.DeleteVariableRegistryUpdateRequestAsyncWithHttpInfo(groupId, updateId, disconnectedNodeAcknowledged);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes an update request for a process group&#39;s variable registry. If the request is not yet complete, it will automatically be cancelled. Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (VariableRegistryUpdateRequestEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VariableRegistryUpdateRequestEntity>> DeleteVariableRegistryUpdateRequestAsyncWithHttpInfo (string groupId, string updateId, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ProcessGroupsApi->DeleteVariableRegistryUpdateRequest");
            // verify the required parameter 'updateId' is set
            if (updateId == null)
                throw new ApiException(400, "Missing required parameter 'updateId' when calling ProcessGroupsApi->DeleteVariableRegistryUpdateRequest");

            var localVarPath = "/process-groups/{groupId}/variable-registry/update-requests/{updateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (updateId != null) localVarPathParams.Add("updateId", this.Configuration.ApiClient.ParameterToString(updateId)); // path parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteVariableRegistryUpdateRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableRegistryUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VariableRegistryUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableRegistryUpdateRequestEntity)));
        }

        /// <summary>
        /// Gets all connections 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ConnectionsEntity</returns>
        public ConnectionsEntity GetConnections (string id)
        {
             ApiResponse<ConnectionsEntity> localVarResponse = this.GetConnectionsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all connections 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of ConnectionsEntity</returns>
        public ApiResponse< ConnectionsEntity > GetConnectionsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetConnections");

            var localVarPath = "/process-groups/{id}/connections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectionsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectionsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectionsEntity)));
        }

        /// <summary>
        /// Gets all connections 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ConnectionsEntity</returns>
        public async System.Threading.Tasks.Task<ConnectionsEntity> GetConnectionsAsync (string id)
        {
             ApiResponse<ConnectionsEntity> localVarResponse = await this.GetConnectionsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all connections 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (ConnectionsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConnectionsEntity>> GetConnectionsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetConnections");

            var localVarPath = "/process-groups/{id}/connections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConnectionsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConnectionsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConnectionsEntity)));
        }

        /// <summary>
        /// Gets all funnels 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>FunnelsEntity</returns>
        public FunnelsEntity GetFunnels (string id)
        {
             ApiResponse<FunnelsEntity> localVarResponse = this.GetFunnelsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all funnels 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of FunnelsEntity</returns>
        public ApiResponse< FunnelsEntity > GetFunnelsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetFunnels");

            var localVarPath = "/process-groups/{id}/funnels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFunnels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FunnelsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FunnelsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FunnelsEntity)));
        }

        /// <summary>
        /// Gets all funnels 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of FunnelsEntity</returns>
        public async System.Threading.Tasks.Task<FunnelsEntity> GetFunnelsAsync (string id)
        {
             ApiResponse<FunnelsEntity> localVarResponse = await this.GetFunnelsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all funnels 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (FunnelsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FunnelsEntity>> GetFunnelsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetFunnels");

            var localVarPath = "/process-groups/{id}/funnels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFunnels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FunnelsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FunnelsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FunnelsEntity)));
        }

        /// <summary>
        /// Gets all input ports 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>InputPortsEntity</returns>
        public InputPortsEntity GetInputPorts (string id)
        {
             ApiResponse<InputPortsEntity> localVarResponse = this.GetInputPortsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all input ports 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of InputPortsEntity</returns>
        public ApiResponse< InputPortsEntity > GetInputPortsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetInputPorts");

            var localVarPath = "/process-groups/{id}/input-ports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInputPorts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InputPortsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InputPortsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InputPortsEntity)));
        }

        /// <summary>
        /// Gets all input ports 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of InputPortsEntity</returns>
        public async System.Threading.Tasks.Task<InputPortsEntity> GetInputPortsAsync (string id)
        {
             ApiResponse<InputPortsEntity> localVarResponse = await this.GetInputPortsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all input ports 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (InputPortsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InputPortsEntity>> GetInputPortsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetInputPorts");

            var localVarPath = "/process-groups/{id}/input-ports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetInputPorts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InputPortsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InputPortsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InputPortsEntity)));
        }

        /// <summary>
        /// Gets all labels 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>LabelsEntity</returns>
        public LabelsEntity GetLabels (string id)
        {
             ApiResponse<LabelsEntity> localVarResponse = this.GetLabelsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all labels 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of LabelsEntity</returns>
        public ApiResponse< LabelsEntity > GetLabelsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetLabels");

            var localVarPath = "/process-groups/{id}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelsEntity)));
        }

        /// <summary>
        /// Gets all labels 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of LabelsEntity</returns>
        public async System.Threading.Tasks.Task<LabelsEntity> GetLabelsAsync (string id)
        {
             ApiResponse<LabelsEntity> localVarResponse = await this.GetLabelsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all labels 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (LabelsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LabelsEntity>> GetLabelsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetLabels");

            var localVarPath = "/process-groups/{id}/labels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLabels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabelsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LabelsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabelsEntity)));
        }

        /// <summary>
        /// Gets a list of local modifications to the Process Group since it was last synchronized with the Flow Registry 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>FlowComparisonEntity</returns>
        public FlowComparisonEntity GetLocalModifications (string id)
        {
             ApiResponse<FlowComparisonEntity> localVarResponse = this.GetLocalModificationsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a list of local modifications to the Process Group since it was last synchronized with the Flow Registry 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of FlowComparisonEntity</returns>
        public ApiResponse< FlowComparisonEntity > GetLocalModificationsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetLocalModifications");

            var localVarPath = "/process-groups/{id}/local-modifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLocalModifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowComparisonEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowComparisonEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowComparisonEntity)));
        }

        /// <summary>
        /// Gets a list of local modifications to the Process Group since it was last synchronized with the Flow Registry 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of FlowComparisonEntity</returns>
        public async System.Threading.Tasks.Task<FlowComparisonEntity> GetLocalModificationsAsync (string id)
        {
             ApiResponse<FlowComparisonEntity> localVarResponse = await this.GetLocalModificationsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a list of local modifications to the Process Group since it was last synchronized with the Flow Registry 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (FlowComparisonEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowComparisonEntity>> GetLocalModificationsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetLocalModifications");

            var localVarPath = "/process-groups/{id}/local-modifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetLocalModifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowComparisonEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowComparisonEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowComparisonEntity)));
        }

        /// <summary>
        /// Gets all output ports 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>OutputPortsEntity</returns>
        public OutputPortsEntity GetOutputPorts (string id)
        {
             ApiResponse<OutputPortsEntity> localVarResponse = this.GetOutputPortsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all output ports 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of OutputPortsEntity</returns>
        public ApiResponse< OutputPortsEntity > GetOutputPortsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetOutputPorts");

            var localVarPath = "/process-groups/{id}/output-ports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOutputPorts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputPortsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OutputPortsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputPortsEntity)));
        }

        /// <summary>
        /// Gets all output ports 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of OutputPortsEntity</returns>
        public async System.Threading.Tasks.Task<OutputPortsEntity> GetOutputPortsAsync (string id)
        {
             ApiResponse<OutputPortsEntity> localVarResponse = await this.GetOutputPortsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all output ports 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (OutputPortsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutputPortsEntity>> GetOutputPortsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetOutputPorts");

            var localVarPath = "/process-groups/{id}/output-ports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOutputPorts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OutputPortsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OutputPortsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OutputPortsEntity)));
        }

        /// <summary>
        /// Gets a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ProcessGroupEntity</returns>
        public ProcessGroupEntity GetProcessGroup (string id)
        {
             ApiResponse<ProcessGroupEntity> localVarResponse = this.GetProcessGroupWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of ProcessGroupEntity</returns>
        public ApiResponse< ProcessGroupEntity > GetProcessGroupWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetProcessGroup");

            var localVarPath = "/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessGroupEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessGroupEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessGroupEntity)));
        }

        /// <summary>
        /// Gets a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ProcessGroupEntity</returns>
        public async System.Threading.Tasks.Task<ProcessGroupEntity> GetProcessGroupAsync (string id)
        {
             ApiResponse<ProcessGroupEntity> localVarResponse = await this.GetProcessGroupAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (ProcessGroupEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessGroupEntity>> GetProcessGroupAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetProcessGroup");

            var localVarPath = "/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessGroupEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessGroupEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessGroupEntity)));
        }

        /// <summary>
        /// Gets all process groups 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ProcessGroupsEntity</returns>
        public ProcessGroupsEntity GetProcessGroups (string id)
        {
             ApiResponse<ProcessGroupsEntity> localVarResponse = this.GetProcessGroupsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all process groups 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of ProcessGroupsEntity</returns>
        public ApiResponse< ProcessGroupsEntity > GetProcessGroupsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetProcessGroups");

            var localVarPath = "/process-groups/{id}/process-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessGroupsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessGroupsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessGroupsEntity)));
        }

        /// <summary>
        /// Gets all process groups 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ProcessGroupsEntity</returns>
        public async System.Threading.Tasks.Task<ProcessGroupsEntity> GetProcessGroupsAsync (string id)
        {
             ApiResponse<ProcessGroupsEntity> localVarResponse = await this.GetProcessGroupsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all process groups 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (ProcessGroupsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessGroupsEntity>> GetProcessGroupsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetProcessGroups");

            var localVarPath = "/process-groups/{id}/process-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessGroupsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessGroupsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessGroupsEntity)));
        }

        /// <summary>
        /// Gets all processors 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeDescendantGroups">Whether or not to include processors from descendant process groups (optional, default to false)</param>
        /// <returns>ProcessorsEntity</returns>
        public ProcessorsEntity GetProcessors (string id, bool? includeDescendantGroups = null)
        {
             ApiResponse<ProcessorsEntity> localVarResponse = this.GetProcessorsWithHttpInfo(id, includeDescendantGroups);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all processors 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeDescendantGroups">Whether or not to include processors from descendant process groups (optional, default to false)</param>
        /// <returns>ApiResponse of ProcessorsEntity</returns>
        public ApiResponse< ProcessorsEntity > GetProcessorsWithHttpInfo (string id, bool? includeDescendantGroups = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetProcessors");

            var localVarPath = "/process-groups/{id}/processors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeDescendantGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDescendantGroups", includeDescendantGroups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessorsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessorsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessorsEntity)));
        }

        /// <summary>
        /// Gets all processors 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeDescendantGroups">Whether or not to include processors from descendant process groups (optional, default to false)</param>
        /// <returns>Task of ProcessorsEntity</returns>
        public async System.Threading.Tasks.Task<ProcessorsEntity> GetProcessorsAsync (string id, bool? includeDescendantGroups = null)
        {
             ApiResponse<ProcessorsEntity> localVarResponse = await this.GetProcessorsAsyncWithHttpInfo(id, includeDescendantGroups);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all processors 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeDescendantGroups">Whether or not to include processors from descendant process groups (optional, default to false)</param>
        /// <returns>Task of ApiResponse (ProcessorsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessorsEntity>> GetProcessorsAsyncWithHttpInfo (string id, bool? includeDescendantGroups = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetProcessors");

            var localVarPath = "/process-groups/{id}/processors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeDescendantGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDescendantGroups", includeDescendantGroups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetProcessors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessorsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessorsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessorsEntity)));
        }

        /// <summary>
        /// Gets all remote process groups 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>RemoteProcessGroupsEntity</returns>
        public RemoteProcessGroupsEntity GetRemoteProcessGroups (string id)
        {
             ApiResponse<RemoteProcessGroupsEntity> localVarResponse = this.GetRemoteProcessGroupsWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all remote process groups 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of RemoteProcessGroupsEntity</returns>
        public ApiResponse< RemoteProcessGroupsEntity > GetRemoteProcessGroupsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetRemoteProcessGroups");

            var localVarPath = "/process-groups/{id}/remote-process-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRemoteProcessGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteProcessGroupsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteProcessGroupsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteProcessGroupsEntity)));
        }

        /// <summary>
        /// Gets all remote process groups 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of RemoteProcessGroupsEntity</returns>
        public async System.Threading.Tasks.Task<RemoteProcessGroupsEntity> GetRemoteProcessGroupsAsync (string id)
        {
             ApiResponse<RemoteProcessGroupsEntity> localVarResponse = await this.GetRemoteProcessGroupsAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all remote process groups 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (RemoteProcessGroupsEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoteProcessGroupsEntity>> GetRemoteProcessGroupsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetRemoteProcessGroups");

            var localVarPath = "/process-groups/{id}/remote-process-groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetRemoteProcessGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteProcessGroupsEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteProcessGroupsEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteProcessGroupsEntity)));
        }

        /// <summary>
        /// Gets a process group&#39;s variable registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include ancestor groups (optional, default to true)</param>
        /// <returns>VariableRegistryEntity</returns>
        public VariableRegistryEntity GetVariableRegistry (string id, bool? includeAncestorGroups = null)
        {
             ApiResponse<VariableRegistryEntity> localVarResponse = this.GetVariableRegistryWithHttpInfo(id, includeAncestorGroups);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a process group&#39;s variable registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include ancestor groups (optional, default to true)</param>
        /// <returns>ApiResponse of VariableRegistryEntity</returns>
        public ApiResponse< VariableRegistryEntity > GetVariableRegistryWithHttpInfo (string id, bool? includeAncestorGroups = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetVariableRegistry");

            var localVarPath = "/process-groups/{id}/variable-registry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeAncestorGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAncestorGroups", includeAncestorGroups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetVariableRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableRegistryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VariableRegistryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableRegistryEntity)));
        }

        /// <summary>
        /// Gets a process group&#39;s variable registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include ancestor groups (optional, default to true)</param>
        /// <returns>Task of VariableRegistryEntity</returns>
        public async System.Threading.Tasks.Task<VariableRegistryEntity> GetVariableRegistryAsync (string id, bool? includeAncestorGroups = null)
        {
             ApiResponse<VariableRegistryEntity> localVarResponse = await this.GetVariableRegistryAsyncWithHttpInfo(id, includeAncestorGroups);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a process group&#39;s variable registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="includeAncestorGroups">Whether or not to include ancestor groups (optional, default to true)</param>
        /// <returns>Task of ApiResponse (VariableRegistryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VariableRegistryEntity>> GetVariableRegistryAsyncWithHttpInfo (string id, bool? includeAncestorGroups = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->GetVariableRegistry");

            var localVarPath = "/process-groups/{id}/variable-registry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeAncestorGroups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAncestorGroups", includeAncestorGroups)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetVariableRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableRegistryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VariableRegistryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableRegistryEntity)));
        }

        /// <summary>
        /// Gets a process group&#39;s variable registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <returns>VariableRegistryUpdateRequestEntity</returns>
        public VariableRegistryUpdateRequestEntity GetVariableRegistryUpdateRequest (string groupId, string updateId)
        {
             ApiResponse<VariableRegistryUpdateRequestEntity> localVarResponse = this.GetVariableRegistryUpdateRequestWithHttpInfo(groupId, updateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a process group&#39;s variable registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <returns>ApiResponse of VariableRegistryUpdateRequestEntity</returns>
        public ApiResponse< VariableRegistryUpdateRequestEntity > GetVariableRegistryUpdateRequestWithHttpInfo (string groupId, string updateId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ProcessGroupsApi->GetVariableRegistryUpdateRequest");
            // verify the required parameter 'updateId' is set
            if (updateId == null)
                throw new ApiException(400, "Missing required parameter 'updateId' when calling ProcessGroupsApi->GetVariableRegistryUpdateRequest");

            var localVarPath = "/process-groups/{groupId}/variable-registry/update-requests/{updateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (updateId != null) localVarPathParams.Add("updateId", this.Configuration.ApiClient.ParameterToString(updateId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetVariableRegistryUpdateRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableRegistryUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VariableRegistryUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableRegistryUpdateRequestEntity)));
        }

        /// <summary>
        /// Gets a process group&#39;s variable registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <returns>Task of VariableRegistryUpdateRequestEntity</returns>
        public async System.Threading.Tasks.Task<VariableRegistryUpdateRequestEntity> GetVariableRegistryUpdateRequestAsync (string groupId, string updateId)
        {
             ApiResponse<VariableRegistryUpdateRequestEntity> localVarResponse = await this.GetVariableRegistryUpdateRequestAsyncWithHttpInfo(groupId, updateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a process group&#39;s variable registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The process group id.</param>
        /// <param name="updateId">The ID of the Variable Registry Update Request</param>
        /// <returns>Task of ApiResponse (VariableRegistryUpdateRequestEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VariableRegistryUpdateRequestEntity>> GetVariableRegistryUpdateRequestAsyncWithHttpInfo (string groupId, string updateId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling ProcessGroupsApi->GetVariableRegistryUpdateRequest");
            // verify the required parameter 'updateId' is set
            if (updateId == null)
                throw new ApiException(400, "Missing required parameter 'updateId' when calling ProcessGroupsApi->GetVariableRegistryUpdateRequest");

            var localVarPath = "/process-groups/{groupId}/variable-registry/update-requests/{updateId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarPathParams.Add("groupId", this.Configuration.ApiClient.ParameterToString(groupId)); // path parameter
            if (updateId != null) localVarPathParams.Add("updateId", this.Configuration.ApiClient.ParameterToString(updateId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetVariableRegistryUpdateRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableRegistryUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VariableRegistryUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableRegistryUpdateRequestEntity)));
        }

        /// <summary>
        /// Imports a template 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>TemplateEntity</returns>
        public TemplateEntity ImportTemplate (string id)
        {
             ApiResponse<TemplateEntity> localVarResponse = this.ImportTemplateWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Imports a template 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>ApiResponse of TemplateEntity</returns>
        public ApiResponse< TemplateEntity > ImportTemplateWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->ImportTemplate");

            var localVarPath = "/process-groups/{id}/templates/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ImportTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateEntity)));
        }

        /// <summary>
        /// Imports a template 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of TemplateEntity</returns>
        public async System.Threading.Tasks.Task<TemplateEntity> ImportTemplateAsync (string id)
        {
             ApiResponse<TemplateEntity> localVarResponse = await this.ImportTemplateAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Imports a template 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <returns>Task of ApiResponse (TemplateEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateEntity>> ImportTemplateAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->ImportTemplate");

            var localVarPath = "/process-groups/{id}/templates/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ImportTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateEntity)));
        }

        /// <summary>
        /// Instantiates a template 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The instantiate template request.</param>
        /// <returns>FlowEntity</returns>
        public FlowEntity InstantiateTemplate (string id, InstantiateTemplateRequestEntity body)
        {
             ApiResponse<FlowEntity> localVarResponse = this.InstantiateTemplateWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Instantiates a template 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The instantiate template request.</param>
        /// <returns>ApiResponse of FlowEntity</returns>
        public ApiResponse< FlowEntity > InstantiateTemplateWithHttpInfo (string id, InstantiateTemplateRequestEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->InstantiateTemplate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->InstantiateTemplate");

            var localVarPath = "/process-groups/{id}/template-instance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("InstantiateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowEntity)));
        }

        /// <summary>
        /// Instantiates a template 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The instantiate template request.</param>
        /// <returns>Task of FlowEntity</returns>
        public async System.Threading.Tasks.Task<FlowEntity> InstantiateTemplateAsync (string id, InstantiateTemplateRequestEntity body)
        {
             ApiResponse<FlowEntity> localVarResponse = await this.InstantiateTemplateAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Instantiates a template 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The instantiate template request.</param>
        /// <returns>Task of ApiResponse (FlowEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FlowEntity>> InstantiateTemplateAsyncWithHttpInfo (string id, InstantiateTemplateRequestEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->InstantiateTemplate");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->InstantiateTemplate");

            var localVarPath = "/process-groups/{id}/template-instance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("InstantiateTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FlowEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FlowEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FlowEntity)));
        }

        /// <summary>
        /// Deletes a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ProcessGroupEntity</returns>
        public ProcessGroupEntity RemoveProcessGroup (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<ProcessGroupEntity> localVarResponse = this.RemoveProcessGroupWithHttpInfo(id, version, clientId, disconnectedNodeAcknowledged);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of ProcessGroupEntity</returns>
        public ApiResponse< ProcessGroupEntity > RemoveProcessGroupWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->RemoveProcessGroup");

            var localVarPath = "/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clientId", clientId)); // query parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RemoveProcessGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessGroupEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessGroupEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessGroupEntity)));
        }

        /// <summary>
        /// Deletes a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ProcessGroupEntity</returns>
        public async System.Threading.Tasks.Task<ProcessGroupEntity> RemoveProcessGroupAsync (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<ProcessGroupEntity> localVarResponse = await this.RemoveProcessGroupAsyncWithHttpInfo(id, version, clientId, disconnectedNodeAcknowledged);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="version">The revision is used to verify the client is working with the latest version of the flow. (optional)</param>
        /// <param name="clientId">If the client id is not specified, new one will be generated. This value (whether specified or generated) is included in the response. (optional)</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (ProcessGroupEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessGroupEntity>> RemoveProcessGroupAsyncWithHttpInfo (string id, string version = null, string clientId = null, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->RemoveProcessGroup");

            var localVarPath = "/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (version != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "version", version)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clientId", clientId)); // query parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RemoveProcessGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessGroupEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessGroupEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessGroupEntity)));
        }

        /// <summary>
        /// Submits a request to update a process group&#39;s variable registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>VariableRegistryUpdateRequestEntity</returns>
        public VariableRegistryUpdateRequestEntity SubmitUpdateVariableRegistryRequest (string id, VariableRegistryEntity body)
        {
             ApiResponse<VariableRegistryUpdateRequestEntity> localVarResponse = this.SubmitUpdateVariableRegistryRequestWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Submits a request to update a process group&#39;s variable registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>ApiResponse of VariableRegistryUpdateRequestEntity</returns>
        public ApiResponse< VariableRegistryUpdateRequestEntity > SubmitUpdateVariableRegistryRequestWithHttpInfo (string id, VariableRegistryEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->SubmitUpdateVariableRegistryRequest");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->SubmitUpdateVariableRegistryRequest");

            var localVarPath = "/process-groups/{id}/variable-registry/update-requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitUpdateVariableRegistryRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableRegistryUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VariableRegistryUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableRegistryUpdateRequestEntity)));
        }

        /// <summary>
        /// Submits a request to update a process group&#39;s variable registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>Task of VariableRegistryUpdateRequestEntity</returns>
        public async System.Threading.Tasks.Task<VariableRegistryUpdateRequestEntity> SubmitUpdateVariableRegistryRequestAsync (string id, VariableRegistryEntity body)
        {
             ApiResponse<VariableRegistryUpdateRequestEntity> localVarResponse = await this.SubmitUpdateVariableRegistryRequestAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Submits a request to update a process group&#39;s variable registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>Task of ApiResponse (VariableRegistryUpdateRequestEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VariableRegistryUpdateRequestEntity>> SubmitUpdateVariableRegistryRequestAsyncWithHttpInfo (string id, VariableRegistryEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->SubmitUpdateVariableRegistryRequest");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->SubmitUpdateVariableRegistryRequest");

            var localVarPath = "/process-groups/{id}/variable-registry/update-requests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SubmitUpdateVariableRegistryRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableRegistryUpdateRequestEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VariableRegistryUpdateRequestEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableRegistryUpdateRequestEntity)));
        }

        /// <summary>
        /// Updates a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>ProcessGroupEntity</returns>
        public ProcessGroupEntity UpdateProcessGroup (string id, ProcessGroupEntity body)
        {
             ApiResponse<ProcessGroupEntity> localVarResponse = this.UpdateProcessGroupWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>ApiResponse of ProcessGroupEntity</returns>
        public ApiResponse< ProcessGroupEntity > UpdateProcessGroupWithHttpInfo (string id, ProcessGroupEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->UpdateProcessGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->UpdateProcessGroup");

            var localVarPath = "/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateProcessGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessGroupEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessGroupEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessGroupEntity)));
        }

        /// <summary>
        /// Updates a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>Task of ProcessGroupEntity</returns>
        public async System.Threading.Tasks.Task<ProcessGroupEntity> UpdateProcessGroupAsync (string id, ProcessGroupEntity body)
        {
             ApiResponse<ProcessGroupEntity> localVarResponse = await this.UpdateProcessGroupAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a process group 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The process group configuration details.</param>
        /// <returns>Task of ApiResponse (ProcessGroupEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProcessGroupEntity>> UpdateProcessGroupAsyncWithHttpInfo (string id, ProcessGroupEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->UpdateProcessGroup");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->UpdateProcessGroup");

            var localVarPath = "/process-groups/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateProcessGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProcessGroupEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProcessGroupEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProcessGroupEntity)));
        }

        /// <summary>
        /// Updates the contents of a Process Group&#39;s variable Registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>VariableRegistryEntity</returns>
        public VariableRegistryEntity UpdateVariableRegistry (string id, VariableRegistryEntity body)
        {
             ApiResponse<VariableRegistryEntity> localVarResponse = this.UpdateVariableRegistryWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates the contents of a Process Group&#39;s variable Registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>ApiResponse of VariableRegistryEntity</returns>
        public ApiResponse< VariableRegistryEntity > UpdateVariableRegistryWithHttpInfo (string id, VariableRegistryEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->UpdateVariableRegistry");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->UpdateVariableRegistry");

            var localVarPath = "/process-groups/{id}/variable-registry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateVariableRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableRegistryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VariableRegistryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableRegistryEntity)));
        }

        /// <summary>
        /// Updates the contents of a Process Group&#39;s variable Registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>Task of VariableRegistryEntity</returns>
        public async System.Threading.Tasks.Task<VariableRegistryEntity> UpdateVariableRegistryAsync (string id, VariableRegistryEntity body)
        {
             ApiResponse<VariableRegistryEntity> localVarResponse = await this.UpdateVariableRegistryAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates the contents of a Process Group&#39;s variable Registry Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="body">The variable registry configuration details.</param>
        /// <returns>Task of ApiResponse (VariableRegistryEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VariableRegistryEntity>> UpdateVariableRegistryAsyncWithHttpInfo (string id, VariableRegistryEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->UpdateVariableRegistry");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProcessGroupsApi->UpdateVariableRegistry");

            var localVarPath = "/process-groups/{id}/variable-registry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateVariableRegistry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VariableRegistryEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VariableRegistryEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VariableRegistryEntity)));
        }

        /// <summary>
        /// Uploads a template 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="template">The binary content of the template file being uploaded.</param>
        /// <param name="body">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional)</param>
        /// <returns>TemplateEntity</returns>
        public TemplateEntity UploadTemplate (string id, System.IO.Stream template, bool? body = null)
        {
             ApiResponse<TemplateEntity> localVarResponse = this.UploadTemplateWithHttpInfo(id, template, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Uploads a template 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="template">The binary content of the template file being uploaded.</param>
        /// <param name="body">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional)</param>
        /// <returns>ApiResponse of TemplateEntity</returns>
        public ApiResponse< TemplateEntity > UploadTemplateWithHttpInfo (string id, System.IO.Stream template, bool? body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->UploadTemplate");
            // verify the required parameter 'template' is set
            if (template == null)
                throw new ApiException(400, "Missing required parameter 'template' when calling ProcessGroupsApi->UploadTemplate");

            var localVarPath = "/process-groups/{id}/templates/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (template != null) localVarFileParams.Add("template", this.Configuration.ApiClient.ParameterToFile("template", template));
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UploadTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateEntity)));
        }

        /// <summary>
        /// Uploads a template 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="template">The binary content of the template file being uploaded.</param>
        /// <param name="body">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional)</param>
        /// <returns>Task of TemplateEntity</returns>
        public async System.Threading.Tasks.Task<TemplateEntity> UploadTemplateAsync (string id, System.IO.Stream template, bool? body = null)
        {
             ApiResponse<TemplateEntity> localVarResponse = await this.UploadTemplateAsyncWithHttpInfo(id, template, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Uploads a template 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The process group id.</param>
        /// <param name="template">The binary content of the template file being uploaded.</param>
        /// <param name="body">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional)</param>
        /// <returns>Task of ApiResponse (TemplateEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateEntity>> UploadTemplateAsyncWithHttpInfo (string id, System.IO.Stream template, bool? body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProcessGroupsApi->UploadTemplate");
            // verify the required parameter 'template' is set
            if (template == null)
                throw new ApiException(400, "Missing required parameter 'template' when calling ProcessGroupsApi->UploadTemplate");

            var localVarPath = "/process-groups/{id}/templates/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (template != null) localVarFileParams.Add("template", this.Configuration.ApiClient.ParameterToFile("template", template));
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UploadTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateEntity)));
        }

    }
}
