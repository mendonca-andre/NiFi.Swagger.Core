/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Api
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;

    using NiFi.Swagger.Core.Client;
    using NiFi.Swagger.Core.Model;

    using RestSharp;

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISnippetsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a snippet. The snippet will be automatically discarded if not used in a subsequent request after 1 minute.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>SnippetEntity</returns>
        SnippetEntity CreateSnippet (SnippetEntity body);

        /// <summary>
        /// Creates a snippet. The snippet will be automatically discarded if not used in a subsequent request after 1 minute.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>ApiResponse of SnippetEntity</returns>
        ApiResponse<SnippetEntity> CreateSnippetWithHttpInfo (SnippetEntity body);
        /// <summary>
        /// Deletes the components in a snippet and discards the snippet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>SnippetEntity</returns>
        SnippetEntity DeleteSnippet (string id, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes the components in a snippet and discards the snippet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of SnippetEntity</returns>
        ApiResponse<SnippetEntity> DeleteSnippetWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Move&#39;s the components in this Snippet into a new Process Group and discards the snippet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>SnippetEntity</returns>
        SnippetEntity UpdateSnippet (string id, SnippetEntity body);

        /// <summary>
        /// Move&#39;s the components in this Snippet into a new Process Group and discards the snippet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>ApiResponse of SnippetEntity</returns>
        ApiResponse<SnippetEntity> UpdateSnippetWithHttpInfo (string id, SnippetEntity body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a snippet. The snippet will be automatically discarded if not used in a subsequent request after 1 minute.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>Task of SnippetEntity</returns>
        System.Threading.Tasks.Task<SnippetEntity> CreateSnippetAsync (SnippetEntity body);

        /// <summary>
        /// Creates a snippet. The snippet will be automatically discarded if not used in a subsequent request after 1 minute.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>Task of ApiResponse (SnippetEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<SnippetEntity>> CreateSnippetAsyncWithHttpInfo (SnippetEntity body);
        /// <summary>
        /// Deletes the components in a snippet and discards the snippet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of SnippetEntity</returns>
        System.Threading.Tasks.Task<SnippetEntity> DeleteSnippetAsync (string id, bool? disconnectedNodeAcknowledged = null);

        /// <summary>
        /// Deletes the components in a snippet and discards the snippet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SnippetEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<SnippetEntity>> DeleteSnippetAsyncWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null);
        /// <summary>
        /// Move&#39;s the components in this Snippet into a new Process Group and discards the snippet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>Task of SnippetEntity</returns>
        System.Threading.Tasks.Task<SnippetEntity> UpdateSnippetAsync (string id, SnippetEntity body);

        /// <summary>
        /// Move&#39;s the components in this Snippet into a new Process Group and discards the snippet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>Task of ApiResponse (SnippetEntity)</returns>
        System.Threading.Tasks.Task<ApiResponse<SnippetEntity>> UpdateSnippetAsyncWithHttpInfo (string id, SnippetEntity body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SnippetsApi : ISnippetsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SnippetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SnippetsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SnippetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SnippetsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this._exceptionFactory != null && this._exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return this._exceptionFactory;
            }
            set { this._exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a snippet. The snippet will be automatically discarded if not used in a subsequent request after 1 minute. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>SnippetEntity</returns>
        public SnippetEntity CreateSnippet (SnippetEntity body)
        {
             ApiResponse<SnippetEntity> localVarResponse = this.CreateSnippetWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a snippet. The snippet will be automatically discarded if not used in a subsequent request after 1 minute. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>ApiResponse of SnippetEntity</returns>
        public ApiResponse< SnippetEntity > CreateSnippetWithHttpInfo (SnippetEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SnippetsApi->CreateSnippet");

            var localVarPath = "/snippets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnippetEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnippetEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnippetEntity)));
        }

        /// <summary>
        /// Creates a snippet. The snippet will be automatically discarded if not used in a subsequent request after 1 minute. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>Task of SnippetEntity</returns>
        public async System.Threading.Tasks.Task<SnippetEntity> CreateSnippetAsync (SnippetEntity body)
        {
             ApiResponse<SnippetEntity> localVarResponse = await this.CreateSnippetAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a snippet. The snippet will be automatically discarded if not used in a subsequent request after 1 minute. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>Task of ApiResponse (SnippetEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SnippetEntity>> CreateSnippetAsyncWithHttpInfo (SnippetEntity body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SnippetsApi->CreateSnippet");

            var localVarPath = "/snippets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreateSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnippetEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnippetEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnippetEntity)));
        }

        /// <summary>
        /// Deletes the components in a snippet and discards the snippet 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>SnippetEntity</returns>
        public SnippetEntity DeleteSnippet (string id, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<SnippetEntity> localVarResponse = this.DeleteSnippetWithHttpInfo(id, disconnectedNodeAcknowledged);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the components in a snippet and discards the snippet 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>ApiResponse of SnippetEntity</returns>
        public ApiResponse< SnippetEntity > DeleteSnippetWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SnippetsApi->DeleteSnippet");

            var localVarPath = "/snippets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnippetEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnippetEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnippetEntity)));
        }

        /// <summary>
        /// Deletes the components in a snippet and discards the snippet 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of SnippetEntity</returns>
        public async System.Threading.Tasks.Task<SnippetEntity> DeleteSnippetAsync (string id, bool? disconnectedNodeAcknowledged = null)
        {
             ApiResponse<SnippetEntity> localVarResponse = await this.DeleteSnippetAsyncWithHttpInfo(id, disconnectedNodeAcknowledged);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes the components in a snippet and discards the snippet 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (SnippetEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SnippetEntity>> DeleteSnippetAsyncWithHttpInfo (string id, bool? disconnectedNodeAcknowledged = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SnippetsApi->DeleteSnippet");

            var localVarPath = "/snippets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (disconnectedNodeAcknowledged != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "disconnectedNodeAcknowledged", disconnectedNodeAcknowledged)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnippetEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnippetEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnippetEntity)));
        }

        /// <summary>
        /// Move&#39;s the components in this Snippet into a new Process Group and discards the snippet 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>SnippetEntity</returns>
        public SnippetEntity UpdateSnippet (string id, SnippetEntity body)
        {
             ApiResponse<SnippetEntity> localVarResponse = this.UpdateSnippetWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Move&#39;s the components in this Snippet into a new Process Group and discards the snippet 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>ApiResponse of SnippetEntity</returns>
        public ApiResponse< SnippetEntity > UpdateSnippetWithHttpInfo (string id, SnippetEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SnippetsApi->UpdateSnippet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SnippetsApi->UpdateSnippet");

            var localVarPath = "/snippets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnippetEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnippetEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnippetEntity)));
        }

        /// <summary>
        /// Move&#39;s the components in this Snippet into a new Process Group and discards the snippet 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>Task of SnippetEntity</returns>
        public async System.Threading.Tasks.Task<SnippetEntity> UpdateSnippetAsync (string id, SnippetEntity body)
        {
             ApiResponse<SnippetEntity> localVarResponse = await this.UpdateSnippetAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Move&#39;s the components in this Snippet into a new Process Group and discards the snippet 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The snippet id.</param>
        /// <param name="body">The snippet configuration details.</param>
        /// <returns>Task of ApiResponse (SnippetEntity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SnippetEntity>> UpdateSnippetAsyncWithHttpInfo (string id, SnippetEntity body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SnippetsApi->UpdateSnippet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SnippetsApi->UpdateSnippet");

            var localVarPath = "/snippets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnippetEntity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnippetEntity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnippetEntity)));
        }

    }
}
