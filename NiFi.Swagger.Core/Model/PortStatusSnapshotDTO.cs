/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// PortStatusSnapshotDTO
    /// </summary>
    [DataContract]
    public partial class PortStatusSnapshotDTO :  IEquatable<PortStatusSnapshotDTO>, IValidatableObject
    {
        /// <summary>
        /// The run status of the port.
        /// </summary>
        /// <value>The run status of the port.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RunStatusEnum
        {
            
            /// <summary>
            /// Enum Running for value: Running
            /// </summary>
            [EnumMember(Value = "Running")]
            Running = 1,
            
            /// <summary>
            /// Enum Stopped for value: Stopped
            /// </summary>
            [EnumMember(Value = "Stopped")]
            Stopped = 2,
            
            /// <summary>
            /// Enum Validating for value: Validating
            /// </summary>
            [EnumMember(Value = "Validating")]
            Validating = 3,
            
            /// <summary>
            /// Enum Disabled for value: Disabled
            /// </summary>
            [EnumMember(Value = "Disabled")]
            Disabled = 4,
            
            /// <summary>
            /// Enum Invalid for value: Invalid
            /// </summary>
            [EnumMember(Value = "Invalid")]
            Invalid = 5
        }

        /// <summary>
        /// The run status of the port.
        /// </summary>
        /// <value>The run status of the port.</value>
        [DataMember(Name="runStatus", EmitDefaultValue=false)]
        public RunStatusEnum? RunStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PortStatusSnapshotDTO" /> class.
        /// </summary>
        /// <param name="id">The id of the port..</param>
        /// <param name="groupId">The id of the parent process group of the port..</param>
        /// <param name="name">The name of the port..</param>
        /// <param name="activeThreadCount">The active thread count for the port..</param>
        /// <param name="flowFilesIn">The number of FlowFiles that have been accepted in the last 5 minutes..</param>
        /// <param name="bytesIn">The size of hte FlowFiles that have been accepted in the last 5 minutes..</param>
        /// <param name="input">The count/size of flowfiles that have been accepted in the last 5 minutes..</param>
        /// <param name="flowFilesOut">The number of FlowFiles that have been processed in the last 5 minutes..</param>
        /// <param name="bytesOut">The number of bytes that have been processed in the last 5 minutes..</param>
        /// <param name="output">The count/size of flowfiles that have been processed in the last 5 minutes..</param>
        /// <param name="transmitting">Whether the port has incoming or outgoing connections to a remote NiFi..</param>
        /// <param name="runStatus">The run status of the port..</param>
        public PortStatusSnapshotDTO(string id = default(string), string groupId = default(string), string name = default(string), int? activeThreadCount = default(int?), int? flowFilesIn = default(int?), long? bytesIn = default(long?), string input = default(string), int? flowFilesOut = default(int?), long? bytesOut = default(long?), string output = default(string), bool? transmitting = default(bool?), RunStatusEnum? runStatus = default(RunStatusEnum?))
        {
            this.Id = id;
            this.GroupId = groupId;
            this.Name = name;
            this.ActiveThreadCount = activeThreadCount;
            this.FlowFilesIn = flowFilesIn;
            this.BytesIn = bytesIn;
            this.Input = input;
            this.FlowFilesOut = flowFilesOut;
            this.BytesOut = bytesOut;
            this.Output = output;
            this.Transmitting = transmitting;
            this.RunStatus = runStatus;
        }
        
        /// <summary>
        /// The id of the port.
        /// </summary>
        /// <value>The id of the port.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The id of the parent process group of the port.
        /// </summary>
        /// <value>The id of the parent process group of the port.</value>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public string GroupId { get; set; }

        /// <summary>
        /// The name of the port.
        /// </summary>
        /// <value>The name of the port.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The active thread count for the port.
        /// </summary>
        /// <value>The active thread count for the port.</value>
        [DataMember(Name="activeThreadCount", EmitDefaultValue=false)]
        public int? ActiveThreadCount { get; set; }

        /// <summary>
        /// The number of FlowFiles that have been accepted in the last 5 minutes.
        /// </summary>
        /// <value>The number of FlowFiles that have been accepted in the last 5 minutes.</value>
        [DataMember(Name="flowFilesIn", EmitDefaultValue=false)]
        public int? FlowFilesIn { get; set; }

        /// <summary>
        /// The size of hte FlowFiles that have been accepted in the last 5 minutes.
        /// </summary>
        /// <value>The size of hte FlowFiles that have been accepted in the last 5 minutes.</value>
        [DataMember(Name="bytesIn", EmitDefaultValue=false)]
        public long? BytesIn { get; set; }

        /// <summary>
        /// The count/size of flowfiles that have been accepted in the last 5 minutes.
        /// </summary>
        /// <value>The count/size of flowfiles that have been accepted in the last 5 minutes.</value>
        [DataMember(Name="input", EmitDefaultValue=false)]
        public string Input { get; set; }

        /// <summary>
        /// The number of FlowFiles that have been processed in the last 5 minutes.
        /// </summary>
        /// <value>The number of FlowFiles that have been processed in the last 5 minutes.</value>
        [DataMember(Name="flowFilesOut", EmitDefaultValue=false)]
        public int? FlowFilesOut { get; set; }

        /// <summary>
        /// The number of bytes that have been processed in the last 5 minutes.
        /// </summary>
        /// <value>The number of bytes that have been processed in the last 5 minutes.</value>
        [DataMember(Name="bytesOut", EmitDefaultValue=false)]
        public long? BytesOut { get; set; }

        /// <summary>
        /// The count/size of flowfiles that have been processed in the last 5 minutes.
        /// </summary>
        /// <value>The count/size of flowfiles that have been processed in the last 5 minutes.</value>
        [DataMember(Name="output", EmitDefaultValue=false)]
        public string Output { get; set; }

        /// <summary>
        /// Whether the port has incoming or outgoing connections to a remote NiFi.
        /// </summary>
        /// <value>Whether the port has incoming or outgoing connections to a remote NiFi.</value>
        [DataMember(Name="transmitting", EmitDefaultValue=false)]
        public bool? Transmitting { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PortStatusSnapshotDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  GroupId: ").Append(this.GroupId).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  ActiveThreadCount: ").Append(this.ActiveThreadCount).Append("\n");
            sb.Append("  FlowFilesIn: ").Append(this.FlowFilesIn).Append("\n");
            sb.Append("  BytesIn: ").Append(this.BytesIn).Append("\n");
            sb.Append("  Input: ").Append(this.Input).Append("\n");
            sb.Append("  FlowFilesOut: ").Append(this.FlowFilesOut).Append("\n");
            sb.Append("  BytesOut: ").Append(this.BytesOut).Append("\n");
            sb.Append("  Output: ").Append(this.Output).Append("\n");
            sb.Append("  Transmitting: ").Append(this.Transmitting).Append("\n");
            sb.Append("  RunStatus: ").Append(this.RunStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PortStatusSnapshotDTO);
        }

        /// <summary>
        /// Returns true if PortStatusSnapshotDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PortStatusSnapshotDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortStatusSnapshotDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ActiveThreadCount == input.ActiveThreadCount ||
                    (this.ActiveThreadCount != null &&
                    this.ActiveThreadCount.Equals(input.ActiveThreadCount))
                ) && 
                (
                    this.FlowFilesIn == input.FlowFilesIn ||
                    (this.FlowFilesIn != null &&
                    this.FlowFilesIn.Equals(input.FlowFilesIn))
                ) && 
                (
                    this.BytesIn == input.BytesIn ||
                    (this.BytesIn != null &&
                    this.BytesIn.Equals(input.BytesIn))
                ) && 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.FlowFilesOut == input.FlowFilesOut ||
                    (this.FlowFilesOut != null &&
                    this.FlowFilesOut.Equals(input.FlowFilesOut))
                ) && 
                (
                    this.BytesOut == input.BytesOut ||
                    (this.BytesOut != null &&
                    this.BytesOut.Equals(input.BytesOut))
                ) && 
                (
                    this.Output == input.Output ||
                    (this.Output != null &&
                    this.Output.Equals(input.Output))
                ) && 
                (
                    this.Transmitting == input.Transmitting ||
                    (this.Transmitting != null &&
                    this.Transmitting.Equals(input.Transmitting))
                ) && 
                (
                    this.RunStatus == input.RunStatus ||
                    (this.RunStatus != null &&
                    this.RunStatus.Equals(input.RunStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ActiveThreadCount != null)
                    hashCode = hashCode * 59 + this.ActiveThreadCount.GetHashCode();
                if (this.FlowFilesIn != null)
                    hashCode = hashCode * 59 + this.FlowFilesIn.GetHashCode();
                if (this.BytesIn != null)
                    hashCode = hashCode * 59 + this.BytesIn.GetHashCode();
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.FlowFilesOut != null)
                    hashCode = hashCode * 59 + this.FlowFilesOut.GetHashCode();
                if (this.BytesOut != null)
                    hashCode = hashCode * 59 + this.BytesOut.GetHashCode();
                if (this.Output != null)
                    hashCode = hashCode * 59 + this.Output.GetHashCode();
                if (this.Transmitting != null)
                    hashCode = hashCode * 59 + this.Transmitting.GetHashCode();
                if (this.RunStatus != null)
                    hashCode = hashCode * 59 + this.RunStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
