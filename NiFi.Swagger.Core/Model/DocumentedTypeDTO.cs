/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// DocumentedTypeDTO
    /// </summary>
    [DataContract]
    public partial class DocumentedTypeDTO :  IEquatable<DocumentedTypeDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentedTypeDTO" /> class.
        /// </summary>
        /// <param name="type">The fully qualified name of the type..</param>
        /// <param name="bundle">The details of the artifact that bundled this type..</param>
        /// <param name="controllerServiceApis">If this type represents a ControllerService, this lists the APIs it implements..</param>
        /// <param name="description">The description of the type..</param>
        /// <param name="restricted">Whether this type is restricted..</param>
        /// <param name="usageRestriction">The optional description of why the usage of this component is restricted..</param>
        /// <param name="explicitRestrictions">An optional collection of explicit restrictions. If specified, these explicit restrictions will be enfored..</param>
        /// <param name="deprecationReason">The description of why the usage of this component is restricted..</param>
        /// <param name="tags">The tags associated with this type..</param>
        public DocumentedTypeDTO(string type = default(string), BundleDTO bundle = default(BundleDTO), List<ControllerServiceApiDTO> controllerServiceApis = default(List<ControllerServiceApiDTO>), string description = default(string), bool? restricted = default(bool?), string usageRestriction = default(string), List<ExplicitRestrictionDTO> explicitRestrictions = default(List<ExplicitRestrictionDTO>), string deprecationReason = default(string), List<string> tags = default(List<string>))
        {
            this.Type = type;
            this.Bundle = bundle;
            this.ControllerServiceApis = controllerServiceApis;
            this.Description = description;
            this.Restricted = restricted;
            this.UsageRestriction = usageRestriction;
            this.ExplicitRestrictions = explicitRestrictions;
            this.DeprecationReason = deprecationReason;
            this.Tags = tags;
        }
        
        /// <summary>
        /// The fully qualified name of the type.
        /// </summary>
        /// <value>The fully qualified name of the type.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The details of the artifact that bundled this type.
        /// </summary>
        /// <value>The details of the artifact that bundled this type.</value>
        [DataMember(Name="bundle", EmitDefaultValue=false)]
        public BundleDTO Bundle { get; set; }

        /// <summary>
        /// If this type represents a ControllerService, this lists the APIs it implements.
        /// </summary>
        /// <value>If this type represents a ControllerService, this lists the APIs it implements.</value>
        [DataMember(Name="controllerServiceApis", EmitDefaultValue=false)]
        public List<ControllerServiceApiDTO> ControllerServiceApis { get; set; }

        /// <summary>
        /// The description of the type.
        /// </summary>
        /// <value>The description of the type.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Whether this type is restricted.
        /// </summary>
        /// <value>Whether this type is restricted.</value>
        [DataMember(Name="restricted", EmitDefaultValue=false)]
        public bool? Restricted { get; set; }

        /// <summary>
        /// The optional description of why the usage of this component is restricted.
        /// </summary>
        /// <value>The optional description of why the usage of this component is restricted.</value>
        [DataMember(Name="usageRestriction", EmitDefaultValue=false)]
        public string UsageRestriction { get; set; }

        /// <summary>
        /// An optional collection of explicit restrictions. If specified, these explicit restrictions will be enfored.
        /// </summary>
        /// <value>An optional collection of explicit restrictions. If specified, these explicit restrictions will be enfored.</value>
        [DataMember(Name="explicitRestrictions", EmitDefaultValue=false)]
        public List<ExplicitRestrictionDTO> ExplicitRestrictions { get; set; }

        /// <summary>
        /// The description of why the usage of this component is restricted.
        /// </summary>
        /// <value>The description of why the usage of this component is restricted.</value>
        [DataMember(Name="deprecationReason", EmitDefaultValue=false)]
        public string DeprecationReason { get; set; }

        /// <summary>
        /// The tags associated with this type.
        /// </summary>
        /// <value>The tags associated with this type.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentedTypeDTO {\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Bundle: ").Append(this.Bundle).Append("\n");
            sb.Append("  ControllerServiceApis: ").Append(this.ControllerServiceApis).Append("\n");
            sb.Append("  Description: ").Append(this.Description).Append("\n");
            sb.Append("  Restricted: ").Append(this.Restricted).Append("\n");
            sb.Append("  UsageRestriction: ").Append(this.UsageRestriction).Append("\n");
            sb.Append("  ExplicitRestrictions: ").Append(this.ExplicitRestrictions).Append("\n");
            sb.Append("  DeprecationReason: ").Append(this.DeprecationReason).Append("\n");
            sb.Append("  Tags: ").Append(this.Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentedTypeDTO);
        }

        /// <summary>
        /// Returns true if DocumentedTypeDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentedTypeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentedTypeDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Bundle == input.Bundle ||
                    (this.Bundle != null &&
                    this.Bundle.Equals(input.Bundle))
                ) && 
                (
                    this.ControllerServiceApis == input.ControllerServiceApis ||
                    this.ControllerServiceApis != null &&
                    this.ControllerServiceApis.SequenceEqual(input.ControllerServiceApis)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Restricted == input.Restricted ||
                    (this.Restricted != null &&
                    this.Restricted.Equals(input.Restricted))
                ) && 
                (
                    this.UsageRestriction == input.UsageRestriction ||
                    (this.UsageRestriction != null &&
                    this.UsageRestriction.Equals(input.UsageRestriction))
                ) && 
                (
                    this.ExplicitRestrictions == input.ExplicitRestrictions ||
                    this.ExplicitRestrictions != null &&
                    this.ExplicitRestrictions.SequenceEqual(input.ExplicitRestrictions)
                ) && 
                (
                    this.DeprecationReason == input.DeprecationReason ||
                    (this.DeprecationReason != null &&
                    this.DeprecationReason.Equals(input.DeprecationReason))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Bundle != null)
                    hashCode = hashCode * 59 + this.Bundle.GetHashCode();
                if (this.ControllerServiceApis != null)
                    hashCode = hashCode * 59 + this.ControllerServiceApis.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Restricted != null)
                    hashCode = hashCode * 59 + this.Restricted.GetHashCode();
                if (this.UsageRestriction != null)
                    hashCode = hashCode * 59 + this.UsageRestriction.GetHashCode();
                if (this.ExplicitRestrictions != null)
                    hashCode = hashCode * 59 + this.ExplicitRestrictions.GetHashCode();
                if (this.DeprecationReason != null)
                    hashCode = hashCode * 59 + this.DeprecationReason.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
