/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// PortDTO
    /// </summary>
    [DataContract]
    public partial class PortDTO :  IEquatable<PortDTO>, IValidatableObject
    {
        /// <summary>
        /// The state of the port.
        /// </summary>
        /// <value>The state of the port.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum RUNNING for value: RUNNING
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNING = 1,
            
            /// <summary>
            /// Enum STOPPED for value: STOPPED
            /// </summary>
            [EnumMember(Value = "STOPPED")]
            STOPPED = 2,
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 3
        }

        /// <summary>
        /// The state of the port.
        /// </summary>
        /// <value>The state of the port.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// The type of port.
        /// </summary>
        /// <value>The type of port.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum INPUTPORT for value: INPUT_PORT
            /// </summary>
            [EnumMember(Value = "INPUT_PORT")]
            INPUTPORT = 1,
            
            /// <summary>
            /// Enum OUTPUTPORT for value: OUTPUT_PORT
            /// </summary>
            [EnumMember(Value = "OUTPUT_PORT")]
            OUTPUTPORT = 2
        }

        /// <summary>
        /// The type of port.
        /// </summary>
        /// <value>The type of port.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PortDTO" /> class.
        /// </summary>
        /// <param name="id">The id of the component..</param>
        /// <param name="versionedComponentId">The ID of the corresponding component that is under version control.</param>
        /// <param name="parentGroupId">The id of parent process group of this component if applicable..</param>
        /// <param name="position">The position of this component in the UI if applicable..</param>
        /// <param name="name">The name of the port..</param>
        /// <param name="comments">The comments for the port..</param>
        /// <param name="state">The state of the port..</param>
        /// <param name="type">The type of port..</param>
        /// <param name="transmitting">Whether the port has incoming or output connections to a remote NiFi. This is only applicable when the port is running in the root group..</param>
        /// <param name="concurrentlySchedulableTaskCount">The number of tasks that should be concurrently scheduled for the port..</param>
        /// <param name="userAccessControl">The users that are allowed to access the port..</param>
        /// <param name="groupAccessControl">The user groups that are allowed to access the port..</param>
        /// <param name="validationErrors">Gets the validation errors from this port. These validation errors represent the problems with the port that must be resolved before it can be started..</param>
        public PortDTO(string id = default(string), string versionedComponentId = default(string), string parentGroupId = default(string), PositionDTO position = default(PositionDTO), string name = default(string), string comments = default(string), StateEnum? state = default(StateEnum?), TypeEnum? type = default(TypeEnum?), bool? transmitting = default(bool?), int? concurrentlySchedulableTaskCount = default(int?), List<string> userAccessControl = default(List<string>), List<string> groupAccessControl = default(List<string>), List<string> validationErrors = default(List<string>))
        {
            this.Id = id;
            this.VersionedComponentId = versionedComponentId;
            this.ParentGroupId = parentGroupId;
            this.Position = position;
            this.Name = name;
            this.Comments = comments;
            this.State = state;
            this.Type = type;
            this.Transmitting = transmitting;
            this.ConcurrentlySchedulableTaskCount = concurrentlySchedulableTaskCount;
            this.UserAccessControl = userAccessControl;
            this.GroupAccessControl = groupAccessControl;
            this.ValidationErrors = validationErrors;
        }
        
        /// <summary>
        /// The id of the component.
        /// </summary>
        /// <value>The id of the component.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the corresponding component that is under version control
        /// </summary>
        /// <value>The ID of the corresponding component that is under version control</value>
        [DataMember(Name="versionedComponentId", EmitDefaultValue=false)]
        public string VersionedComponentId { get; set; }

        /// <summary>
        /// The id of parent process group of this component if applicable.
        /// </summary>
        /// <value>The id of parent process group of this component if applicable.</value>
        [DataMember(Name="parentGroupId", EmitDefaultValue=false)]
        public string ParentGroupId { get; set; }

        /// <summary>
        /// The position of this component in the UI if applicable.
        /// </summary>
        /// <value>The position of this component in the UI if applicable.</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public PositionDTO Position { get; set; }

        /// <summary>
        /// The name of the port.
        /// </summary>
        /// <value>The name of the port.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The comments for the port.
        /// </summary>
        /// <value>The comments for the port.</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }



        /// <summary>
        /// Whether the port has incoming or output connections to a remote NiFi. This is only applicable when the port is running in the root group.
        /// </summary>
        /// <value>Whether the port has incoming or output connections to a remote NiFi. This is only applicable when the port is running in the root group.</value>
        [DataMember(Name="transmitting", EmitDefaultValue=false)]
        public bool? Transmitting { get; set; }

        /// <summary>
        /// The number of tasks that should be concurrently scheduled for the port.
        /// </summary>
        /// <value>The number of tasks that should be concurrently scheduled for the port.</value>
        [DataMember(Name="concurrentlySchedulableTaskCount", EmitDefaultValue=false)]
        public int? ConcurrentlySchedulableTaskCount { get; set; }

        /// <summary>
        /// The users that are allowed to access the port.
        /// </summary>
        /// <value>The users that are allowed to access the port.</value>
        [DataMember(Name="userAccessControl", EmitDefaultValue=false)]
        public List<string> UserAccessControl { get; set; }

        /// <summary>
        /// The user groups that are allowed to access the port.
        /// </summary>
        /// <value>The user groups that are allowed to access the port.</value>
        [DataMember(Name="groupAccessControl", EmitDefaultValue=false)]
        public List<string> GroupAccessControl { get; set; }

        /// <summary>
        /// Gets the validation errors from this port. These validation errors represent the problems with the port that must be resolved before it can be started.
        /// </summary>
        /// <value>Gets the validation errors from this port. These validation errors represent the problems with the port that must be resolved before it can be started.</value>
        [DataMember(Name="validationErrors", EmitDefaultValue=false)]
        public List<string> ValidationErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PortDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  VersionedComponentId: ").Append(this.VersionedComponentId).Append("\n");
            sb.Append("  ParentGroupId: ").Append(this.ParentGroupId).Append("\n");
            sb.Append("  Position: ").Append(this.Position).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  Comments: ").Append(this.Comments).Append("\n");
            sb.Append("  State: ").Append(this.State).Append("\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Transmitting: ").Append(this.Transmitting).Append("\n");
            sb.Append("  ConcurrentlySchedulableTaskCount: ").Append(this.ConcurrentlySchedulableTaskCount).Append("\n");
            sb.Append("  UserAccessControl: ").Append(this.UserAccessControl).Append("\n");
            sb.Append("  GroupAccessControl: ").Append(this.GroupAccessControl).Append("\n");
            sb.Append("  ValidationErrors: ").Append(this.ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PortDTO);
        }

        /// <summary>
        /// Returns true if PortDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PortDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VersionedComponentId == input.VersionedComponentId ||
                    (this.VersionedComponentId != null &&
                    this.VersionedComponentId.Equals(input.VersionedComponentId))
                ) && 
                (
                    this.ParentGroupId == input.ParentGroupId ||
                    (this.ParentGroupId != null &&
                    this.ParentGroupId.Equals(input.ParentGroupId))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Transmitting == input.Transmitting ||
                    (this.Transmitting != null &&
                    this.Transmitting.Equals(input.Transmitting))
                ) && 
                (
                    this.ConcurrentlySchedulableTaskCount == input.ConcurrentlySchedulableTaskCount ||
                    (this.ConcurrentlySchedulableTaskCount != null &&
                    this.ConcurrentlySchedulableTaskCount.Equals(input.ConcurrentlySchedulableTaskCount))
                ) && 
                (
                    this.UserAccessControl == input.UserAccessControl ||
                    this.UserAccessControl != null &&
                    this.UserAccessControl.SequenceEqual(input.UserAccessControl)
                ) && 
                (
                    this.GroupAccessControl == input.GroupAccessControl ||
                    this.GroupAccessControl != null &&
                    this.GroupAccessControl.SequenceEqual(input.GroupAccessControl)
                ) && 
                (
                    this.ValidationErrors == input.ValidationErrors ||
                    this.ValidationErrors != null &&
                    this.ValidationErrors.SequenceEqual(input.ValidationErrors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.VersionedComponentId != null)
                    hashCode = hashCode * 59 + this.VersionedComponentId.GetHashCode();
                if (this.ParentGroupId != null)
                    hashCode = hashCode * 59 + this.ParentGroupId.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Transmitting != null)
                    hashCode = hashCode * 59 + this.Transmitting.GetHashCode();
                if (this.ConcurrentlySchedulableTaskCount != null)
                    hashCode = hashCode * 59 + this.ConcurrentlySchedulableTaskCount.GetHashCode();
                if (this.UserAccessControl != null)
                    hashCode = hashCode * 59 + this.UserAccessControl.GetHashCode();
                if (this.GroupAccessControl != null)
                    hashCode = hashCode * 59 + this.GroupAccessControl.GetHashCode();
                if (this.ValidationErrors != null)
                    hashCode = hashCode * 59 + this.ValidationErrors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
