/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// VersionedConnection
    /// </summary>
    [DataContract]
    public partial class VersionedConnection :  IEquatable<VersionedConnection>, IValidatableObject
    {
        /// <summary>
        /// The Strategy to use for load balancing data across the cluster, or null, if no Load Balance Strategy has been specified.
        /// </summary>
        /// <value>The Strategy to use for load balancing data across the cluster, or null, if no Load Balance Strategy has been specified.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LoadBalanceStrategyEnum
        {
            
            /// <summary>
            /// Enum DONOTLOADBALANCE for value: DO_NOT_LOAD_BALANCE
            /// </summary>
            [EnumMember(Value = "DO_NOT_LOAD_BALANCE")]
            DONOTLOADBALANCE = 1,
            
            /// <summary>
            /// Enum PARTITIONBYATTRIBUTE for value: PARTITION_BY_ATTRIBUTE
            /// </summary>
            [EnumMember(Value = "PARTITION_BY_ATTRIBUTE")]
            PARTITIONBYATTRIBUTE = 2,
            
            /// <summary>
            /// Enum ROUNDROBIN for value: ROUND_ROBIN
            /// </summary>
            [EnumMember(Value = "ROUND_ROBIN")]
            ROUNDROBIN = 3,
            
            /// <summary>
            /// Enum SINGLENODE for value: SINGLE_NODE
            /// </summary>
            [EnumMember(Value = "SINGLE_NODE")]
            SINGLENODE = 4
        }

        /// <summary>
        /// The Strategy to use for load balancing data across the cluster, or null, if no Load Balance Strategy has been specified.
        /// </summary>
        /// <value>The Strategy to use for load balancing data across the cluster, or null, if no Load Balance Strategy has been specified.</value>
        [DataMember(Name="loadBalanceStrategy", EmitDefaultValue=false)]
        public LoadBalanceStrategyEnum? LoadBalanceStrategy { get; set; }
        /// <summary>
        /// Whether or not compression should be used when transferring FlowFiles between nodes
        /// </summary>
        /// <value>Whether or not compression should be used when transferring FlowFiles between nodes</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LoadBalanceCompressionEnum
        {
            
            /// <summary>
            /// Enum DONOTCOMPRESS for value: DO_NOT_COMPRESS
            /// </summary>
            [EnumMember(Value = "DO_NOT_COMPRESS")]
            DONOTCOMPRESS = 1,
            
            /// <summary>
            /// Enum COMPRESSATTRIBUTESONLY for value: COMPRESS_ATTRIBUTES_ONLY
            /// </summary>
            [EnumMember(Value = "COMPRESS_ATTRIBUTES_ONLY")]
            COMPRESSATTRIBUTESONLY = 2,
            
            /// <summary>
            /// Enum COMPRESSATTRIBUTESANDCONTENT for value: COMPRESS_ATTRIBUTES_AND_CONTENT
            /// </summary>
            [EnumMember(Value = "COMPRESS_ATTRIBUTES_AND_CONTENT")]
            COMPRESSATTRIBUTESANDCONTENT = 3
        }

        /// <summary>
        /// Whether or not compression should be used when transferring FlowFiles between nodes
        /// </summary>
        /// <value>Whether or not compression should be used when transferring FlowFiles between nodes</value>
        [DataMember(Name="loadBalanceCompression", EmitDefaultValue=false)]
        public LoadBalanceCompressionEnum? LoadBalanceCompression { get; set; }
        /// <summary>
        /// Defines ComponentType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComponentTypeEnum
        {
            
            /// <summary>
            /// Enum CONNECTION for value: CONNECTION
            /// </summary>
            [EnumMember(Value = "CONNECTION")]
            CONNECTION = 1,
            
            /// <summary>
            /// Enum PROCESSOR for value: PROCESSOR
            /// </summary>
            [EnumMember(Value = "PROCESSOR")]
            PROCESSOR = 2,
            
            /// <summary>
            /// Enum PROCESSGROUP for value: PROCESS_GROUP
            /// </summary>
            [EnumMember(Value = "PROCESS_GROUP")]
            PROCESSGROUP = 3,
            
            /// <summary>
            /// Enum REMOTEPROCESSGROUP for value: REMOTE_PROCESS_GROUP
            /// </summary>
            [EnumMember(Value = "REMOTE_PROCESS_GROUP")]
            REMOTEPROCESSGROUP = 4,
            
            /// <summary>
            /// Enum INPUTPORT for value: INPUT_PORT
            /// </summary>
            [EnumMember(Value = "INPUT_PORT")]
            INPUTPORT = 5,
            
            /// <summary>
            /// Enum OUTPUTPORT for value: OUTPUT_PORT
            /// </summary>
            [EnumMember(Value = "OUTPUT_PORT")]
            OUTPUTPORT = 6,
            
            /// <summary>
            /// Enum REMOTEINPUTPORT for value: REMOTE_INPUT_PORT
            /// </summary>
            [EnumMember(Value = "REMOTE_INPUT_PORT")]
            REMOTEINPUTPORT = 7,
            
            /// <summary>
            /// Enum REMOTEOUTPUTPORT for value: REMOTE_OUTPUT_PORT
            /// </summary>
            [EnumMember(Value = "REMOTE_OUTPUT_PORT")]
            REMOTEOUTPUTPORT = 8,
            
            /// <summary>
            /// Enum FUNNEL for value: FUNNEL
            /// </summary>
            [EnumMember(Value = "FUNNEL")]
            FUNNEL = 9,
            
            /// <summary>
            /// Enum LABEL for value: LABEL
            /// </summary>
            [EnumMember(Value = "LABEL")]
            LABEL = 10,
            
            /// <summary>
            /// Enum CONTROLLERSERVICE for value: CONTROLLER_SERVICE
            /// </summary>
            [EnumMember(Value = "CONTROLLER_SERVICE")]
            CONTROLLERSERVICE = 11
        }

        /// <summary>
        /// Gets or Sets ComponentType
        /// </summary>
        [DataMember(Name="componentType", EmitDefaultValue=false)]
        public ComponentTypeEnum? ComponentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionedConnection" /> class.
        /// </summary>
        /// <param name="identifier">The component&#39;s unique identifier.</param>
        /// <param name="name">The component&#39;s name.</param>
        /// <param name="comments">The user-supplied comments for the component.</param>
        /// <param name="position">The component&#39;s position on the graph.</param>
        /// <param name="source">The source of the connection..</param>
        /// <param name="destination">The destination of the connection..</param>
        /// <param name="labelIndex">The index of the bend point where to place the connection label..</param>
        /// <param name="zIndex">The z index of the connection..</param>
        /// <param name="selectedRelationships">The selected relationship that comprise the connection..</param>
        /// <param name="backPressureObjectThreshold">The object count threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won&#39;t impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue..</param>
        /// <param name="backPressureDataSizeThreshold">The object data size threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won&#39;t impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue..</param>
        /// <param name="flowFileExpiration">The amount of time a flow file may be in the flow before it will be automatically aged out of the flow. Once a flow file reaches this age it will be terminated from the flow the next time a processor attempts to start work on it..</param>
        /// <param name="prioritizers">The comparators used to prioritize the queue..</param>
        /// <param name="bends">The bend points on the connection..</param>
        /// <param name="loadBalanceStrategy">The Strategy to use for load balancing data across the cluster, or null, if no Load Balance Strategy has been specified..</param>
        /// <param name="partitioningAttribute">The attribute to use for partitioning data as it is load balanced across the cluster. If the Load Balance Strategy is configured to use PARTITION_BY_ATTRIBUTE, the value returned by this method is the name of the FlowFile Attribute that will be used to determine which node in the cluster should receive a given FlowFile. If the Load Balance Strategy is unset or is set to any other value, the Partitioning Attribute has no effect..</param>
        /// <param name="loadBalanceCompression">Whether or not compression should be used when transferring FlowFiles between nodes.</param>
        /// <param name="componentType">componentType.</param>
        /// <param name="groupIdentifier">The ID of the Process Group that this component belongs to.</param>
        public VersionedConnection(string identifier = default(string), string name = default(string), string comments = default(string), Position position = default(Position), ConnectableComponent source = default(ConnectableComponent), ConnectableComponent destination = default(ConnectableComponent), int? labelIndex = default(int?), long? zIndex = default(long?), List<string> selectedRelationships = default(List<string>), long? backPressureObjectThreshold = default(long?), string backPressureDataSizeThreshold = default(string), string flowFileExpiration = default(string), List<string> prioritizers = default(List<string>), List<Position> bends = default(List<Position>), LoadBalanceStrategyEnum? loadBalanceStrategy = default(LoadBalanceStrategyEnum?), string partitioningAttribute = default(string), LoadBalanceCompressionEnum? loadBalanceCompression = default(LoadBalanceCompressionEnum?), ComponentTypeEnum? componentType = default(ComponentTypeEnum?), string groupIdentifier = default(string))
        {
            this.Identifier = identifier;
            this.Name = name;
            this.Comments = comments;
            this.Position = position;
            this.Source = source;
            this.Destination = destination;
            this.LabelIndex = labelIndex;
            this.ZIndex = zIndex;
            this.SelectedRelationships = selectedRelationships;
            this.BackPressureObjectThreshold = backPressureObjectThreshold;
            this.BackPressureDataSizeThreshold = backPressureDataSizeThreshold;
            this.FlowFileExpiration = flowFileExpiration;
            this.Prioritizers = prioritizers;
            this.Bends = bends;
            this.LoadBalanceStrategy = loadBalanceStrategy;
            this.PartitioningAttribute = partitioningAttribute;
            this.LoadBalanceCompression = loadBalanceCompression;
            this.ComponentType = componentType;
            this.GroupIdentifier = groupIdentifier;
        }
        
        /// <summary>
        /// The component&#39;s unique identifier
        /// </summary>
        /// <value>The component&#39;s unique identifier</value>
        [DataMember(Name="identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }

        /// <summary>
        /// The component&#39;s name
        /// </summary>
        /// <value>The component&#39;s name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The user-supplied comments for the component
        /// </summary>
        /// <value>The user-supplied comments for the component</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// The component&#39;s position on the graph
        /// </summary>
        /// <value>The component&#39;s position on the graph</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public Position Position { get; set; }

        /// <summary>
        /// The source of the connection.
        /// </summary>
        /// <value>The source of the connection.</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public ConnectableComponent Source { get; set; }

        /// <summary>
        /// The destination of the connection.
        /// </summary>
        /// <value>The destination of the connection.</value>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public ConnectableComponent Destination { get; set; }

        /// <summary>
        /// The index of the bend point where to place the connection label.
        /// </summary>
        /// <value>The index of the bend point where to place the connection label.</value>
        [DataMember(Name="labelIndex", EmitDefaultValue=false)]
        public int? LabelIndex { get; set; }

        /// <summary>
        /// The z index of the connection.
        /// </summary>
        /// <value>The z index of the connection.</value>
        [DataMember(Name="zIndex", EmitDefaultValue=false)]
        public long? ZIndex { get; set; }

        /// <summary>
        /// The selected relationship that comprise the connection.
        /// </summary>
        /// <value>The selected relationship that comprise the connection.</value>
        [DataMember(Name="selectedRelationships", EmitDefaultValue=false)]
        public List<string> SelectedRelationships { get; set; }

        /// <summary>
        /// The object count threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won&#39;t impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue.
        /// </summary>
        /// <value>The object count threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won&#39;t impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue.</value>
        [DataMember(Name="backPressureObjectThreshold", EmitDefaultValue=false)]
        public long? BackPressureObjectThreshold { get; set; }

        /// <summary>
        /// The object data size threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won&#39;t impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue.
        /// </summary>
        /// <value>The object data size threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won&#39;t impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue.</value>
        [DataMember(Name="backPressureDataSizeThreshold", EmitDefaultValue=false)]
        public string BackPressureDataSizeThreshold { get; set; }

        /// <summary>
        /// The amount of time a flow file may be in the flow before it will be automatically aged out of the flow. Once a flow file reaches this age it will be terminated from the flow the next time a processor attempts to start work on it.
        /// </summary>
        /// <value>The amount of time a flow file may be in the flow before it will be automatically aged out of the flow. Once a flow file reaches this age it will be terminated from the flow the next time a processor attempts to start work on it.</value>
        [DataMember(Name="flowFileExpiration", EmitDefaultValue=false)]
        public string FlowFileExpiration { get; set; }

        /// <summary>
        /// The comparators used to prioritize the queue.
        /// </summary>
        /// <value>The comparators used to prioritize the queue.</value>
        [DataMember(Name="prioritizers", EmitDefaultValue=false)]
        public List<string> Prioritizers { get; set; }

        /// <summary>
        /// The bend points on the connection.
        /// </summary>
        /// <value>The bend points on the connection.</value>
        [DataMember(Name="bends", EmitDefaultValue=false)]
        public List<Position> Bends { get; set; }


        /// <summary>
        /// The attribute to use for partitioning data as it is load balanced across the cluster. If the Load Balance Strategy is configured to use PARTITION_BY_ATTRIBUTE, the value returned by this method is the name of the FlowFile Attribute that will be used to determine which node in the cluster should receive a given FlowFile. If the Load Balance Strategy is unset or is set to any other value, the Partitioning Attribute has no effect.
        /// </summary>
        /// <value>The attribute to use for partitioning data as it is load balanced across the cluster. If the Load Balance Strategy is configured to use PARTITION_BY_ATTRIBUTE, the value returned by this method is the name of the FlowFile Attribute that will be used to determine which node in the cluster should receive a given FlowFile. If the Load Balance Strategy is unset or is set to any other value, the Partitioning Attribute has no effect.</value>
        [DataMember(Name="partitioningAttribute", EmitDefaultValue=false)]
        public string PartitioningAttribute { get; set; }



        /// <summary>
        /// The ID of the Process Group that this component belongs to
        /// </summary>
        /// <value>The ID of the Process Group that this component belongs to</value>
        [DataMember(Name="groupIdentifier", EmitDefaultValue=false)]
        public string GroupIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VersionedConnection {\n");
            sb.Append("  Identifier: ").Append(this.Identifier).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  Comments: ").Append(this.Comments).Append("\n");
            sb.Append("  Position: ").Append(this.Position).Append("\n");
            sb.Append("  Source: ").Append(this.Source).Append("\n");
            sb.Append("  Destination: ").Append(this.Destination).Append("\n");
            sb.Append("  LabelIndex: ").Append(this.LabelIndex).Append("\n");
            sb.Append("  ZIndex: ").Append(this.ZIndex).Append("\n");
            sb.Append("  SelectedRelationships: ").Append(this.SelectedRelationships).Append("\n");
            sb.Append("  BackPressureObjectThreshold: ").Append(this.BackPressureObjectThreshold).Append("\n");
            sb.Append("  BackPressureDataSizeThreshold: ").Append(this.BackPressureDataSizeThreshold).Append("\n");
            sb.Append("  FlowFileExpiration: ").Append(this.FlowFileExpiration).Append("\n");
            sb.Append("  Prioritizers: ").Append(this.Prioritizers).Append("\n");
            sb.Append("  Bends: ").Append(this.Bends).Append("\n");
            sb.Append("  LoadBalanceStrategy: ").Append(this.LoadBalanceStrategy).Append("\n");
            sb.Append("  PartitioningAttribute: ").Append(this.PartitioningAttribute).Append("\n");
            sb.Append("  LoadBalanceCompression: ").Append(this.LoadBalanceCompression).Append("\n");
            sb.Append("  ComponentType: ").Append(this.ComponentType).Append("\n");
            sb.Append("  GroupIdentifier: ").Append(this.GroupIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VersionedConnection);
        }

        /// <summary>
        /// Returns true if VersionedConnection instances are equal
        /// </summary>
        /// <param name="input">Instance of VersionedConnection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionedConnection input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.LabelIndex == input.LabelIndex ||
                    (this.LabelIndex != null &&
                    this.LabelIndex.Equals(input.LabelIndex))
                ) && 
                (
                    this.ZIndex == input.ZIndex ||
                    (this.ZIndex != null &&
                    this.ZIndex.Equals(input.ZIndex))
                ) && 
                (
                    this.SelectedRelationships == input.SelectedRelationships ||
                    this.SelectedRelationships != null &&
                    this.SelectedRelationships.SequenceEqual(input.SelectedRelationships)
                ) && 
                (
                    this.BackPressureObjectThreshold == input.BackPressureObjectThreshold ||
                    (this.BackPressureObjectThreshold != null &&
                    this.BackPressureObjectThreshold.Equals(input.BackPressureObjectThreshold))
                ) && 
                (
                    this.BackPressureDataSizeThreshold == input.BackPressureDataSizeThreshold ||
                    (this.BackPressureDataSizeThreshold != null &&
                    this.BackPressureDataSizeThreshold.Equals(input.BackPressureDataSizeThreshold))
                ) && 
                (
                    this.FlowFileExpiration == input.FlowFileExpiration ||
                    (this.FlowFileExpiration != null &&
                    this.FlowFileExpiration.Equals(input.FlowFileExpiration))
                ) && 
                (
                    this.Prioritizers == input.Prioritizers ||
                    this.Prioritizers != null &&
                    this.Prioritizers.SequenceEqual(input.Prioritizers)
                ) && 
                (
                    this.Bends == input.Bends ||
                    this.Bends != null &&
                    this.Bends.SequenceEqual(input.Bends)
                ) && 
                (
                    this.LoadBalanceStrategy == input.LoadBalanceStrategy ||
                    (this.LoadBalanceStrategy != null &&
                    this.LoadBalanceStrategy.Equals(input.LoadBalanceStrategy))
                ) && 
                (
                    this.PartitioningAttribute == input.PartitioningAttribute ||
                    (this.PartitioningAttribute != null &&
                    this.PartitioningAttribute.Equals(input.PartitioningAttribute))
                ) && 
                (
                    this.LoadBalanceCompression == input.LoadBalanceCompression ||
                    (this.LoadBalanceCompression != null &&
                    this.LoadBalanceCompression.Equals(input.LoadBalanceCompression))
                ) && 
                (
                    this.ComponentType == input.ComponentType ||
                    (this.ComponentType != null &&
                    this.ComponentType.Equals(input.ComponentType))
                ) && 
                (
                    this.GroupIdentifier == input.GroupIdentifier ||
                    (this.GroupIdentifier != null &&
                    this.GroupIdentifier.Equals(input.GroupIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Destination != null)
                    hashCode = hashCode * 59 + this.Destination.GetHashCode();
                if (this.LabelIndex != null)
                    hashCode = hashCode * 59 + this.LabelIndex.GetHashCode();
                if (this.ZIndex != null)
                    hashCode = hashCode * 59 + this.ZIndex.GetHashCode();
                if (this.SelectedRelationships != null)
                    hashCode = hashCode * 59 + this.SelectedRelationships.GetHashCode();
                if (this.BackPressureObjectThreshold != null)
                    hashCode = hashCode * 59 + this.BackPressureObjectThreshold.GetHashCode();
                if (this.BackPressureDataSizeThreshold != null)
                    hashCode = hashCode * 59 + this.BackPressureDataSizeThreshold.GetHashCode();
                if (this.FlowFileExpiration != null)
                    hashCode = hashCode * 59 + this.FlowFileExpiration.GetHashCode();
                if (this.Prioritizers != null)
                    hashCode = hashCode * 59 + this.Prioritizers.GetHashCode();
                if (this.Bends != null)
                    hashCode = hashCode * 59 + this.Bends.GetHashCode();
                if (this.LoadBalanceStrategy != null)
                    hashCode = hashCode * 59 + this.LoadBalanceStrategy.GetHashCode();
                if (this.PartitioningAttribute != null)
                    hashCode = hashCode * 59 + this.PartitioningAttribute.GetHashCode();
                if (this.LoadBalanceCompression != null)
                    hashCode = hashCode * 59 + this.LoadBalanceCompression.GetHashCode();
                if (this.ComponentType != null)
                    hashCode = hashCode * 59 + this.ComponentType.GetHashCode();
                if (this.GroupIdentifier != null)
                    hashCode = hashCode * 59 + this.GroupIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
