/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// StorageUsageDTO
    /// </summary>
    [DataContract]
    public partial class StorageUsageDTO :  IEquatable<StorageUsageDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageUsageDTO" /> class.
        /// </summary>
        /// <param name="identifier">The identifier of this storage location. The identifier will correspond to the identifier keyed in the storage configuration..</param>
        /// <param name="freeSpace">Amount of free space..</param>
        /// <param name="totalSpace">Amount of total space..</param>
        /// <param name="usedSpace">Amount of used space..</param>
        /// <param name="freeSpaceBytes">The number of bytes of free space..</param>
        /// <param name="totalSpaceBytes">The number of bytes of total space..</param>
        /// <param name="usedSpaceBytes">The number of bytes of used space..</param>
        /// <param name="utilization">Utilization of this storage location..</param>
        public StorageUsageDTO(string identifier = default(string), string freeSpace = default(string), string totalSpace = default(string), string usedSpace = default(string), long? freeSpaceBytes = default(long?), long? totalSpaceBytes = default(long?), long? usedSpaceBytes = default(long?), string utilization = default(string))
        {
            this.Identifier = identifier;
            this.FreeSpace = freeSpace;
            this.TotalSpace = totalSpace;
            this.UsedSpace = usedSpace;
            this.FreeSpaceBytes = freeSpaceBytes;
            this.TotalSpaceBytes = totalSpaceBytes;
            this.UsedSpaceBytes = usedSpaceBytes;
            this.Utilization = utilization;
        }
        
        /// <summary>
        /// The identifier of this storage location. The identifier will correspond to the identifier keyed in the storage configuration.
        /// </summary>
        /// <value>The identifier of this storage location. The identifier will correspond to the identifier keyed in the storage configuration.</value>
        [DataMember(Name="identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Amount of free space.
        /// </summary>
        /// <value>Amount of free space.</value>
        [DataMember(Name="freeSpace", EmitDefaultValue=false)]
        public string FreeSpace { get; set; }

        /// <summary>
        /// Amount of total space.
        /// </summary>
        /// <value>Amount of total space.</value>
        [DataMember(Name="totalSpace", EmitDefaultValue=false)]
        public string TotalSpace { get; set; }

        /// <summary>
        /// Amount of used space.
        /// </summary>
        /// <value>Amount of used space.</value>
        [DataMember(Name="usedSpace", EmitDefaultValue=false)]
        public string UsedSpace { get; set; }

        /// <summary>
        /// The number of bytes of free space.
        /// </summary>
        /// <value>The number of bytes of free space.</value>
        [DataMember(Name="freeSpaceBytes", EmitDefaultValue=false)]
        public long? FreeSpaceBytes { get; set; }

        /// <summary>
        /// The number of bytes of total space.
        /// </summary>
        /// <value>The number of bytes of total space.</value>
        [DataMember(Name="totalSpaceBytes", EmitDefaultValue=false)]
        public long? TotalSpaceBytes { get; set; }

        /// <summary>
        /// The number of bytes of used space.
        /// </summary>
        /// <value>The number of bytes of used space.</value>
        [DataMember(Name="usedSpaceBytes", EmitDefaultValue=false)]
        public long? UsedSpaceBytes { get; set; }

        /// <summary>
        /// Utilization of this storage location.
        /// </summary>
        /// <value>Utilization of this storage location.</value>
        [DataMember(Name="utilization", EmitDefaultValue=false)]
        public string Utilization { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StorageUsageDTO {\n");
            sb.Append("  Identifier: ").Append(this.Identifier).Append("\n");
            sb.Append("  FreeSpace: ").Append(this.FreeSpace).Append("\n");
            sb.Append("  TotalSpace: ").Append(this.TotalSpace).Append("\n");
            sb.Append("  UsedSpace: ").Append(this.UsedSpace).Append("\n");
            sb.Append("  FreeSpaceBytes: ").Append(this.FreeSpaceBytes).Append("\n");
            sb.Append("  TotalSpaceBytes: ").Append(this.TotalSpaceBytes).Append("\n");
            sb.Append("  UsedSpaceBytes: ").Append(this.UsedSpaceBytes).Append("\n");
            sb.Append("  Utilization: ").Append(this.Utilization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageUsageDTO);
        }

        /// <summary>
        /// Returns true if StorageUsageDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageUsageDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageUsageDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.FreeSpace == input.FreeSpace ||
                    (this.FreeSpace != null &&
                    this.FreeSpace.Equals(input.FreeSpace))
                ) && 
                (
                    this.TotalSpace == input.TotalSpace ||
                    (this.TotalSpace != null &&
                    this.TotalSpace.Equals(input.TotalSpace))
                ) && 
                (
                    this.UsedSpace == input.UsedSpace ||
                    (this.UsedSpace != null &&
                    this.UsedSpace.Equals(input.UsedSpace))
                ) && 
                (
                    this.FreeSpaceBytes == input.FreeSpaceBytes ||
                    (this.FreeSpaceBytes != null &&
                    this.FreeSpaceBytes.Equals(input.FreeSpaceBytes))
                ) && 
                (
                    this.TotalSpaceBytes == input.TotalSpaceBytes ||
                    (this.TotalSpaceBytes != null &&
                    this.TotalSpaceBytes.Equals(input.TotalSpaceBytes))
                ) && 
                (
                    this.UsedSpaceBytes == input.UsedSpaceBytes ||
                    (this.UsedSpaceBytes != null &&
                    this.UsedSpaceBytes.Equals(input.UsedSpaceBytes))
                ) && 
                (
                    this.Utilization == input.Utilization ||
                    (this.Utilization != null &&
                    this.Utilization.Equals(input.Utilization))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.FreeSpace != null)
                    hashCode = hashCode * 59 + this.FreeSpace.GetHashCode();
                if (this.TotalSpace != null)
                    hashCode = hashCode * 59 + this.TotalSpace.GetHashCode();
                if (this.UsedSpace != null)
                    hashCode = hashCode * 59 + this.UsedSpace.GetHashCode();
                if (this.FreeSpaceBytes != null)
                    hashCode = hashCode * 59 + this.FreeSpaceBytes.GetHashCode();
                if (this.TotalSpaceBytes != null)
                    hashCode = hashCode * 59 + this.TotalSpaceBytes.GetHashCode();
                if (this.UsedSpaceBytes != null)
                    hashCode = hashCode * 59 + this.UsedSpaceBytes.GetHashCode();
                if (this.Utilization != null)
                    hashCode = hashCode * 59 + this.Utilization.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
