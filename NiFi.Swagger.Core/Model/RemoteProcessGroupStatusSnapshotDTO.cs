/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// RemoteProcessGroupStatusSnapshotDTO
    /// </summary>
    [DataContract]
    public partial class RemoteProcessGroupStatusSnapshotDTO :  IEquatable<RemoteProcessGroupStatusSnapshotDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteProcessGroupStatusSnapshotDTO" /> class.
        /// </summary>
        /// <param name="id">The id of the remote process group..</param>
        /// <param name="groupId">The id of the parent process group the remote process group resides in..</param>
        /// <param name="name">The name of the remote process group..</param>
        /// <param name="targetUri">The URI of the target system..</param>
        /// <param name="transmissionStatus">The transmission status of the remote process group..</param>
        /// <param name="activeThreadCount">The number of active threads for the remote process group..</param>
        /// <param name="flowFilesSent">The number of FlowFiles sent to the remote process group in the last 5 minutes..</param>
        /// <param name="bytesSent">The size of the FlowFiles sent to the remote process group in the last 5 minutes..</param>
        /// <param name="sent">The count/size of the flowfiles sent to the remote process group in the last 5 minutes..</param>
        /// <param name="flowFilesReceived">The number of FlowFiles received from the remote process group in the last 5 minutes..</param>
        /// <param name="bytesReceived">The size of the FlowFiles received from the remote process group in the last 5 minutes..</param>
        /// <param name="received">The count/size of the flowfiles received from the remote process group in the last 5 minutes..</param>
        public RemoteProcessGroupStatusSnapshotDTO(string id = default(string), string groupId = default(string), string name = default(string), string targetUri = default(string), string transmissionStatus = default(string), int? activeThreadCount = default(int?), int? flowFilesSent = default(int?), long? bytesSent = default(long?), string sent = default(string), int? flowFilesReceived = default(int?), long? bytesReceived = default(long?), string received = default(string))
        {
            this.Id = id;
            this.GroupId = groupId;
            this.Name = name;
            this.TargetUri = targetUri;
            this.TransmissionStatus = transmissionStatus;
            this.ActiveThreadCount = activeThreadCount;
            this.FlowFilesSent = flowFilesSent;
            this.BytesSent = bytesSent;
            this.Sent = sent;
            this.FlowFilesReceived = flowFilesReceived;
            this.BytesReceived = bytesReceived;
            this.Received = received;
        }
        
        /// <summary>
        /// The id of the remote process group.
        /// </summary>
        /// <value>The id of the remote process group.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The id of the parent process group the remote process group resides in.
        /// </summary>
        /// <value>The id of the parent process group the remote process group resides in.</value>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public string GroupId { get; set; }

        /// <summary>
        /// The name of the remote process group.
        /// </summary>
        /// <value>The name of the remote process group.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The URI of the target system.
        /// </summary>
        /// <value>The URI of the target system.</value>
        [DataMember(Name="targetUri", EmitDefaultValue=false)]
        public string TargetUri { get; set; }

        /// <summary>
        /// The transmission status of the remote process group.
        /// </summary>
        /// <value>The transmission status of the remote process group.</value>
        [DataMember(Name="transmissionStatus", EmitDefaultValue=false)]
        public string TransmissionStatus { get; set; }

        /// <summary>
        /// The number of active threads for the remote process group.
        /// </summary>
        /// <value>The number of active threads for the remote process group.</value>
        [DataMember(Name="activeThreadCount", EmitDefaultValue=false)]
        public int? ActiveThreadCount { get; set; }

        /// <summary>
        /// The number of FlowFiles sent to the remote process group in the last 5 minutes.
        /// </summary>
        /// <value>The number of FlowFiles sent to the remote process group in the last 5 minutes.</value>
        [DataMember(Name="flowFilesSent", EmitDefaultValue=false)]
        public int? FlowFilesSent { get; set; }

        /// <summary>
        /// The size of the FlowFiles sent to the remote process group in the last 5 minutes.
        /// </summary>
        /// <value>The size of the FlowFiles sent to the remote process group in the last 5 minutes.</value>
        [DataMember(Name="bytesSent", EmitDefaultValue=false)]
        public long? BytesSent { get; set; }

        /// <summary>
        /// The count/size of the flowfiles sent to the remote process group in the last 5 minutes.
        /// </summary>
        /// <value>The count/size of the flowfiles sent to the remote process group in the last 5 minutes.</value>
        [DataMember(Name="sent", EmitDefaultValue=false)]
        public string Sent { get; set; }

        /// <summary>
        /// The number of FlowFiles received from the remote process group in the last 5 minutes.
        /// </summary>
        /// <value>The number of FlowFiles received from the remote process group in the last 5 minutes.</value>
        [DataMember(Name="flowFilesReceived", EmitDefaultValue=false)]
        public int? FlowFilesReceived { get; set; }

        /// <summary>
        /// The size of the FlowFiles received from the remote process group in the last 5 minutes.
        /// </summary>
        /// <value>The size of the FlowFiles received from the remote process group in the last 5 minutes.</value>
        [DataMember(Name="bytesReceived", EmitDefaultValue=false)]
        public long? BytesReceived { get; set; }

        /// <summary>
        /// The count/size of the flowfiles received from the remote process group in the last 5 minutes.
        /// </summary>
        /// <value>The count/size of the flowfiles received from the remote process group in the last 5 minutes.</value>
        [DataMember(Name="received", EmitDefaultValue=false)]
        public string Received { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteProcessGroupStatusSnapshotDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  GroupId: ").Append(this.GroupId).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  TargetUri: ").Append(this.TargetUri).Append("\n");
            sb.Append("  TransmissionStatus: ").Append(this.TransmissionStatus).Append("\n");
            sb.Append("  ActiveThreadCount: ").Append(this.ActiveThreadCount).Append("\n");
            sb.Append("  FlowFilesSent: ").Append(this.FlowFilesSent).Append("\n");
            sb.Append("  BytesSent: ").Append(this.BytesSent).Append("\n");
            sb.Append("  Sent: ").Append(this.Sent).Append("\n");
            sb.Append("  FlowFilesReceived: ").Append(this.FlowFilesReceived).Append("\n");
            sb.Append("  BytesReceived: ").Append(this.BytesReceived).Append("\n");
            sb.Append("  Received: ").Append(this.Received).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemoteProcessGroupStatusSnapshotDTO);
        }

        /// <summary>
        /// Returns true if RemoteProcessGroupStatusSnapshotDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of RemoteProcessGroupStatusSnapshotDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteProcessGroupStatusSnapshotDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TargetUri == input.TargetUri ||
                    (this.TargetUri != null &&
                    this.TargetUri.Equals(input.TargetUri))
                ) && 
                (
                    this.TransmissionStatus == input.TransmissionStatus ||
                    (this.TransmissionStatus != null &&
                    this.TransmissionStatus.Equals(input.TransmissionStatus))
                ) && 
                (
                    this.ActiveThreadCount == input.ActiveThreadCount ||
                    (this.ActiveThreadCount != null &&
                    this.ActiveThreadCount.Equals(input.ActiveThreadCount))
                ) && 
                (
                    this.FlowFilesSent == input.FlowFilesSent ||
                    (this.FlowFilesSent != null &&
                    this.FlowFilesSent.Equals(input.FlowFilesSent))
                ) && 
                (
                    this.BytesSent == input.BytesSent ||
                    (this.BytesSent != null &&
                    this.BytesSent.Equals(input.BytesSent))
                ) && 
                (
                    this.Sent == input.Sent ||
                    (this.Sent != null &&
                    this.Sent.Equals(input.Sent))
                ) && 
                (
                    this.FlowFilesReceived == input.FlowFilesReceived ||
                    (this.FlowFilesReceived != null &&
                    this.FlowFilesReceived.Equals(input.FlowFilesReceived))
                ) && 
                (
                    this.BytesReceived == input.BytesReceived ||
                    (this.BytesReceived != null &&
                    this.BytesReceived.Equals(input.BytesReceived))
                ) && 
                (
                    this.Received == input.Received ||
                    (this.Received != null &&
                    this.Received.Equals(input.Received))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TargetUri != null)
                    hashCode = hashCode * 59 + this.TargetUri.GetHashCode();
                if (this.TransmissionStatus != null)
                    hashCode = hashCode * 59 + this.TransmissionStatus.GetHashCode();
                if (this.ActiveThreadCount != null)
                    hashCode = hashCode * 59 + this.ActiveThreadCount.GetHashCode();
                if (this.FlowFilesSent != null)
                    hashCode = hashCode * 59 + this.FlowFilesSent.GetHashCode();
                if (this.BytesSent != null)
                    hashCode = hashCode * 59 + this.BytesSent.GetHashCode();
                if (this.Sent != null)
                    hashCode = hashCode * 59 + this.Sent.GetHashCode();
                if (this.FlowFilesReceived != null)
                    hashCode = hashCode * 59 + this.FlowFilesReceived.GetHashCode();
                if (this.BytesReceived != null)
                    hashCode = hashCode * 59 + this.BytesReceived.GetHashCode();
                if (this.Received != null)
                    hashCode = hashCode * 59 + this.Received.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
