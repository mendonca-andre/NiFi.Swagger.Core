/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// ProvenanceLinkDTO
    /// </summary>
    [DataContract]
    public partial class ProvenanceLinkDTO :  IEquatable<ProvenanceLinkDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvenanceLinkDTO" /> class.
        /// </summary>
        /// <param name="sourceId">The source node id of the link..</param>
        /// <param name="targetId">The target node id of the link..</param>
        /// <param name="flowFileUuid">The flowfile uuid that traversed the link..</param>
        /// <param name="timestamp">The timestamp of the link (based on the destination)..</param>
        /// <param name="millis">The timestamp of this link in milliseconds..</param>
        public ProvenanceLinkDTO(string sourceId = default(string), string targetId = default(string), string flowFileUuid = default(string), string timestamp = default(string), long? millis = default(long?))
        {
            this.SourceId = sourceId;
            this.TargetId = targetId;
            this.FlowFileUuid = flowFileUuid;
            this.Timestamp = timestamp;
            this.Millis = millis;
        }
        
        /// <summary>
        /// The source node id of the link.
        /// </summary>
        /// <value>The source node id of the link.</value>
        [DataMember(Name="sourceId", EmitDefaultValue=false)]
        public string SourceId { get; set; }

        /// <summary>
        /// The target node id of the link.
        /// </summary>
        /// <value>The target node id of the link.</value>
        [DataMember(Name="targetId", EmitDefaultValue=false)]
        public string TargetId { get; set; }

        /// <summary>
        /// The flowfile uuid that traversed the link.
        /// </summary>
        /// <value>The flowfile uuid that traversed the link.</value>
        [DataMember(Name="flowFileUuid", EmitDefaultValue=false)]
        public string FlowFileUuid { get; set; }

        /// <summary>
        /// The timestamp of the link (based on the destination).
        /// </summary>
        /// <value>The timestamp of the link (based on the destination).</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// The timestamp of this link in milliseconds.
        /// </summary>
        /// <value>The timestamp of this link in milliseconds.</value>
        [DataMember(Name="millis", EmitDefaultValue=false)]
        public long? Millis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvenanceLinkDTO {\n");
            sb.Append("  SourceId: ").Append(this.SourceId).Append("\n");
            sb.Append("  TargetId: ").Append(this.TargetId).Append("\n");
            sb.Append("  FlowFileUuid: ").Append(this.FlowFileUuid).Append("\n");
            sb.Append("  Timestamp: ").Append(this.Timestamp).Append("\n");
            sb.Append("  Millis: ").Append(this.Millis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProvenanceLinkDTO);
        }

        /// <summary>
        /// Returns true if ProvenanceLinkDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProvenanceLinkDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvenanceLinkDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.TargetId == input.TargetId ||
                    (this.TargetId != null &&
                    this.TargetId.Equals(input.TargetId))
                ) && 
                (
                    this.FlowFileUuid == input.FlowFileUuid ||
                    (this.FlowFileUuid != null &&
                    this.FlowFileUuid.Equals(input.FlowFileUuid))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Millis == input.Millis ||
                    (this.Millis != null &&
                    this.Millis.Equals(input.Millis))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceId != null)
                    hashCode = hashCode * 59 + this.SourceId.GetHashCode();
                if (this.TargetId != null)
                    hashCode = hashCode * 59 + this.TargetId.GetHashCode();
                if (this.FlowFileUuid != null)
                    hashCode = hashCode * 59 + this.FlowFileUuid.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Millis != null)
                    hashCode = hashCode * 59 + this.Millis.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
