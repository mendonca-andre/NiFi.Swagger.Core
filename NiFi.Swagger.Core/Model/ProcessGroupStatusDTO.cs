/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// ProcessGroupStatusDTO
    /// </summary>
    [DataContract]
    public partial class ProcessGroupStatusDTO :  IEquatable<ProcessGroupStatusDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessGroupStatusDTO" /> class.
        /// </summary>
        /// <param name="id">The ID of the Process Group.</param>
        /// <param name="name">The name of the Process Group.</param>
        /// <param name="statsLastRefreshed">The time the status for the process group was last refreshed..</param>
        /// <param name="aggregateSnapshot">The aggregate status of all nodes in the cluster.</param>
        /// <param name="nodeSnapshots">The status reported by each node in the cluster. If the NiFi instance is a standalone instance, rather than a clustered instance, this value may be null..</param>
        public ProcessGroupStatusDTO(string id = default(string), string name = default(string), string statsLastRefreshed = default(string), ProcessGroupStatusSnapshotDTO aggregateSnapshot = default(ProcessGroupStatusSnapshotDTO), List<NodeProcessGroupStatusSnapshotDTO> nodeSnapshots = default(List<NodeProcessGroupStatusSnapshotDTO>))
        {
            this.Id = id;
            this.Name = name;
            this.StatsLastRefreshed = statsLastRefreshed;
            this.AggregateSnapshot = aggregateSnapshot;
            this.NodeSnapshots = nodeSnapshots;
        }
        
        /// <summary>
        /// The ID of the Process Group
        /// </summary>
        /// <value>The ID of the Process Group</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the Process Group
        /// </summary>
        /// <value>The name of the Process Group</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The time the status for the process group was last refreshed.
        /// </summary>
        /// <value>The time the status for the process group was last refreshed.</value>
        [DataMember(Name="statsLastRefreshed", EmitDefaultValue=false)]
        public string StatsLastRefreshed { get; set; }

        /// <summary>
        /// The aggregate status of all nodes in the cluster
        /// </summary>
        /// <value>The aggregate status of all nodes in the cluster</value>
        [DataMember(Name="aggregateSnapshot", EmitDefaultValue=false)]
        public ProcessGroupStatusSnapshotDTO AggregateSnapshot { get; set; }

        /// <summary>
        /// The status reported by each node in the cluster. If the NiFi instance is a standalone instance, rather than a clustered instance, this value may be null.
        /// </summary>
        /// <value>The status reported by each node in the cluster. If the NiFi instance is a standalone instance, rather than a clustered instance, this value may be null.</value>
        [DataMember(Name="nodeSnapshots", EmitDefaultValue=false)]
        public List<NodeProcessGroupStatusSnapshotDTO> NodeSnapshots { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessGroupStatusDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  StatsLastRefreshed: ").Append(this.StatsLastRefreshed).Append("\n");
            sb.Append("  AggregateSnapshot: ").Append(this.AggregateSnapshot).Append("\n");
            sb.Append("  NodeSnapshots: ").Append(this.NodeSnapshots).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessGroupStatusDTO);
        }

        /// <summary>
        /// Returns true if ProcessGroupStatusDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessGroupStatusDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessGroupStatusDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StatsLastRefreshed == input.StatsLastRefreshed ||
                    (this.StatsLastRefreshed != null &&
                    this.StatsLastRefreshed.Equals(input.StatsLastRefreshed))
                ) && 
                (
                    this.AggregateSnapshot == input.AggregateSnapshot ||
                    (this.AggregateSnapshot != null &&
                    this.AggregateSnapshot.Equals(input.AggregateSnapshot))
                ) && 
                (
                    this.NodeSnapshots == input.NodeSnapshots ||
                    this.NodeSnapshots != null &&
                    this.NodeSnapshots.SequenceEqual(input.NodeSnapshots)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.StatsLastRefreshed != null)
                    hashCode = hashCode * 59 + this.StatsLastRefreshed.GetHashCode();
                if (this.AggregateSnapshot != null)
                    hashCode = hashCode * 59 + this.AggregateSnapshot.GetHashCode();
                if (this.NodeSnapshots != null)
                    hashCode = hashCode * 59 + this.NodeSnapshots.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
