/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// ControllerServiceStatusDTO
    /// </summary>
    [DataContract]
    public partial class ControllerServiceStatusDTO :  IEquatable<ControllerServiceStatusDTO>, IValidatableObject
    {
        /// <summary>
        /// The run status of this ControllerService
        /// </summary>
        /// <value>The run status of this ControllerService</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RunStatusEnum
        {
            
            /// <summary>
            /// Enum ENABLED for value: ENABLED
            /// </summary>
            [EnumMember(Value = "ENABLED")]
            ENABLED = 1,
            
            /// <summary>
            /// Enum ENABLING for value: ENABLING
            /// </summary>
            [EnumMember(Value = "ENABLING")]
            ENABLING = 2,
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 3,
            
            /// <summary>
            /// Enum DISABLING for value: DISABLING
            /// </summary>
            [EnumMember(Value = "DISABLING")]
            DISABLING = 4
        }

        /// <summary>
        /// The run status of this ControllerService
        /// </summary>
        /// <value>The run status of this ControllerService</value>
        [DataMember(Name="runStatus", EmitDefaultValue=false)]
        public RunStatusEnum? RunStatus { get; set; }
        /// <summary>
        /// Indicates whether the component is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the component is valid)
        /// </summary>
        /// <value>Indicates whether the component is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the component is valid)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValidationStatusEnum
        {
            
            /// <summary>
            /// Enum VALID for value: VALID
            /// </summary>
            [EnumMember(Value = "VALID")]
            VALID = 1,
            
            /// <summary>
            /// Enum INVALID for value: INVALID
            /// </summary>
            [EnumMember(Value = "INVALID")]
            INVALID = 2,
            
            /// <summary>
            /// Enum VALIDATING for value: VALIDATING
            /// </summary>
            [EnumMember(Value = "VALIDATING")]
            VALIDATING = 3
        }

        /// <summary>
        /// Indicates whether the component is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the component is valid)
        /// </summary>
        /// <value>Indicates whether the component is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the component is valid)</value>
        [DataMember(Name="validationStatus", EmitDefaultValue=false)]
        public ValidationStatusEnum? ValidationStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ControllerServiceStatusDTO" /> class.
        /// </summary>
        /// <param name="activeThreadCount">The number of active threads for the component..</param>
        public ControllerServiceStatusDTO(int? activeThreadCount = default(int?))
        {
            this.ActiveThreadCount = activeThreadCount;
        }
        


        /// <summary>
        /// The number of active threads for the component.
        /// </summary>
        /// <value>The number of active threads for the component.</value>
        [DataMember(Name="activeThreadCount", EmitDefaultValue=false)]
        public int? ActiveThreadCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ControllerServiceStatusDTO {\n");
            sb.Append("  RunStatus: ").Append(this.RunStatus).Append("\n");
            sb.Append("  ValidationStatus: ").Append(this.ValidationStatus).Append("\n");
            sb.Append("  ActiveThreadCount: ").Append(this.ActiveThreadCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ControllerServiceStatusDTO);
        }

        /// <summary>
        /// Returns true if ControllerServiceStatusDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ControllerServiceStatusDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ControllerServiceStatusDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RunStatus == input.RunStatus ||
                    (this.RunStatus != null &&
                    this.RunStatus.Equals(input.RunStatus))
                ) && 
                (
                    this.ValidationStatus == input.ValidationStatus ||
                    (this.ValidationStatus != null &&
                    this.ValidationStatus.Equals(input.ValidationStatus))
                ) && 
                (
                    this.ActiveThreadCount == input.ActiveThreadCount ||
                    (this.ActiveThreadCount != null &&
                    this.ActiveThreadCount.Equals(input.ActiveThreadCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RunStatus != null)
                    hashCode = hashCode * 59 + this.RunStatus.GetHashCode();
                if (this.ValidationStatus != null)
                    hashCode = hashCode * 59 + this.ValidationStatus.GetHashCode();
                if (this.ActiveThreadCount != null)
                    hashCode = hashCode * 59 + this.ActiveThreadCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
