/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// ProcessGroupStatusSnapshotDTO
    /// </summary>
    [DataContract]
    public partial class ProcessGroupStatusSnapshotDTO :  IEquatable<ProcessGroupStatusSnapshotDTO>, IValidatableObject
    {
        /// <summary>
        /// The current state of the Process Group, as it relates to the Versioned Flow
        /// </summary>
        /// <value>The current state of the Process Group, as it relates to the Versioned Flow</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VersionedFlowStateEnum
        {
            
            /// <summary>
            /// Enum LOCALLYMODIFIED for value: LOCALLY_MODIFIED
            /// </summary>
            [EnumMember(Value = "LOCALLY_MODIFIED")]
            LOCALLYMODIFIED = 1,
            
            /// <summary>
            /// Enum STALE for value: STALE
            /// </summary>
            [EnumMember(Value = "STALE")]
            STALE = 2,
            
            /// <summary>
            /// Enum LOCALLYMODIFIEDANDSTALE for value: LOCALLY_MODIFIED_AND_STALE
            /// </summary>
            [EnumMember(Value = "LOCALLY_MODIFIED_AND_STALE")]
            LOCALLYMODIFIEDANDSTALE = 3,
            
            /// <summary>
            /// Enum UPTODATE for value: UP_TO_DATE
            /// </summary>
            [EnumMember(Value = "UP_TO_DATE")]
            UPTODATE = 4,
            
            /// <summary>
            /// Enum SYNCFAILURE for value: SYNC_FAILURE
            /// </summary>
            [EnumMember(Value = "SYNC_FAILURE")]
            SYNCFAILURE = 5
        }

        /// <summary>
        /// The current state of the Process Group, as it relates to the Versioned Flow
        /// </summary>
        /// <value>The current state of the Process Group, as it relates to the Versioned Flow</value>
        [DataMember(Name="versionedFlowState", EmitDefaultValue=false)]
        public VersionedFlowStateEnum? VersionedFlowState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessGroupStatusSnapshotDTO" /> class.
        /// </summary>
        /// <param name="id">The id of the process group..</param>
        /// <param name="name">The name of this process group..</param>
        /// <param name="connectionStatusSnapshots">The status of all connections in the process group..</param>
        /// <param name="processorStatusSnapshots">The status of all processors in the process group..</param>
        /// <param name="processGroupStatusSnapshots">The status of all process groups in the process group..</param>
        /// <param name="remoteProcessGroupStatusSnapshots">The status of all remote process groups in the process group..</param>
        /// <param name="inputPortStatusSnapshots">The status of all input ports in the process group..</param>
        /// <param name="outputPortStatusSnapshots">The status of all output ports in the process group..</param>
        /// <param name="flowFilesIn">The number of FlowFiles that have come into this ProcessGroup in the last 5 minutes.</param>
        /// <param name="bytesIn">The number of bytes that have come into this ProcessGroup in the last 5 minutes.</param>
        /// <param name="input">The input count/size for the process group in the last 5 minutes (pretty printed)..</param>
        /// <param name="flowFilesQueued">The number of FlowFiles that are queued up in this ProcessGroup right now.</param>
        /// <param name="bytesQueued">The number of bytes that are queued up in this ProcessGroup right now.</param>
        /// <param name="queued">The count/size that is queued in the the process group..</param>
        /// <param name="queuedCount">The count that is queued for the process group..</param>
        /// <param name="queuedSize">The size that is queued for the process group..</param>
        /// <param name="bytesRead">The number of bytes read by components in this ProcessGroup in the last 5 minutes.</param>
        /// <param name="read">The number of bytes read in the last 5 minutes..</param>
        /// <param name="bytesWritten">The number of bytes written by components in this ProcessGroup in the last 5 minutes.</param>
        /// <param name="written">The number of bytes written in the last 5 minutes..</param>
        /// <param name="flowFilesOut">The number of FlowFiles transferred out of this ProcessGroup in the last 5 minutes.</param>
        /// <param name="bytesOut">The number of bytes transferred out of this ProcessGroup in the last 5 minutes.</param>
        /// <param name="output">The output count/size for the process group in the last 5 minutes..</param>
        /// <param name="flowFilesTransferred">The number of FlowFiles transferred in this ProcessGroup in the last 5 minutes.</param>
        /// <param name="bytesTransferred">The number of bytes transferred in this ProcessGroup in the last 5 minutes.</param>
        /// <param name="transferred">The count/size transferred to/from queues in the process group in the last 5 minutes..</param>
        /// <param name="bytesReceived">The number of bytes received from external sources by components within this ProcessGroup in the last 5 minutes.</param>
        /// <param name="flowFilesReceived">The number of FlowFiles received from external sources by components within this ProcessGroup in the last 5 minutes.</param>
        /// <param name="received">The count/size sent to the process group in the last 5 minutes..</param>
        /// <param name="bytesSent">The number of bytes sent to an external sink by components within this ProcessGroup in the last 5 minutes.</param>
        /// <param name="flowFilesSent">The number of FlowFiles sent to an external sink by components within this ProcessGroup in the last 5 minutes.</param>
        /// <param name="sent">The count/size sent from this process group in the last 5 minutes..</param>
        /// <param name="activeThreadCount">The active thread count for this process group..</param>
        /// <param name="terminatedThreadCount">The number of threads currently terminated for the process group..</param>
        public ProcessGroupStatusSnapshotDTO(string id = default(string), string name = default(string), List<ConnectionStatusSnapshotEntity> connectionStatusSnapshots = default(List<ConnectionStatusSnapshotEntity>), List<ProcessorStatusSnapshotEntity> processorStatusSnapshots = default(List<ProcessorStatusSnapshotEntity>), List<ProcessGroupStatusSnapshotEntity> processGroupStatusSnapshots = default(List<ProcessGroupStatusSnapshotEntity>), List<RemoteProcessGroupStatusSnapshotEntity> remoteProcessGroupStatusSnapshots = default(List<RemoteProcessGroupStatusSnapshotEntity>), List<PortStatusSnapshotEntity> inputPortStatusSnapshots = default(List<PortStatusSnapshotEntity>), List<PortStatusSnapshotEntity> outputPortStatusSnapshots = default(List<PortStatusSnapshotEntity>), int? flowFilesIn = default(int?), long? bytesIn = default(long?), string input = default(string), int? flowFilesQueued = default(int?), long? bytesQueued = default(long?), string queued = default(string), string queuedCount = default(string), string queuedSize = default(string), long? bytesRead = default(long?), string read = default(string), long? bytesWritten = default(long?), string written = default(string), int? flowFilesOut = default(int?), long? bytesOut = default(long?), string output = default(string), int? flowFilesTransferred = default(int?), long? bytesTransferred = default(long?), string transferred = default(string), long? bytesReceived = default(long?), int? flowFilesReceived = default(int?), string received = default(string), long? bytesSent = default(long?), int? flowFilesSent = default(int?), string sent = default(string), int? activeThreadCount = default(int?), int? terminatedThreadCount = default(int?))
        {
            this.Id = id;
            this.Name = name;
            this.ConnectionStatusSnapshots = connectionStatusSnapshots;
            this.ProcessorStatusSnapshots = processorStatusSnapshots;
            this.ProcessGroupStatusSnapshots = processGroupStatusSnapshots;
            this.RemoteProcessGroupStatusSnapshots = remoteProcessGroupStatusSnapshots;
            this.InputPortStatusSnapshots = inputPortStatusSnapshots;
            this.OutputPortStatusSnapshots = outputPortStatusSnapshots;
            this.FlowFilesIn = flowFilesIn;
            this.BytesIn = bytesIn;
            this.Input = input;
            this.FlowFilesQueued = flowFilesQueued;
            this.BytesQueued = bytesQueued;
            this.Queued = queued;
            this.QueuedCount = queuedCount;
            this.QueuedSize = queuedSize;
            this.BytesRead = bytesRead;
            this.Read = read;
            this.BytesWritten = bytesWritten;
            this.Written = written;
            this.FlowFilesOut = flowFilesOut;
            this.BytesOut = bytesOut;
            this.Output = output;
            this.FlowFilesTransferred = flowFilesTransferred;
            this.BytesTransferred = bytesTransferred;
            this.Transferred = transferred;
            this.BytesReceived = bytesReceived;
            this.FlowFilesReceived = flowFilesReceived;
            this.Received = received;
            this.BytesSent = bytesSent;
            this.FlowFilesSent = flowFilesSent;
            this.Sent = sent;
            this.ActiveThreadCount = activeThreadCount;
            this.TerminatedThreadCount = terminatedThreadCount;
        }
        
        /// <summary>
        /// The id of the process group.
        /// </summary>
        /// <value>The id of the process group.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of this process group.
        /// </summary>
        /// <value>The name of this process group.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The status of all connections in the process group.
        /// </summary>
        /// <value>The status of all connections in the process group.</value>
        [DataMember(Name="connectionStatusSnapshots", EmitDefaultValue=false)]
        public List<ConnectionStatusSnapshotEntity> ConnectionStatusSnapshots { get; set; }

        /// <summary>
        /// The status of all processors in the process group.
        /// </summary>
        /// <value>The status of all processors in the process group.</value>
        [DataMember(Name="processorStatusSnapshots", EmitDefaultValue=false)]
        public List<ProcessorStatusSnapshotEntity> ProcessorStatusSnapshots { get; set; }

        /// <summary>
        /// The status of all process groups in the process group.
        /// </summary>
        /// <value>The status of all process groups in the process group.</value>
        [DataMember(Name="processGroupStatusSnapshots", EmitDefaultValue=false)]
        public List<ProcessGroupStatusSnapshotEntity> ProcessGroupStatusSnapshots { get; set; }

        /// <summary>
        /// The status of all remote process groups in the process group.
        /// </summary>
        /// <value>The status of all remote process groups in the process group.</value>
        [DataMember(Name="remoteProcessGroupStatusSnapshots", EmitDefaultValue=false)]
        public List<RemoteProcessGroupStatusSnapshotEntity> RemoteProcessGroupStatusSnapshots { get; set; }

        /// <summary>
        /// The status of all input ports in the process group.
        /// </summary>
        /// <value>The status of all input ports in the process group.</value>
        [DataMember(Name="inputPortStatusSnapshots", EmitDefaultValue=false)]
        public List<PortStatusSnapshotEntity> InputPortStatusSnapshots { get; set; }

        /// <summary>
        /// The status of all output ports in the process group.
        /// </summary>
        /// <value>The status of all output ports in the process group.</value>
        [DataMember(Name="outputPortStatusSnapshots", EmitDefaultValue=false)]
        public List<PortStatusSnapshotEntity> OutputPortStatusSnapshots { get; set; }


        /// <summary>
        /// The number of FlowFiles that have come into this ProcessGroup in the last 5 minutes
        /// </summary>
        /// <value>The number of FlowFiles that have come into this ProcessGroup in the last 5 minutes</value>
        [DataMember(Name="flowFilesIn", EmitDefaultValue=false)]
        public int? FlowFilesIn { get; set; }

        /// <summary>
        /// The number of bytes that have come into this ProcessGroup in the last 5 minutes
        /// </summary>
        /// <value>The number of bytes that have come into this ProcessGroup in the last 5 minutes</value>
        [DataMember(Name="bytesIn", EmitDefaultValue=false)]
        public long? BytesIn { get; set; }

        /// <summary>
        /// The input count/size for the process group in the last 5 minutes (pretty printed).
        /// </summary>
        /// <value>The input count/size for the process group in the last 5 minutes (pretty printed).</value>
        [DataMember(Name="input", EmitDefaultValue=false)]
        public string Input { get; set; }

        /// <summary>
        /// The number of FlowFiles that are queued up in this ProcessGroup right now
        /// </summary>
        /// <value>The number of FlowFiles that are queued up in this ProcessGroup right now</value>
        [DataMember(Name="flowFilesQueued", EmitDefaultValue=false)]
        public int? FlowFilesQueued { get; set; }

        /// <summary>
        /// The number of bytes that are queued up in this ProcessGroup right now
        /// </summary>
        /// <value>The number of bytes that are queued up in this ProcessGroup right now</value>
        [DataMember(Name="bytesQueued", EmitDefaultValue=false)]
        public long? BytesQueued { get; set; }

        /// <summary>
        /// The count/size that is queued in the the process group.
        /// </summary>
        /// <value>The count/size that is queued in the the process group.</value>
        [DataMember(Name="queued", EmitDefaultValue=false)]
        public string Queued { get; set; }

        /// <summary>
        /// The count that is queued for the process group.
        /// </summary>
        /// <value>The count that is queued for the process group.</value>
        [DataMember(Name="queuedCount", EmitDefaultValue=false)]
        public string QueuedCount { get; set; }

        /// <summary>
        /// The size that is queued for the process group.
        /// </summary>
        /// <value>The size that is queued for the process group.</value>
        [DataMember(Name="queuedSize", EmitDefaultValue=false)]
        public string QueuedSize { get; set; }

        /// <summary>
        /// The number of bytes read by components in this ProcessGroup in the last 5 minutes
        /// </summary>
        /// <value>The number of bytes read by components in this ProcessGroup in the last 5 minutes</value>
        [DataMember(Name="bytesRead", EmitDefaultValue=false)]
        public long? BytesRead { get; set; }

        /// <summary>
        /// The number of bytes read in the last 5 minutes.
        /// </summary>
        /// <value>The number of bytes read in the last 5 minutes.</value>
        [DataMember(Name="read", EmitDefaultValue=false)]
        public string Read { get; set; }

        /// <summary>
        /// The number of bytes written by components in this ProcessGroup in the last 5 minutes
        /// </summary>
        /// <value>The number of bytes written by components in this ProcessGroup in the last 5 minutes</value>
        [DataMember(Name="bytesWritten", EmitDefaultValue=false)]
        public long? BytesWritten { get; set; }

        /// <summary>
        /// The number of bytes written in the last 5 minutes.
        /// </summary>
        /// <value>The number of bytes written in the last 5 minutes.</value>
        [DataMember(Name="written", EmitDefaultValue=false)]
        public string Written { get; set; }

        /// <summary>
        /// The number of FlowFiles transferred out of this ProcessGroup in the last 5 minutes
        /// </summary>
        /// <value>The number of FlowFiles transferred out of this ProcessGroup in the last 5 minutes</value>
        [DataMember(Name="flowFilesOut", EmitDefaultValue=false)]
        public int? FlowFilesOut { get; set; }

        /// <summary>
        /// The number of bytes transferred out of this ProcessGroup in the last 5 minutes
        /// </summary>
        /// <value>The number of bytes transferred out of this ProcessGroup in the last 5 minutes</value>
        [DataMember(Name="bytesOut", EmitDefaultValue=false)]
        public long? BytesOut { get; set; }

        /// <summary>
        /// The output count/size for the process group in the last 5 minutes.
        /// </summary>
        /// <value>The output count/size for the process group in the last 5 minutes.</value>
        [DataMember(Name="output", EmitDefaultValue=false)]
        public string Output { get; set; }

        /// <summary>
        /// The number of FlowFiles transferred in this ProcessGroup in the last 5 minutes
        /// </summary>
        /// <value>The number of FlowFiles transferred in this ProcessGroup in the last 5 minutes</value>
        [DataMember(Name="flowFilesTransferred", EmitDefaultValue=false)]
        public int? FlowFilesTransferred { get; set; }

        /// <summary>
        /// The number of bytes transferred in this ProcessGroup in the last 5 minutes
        /// </summary>
        /// <value>The number of bytes transferred in this ProcessGroup in the last 5 minutes</value>
        [DataMember(Name="bytesTransferred", EmitDefaultValue=false)]
        public long? BytesTransferred { get; set; }

        /// <summary>
        /// The count/size transferred to/from queues in the process group in the last 5 minutes.
        /// </summary>
        /// <value>The count/size transferred to/from queues in the process group in the last 5 minutes.</value>
        [DataMember(Name="transferred", EmitDefaultValue=false)]
        public string Transferred { get; set; }

        /// <summary>
        /// The number of bytes received from external sources by components within this ProcessGroup in the last 5 minutes
        /// </summary>
        /// <value>The number of bytes received from external sources by components within this ProcessGroup in the last 5 minutes</value>
        [DataMember(Name="bytesReceived", EmitDefaultValue=false)]
        public long? BytesReceived { get; set; }

        /// <summary>
        /// The number of FlowFiles received from external sources by components within this ProcessGroup in the last 5 minutes
        /// </summary>
        /// <value>The number of FlowFiles received from external sources by components within this ProcessGroup in the last 5 minutes</value>
        [DataMember(Name="flowFilesReceived", EmitDefaultValue=false)]
        public int? FlowFilesReceived { get; set; }

        /// <summary>
        /// The count/size sent to the process group in the last 5 minutes.
        /// </summary>
        /// <value>The count/size sent to the process group in the last 5 minutes.</value>
        [DataMember(Name="received", EmitDefaultValue=false)]
        public string Received { get; set; }

        /// <summary>
        /// The number of bytes sent to an external sink by components within this ProcessGroup in the last 5 minutes
        /// </summary>
        /// <value>The number of bytes sent to an external sink by components within this ProcessGroup in the last 5 minutes</value>
        [DataMember(Name="bytesSent", EmitDefaultValue=false)]
        public long? BytesSent { get; set; }

        /// <summary>
        /// The number of FlowFiles sent to an external sink by components within this ProcessGroup in the last 5 minutes
        /// </summary>
        /// <value>The number of FlowFiles sent to an external sink by components within this ProcessGroup in the last 5 minutes</value>
        [DataMember(Name="flowFilesSent", EmitDefaultValue=false)]
        public int? FlowFilesSent { get; set; }

        /// <summary>
        /// The count/size sent from this process group in the last 5 minutes.
        /// </summary>
        /// <value>The count/size sent from this process group in the last 5 minutes.</value>
        [DataMember(Name="sent", EmitDefaultValue=false)]
        public string Sent { get; set; }

        /// <summary>
        /// The active thread count for this process group.
        /// </summary>
        /// <value>The active thread count for this process group.</value>
        [DataMember(Name="activeThreadCount", EmitDefaultValue=false)]
        public int? ActiveThreadCount { get; set; }

        /// <summary>
        /// The number of threads currently terminated for the process group.
        /// </summary>
        /// <value>The number of threads currently terminated for the process group.</value>
        [DataMember(Name="terminatedThreadCount", EmitDefaultValue=false)]
        public int? TerminatedThreadCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessGroupStatusSnapshotDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  ConnectionStatusSnapshots: ").Append(this.ConnectionStatusSnapshots).Append("\n");
            sb.Append("  ProcessorStatusSnapshots: ").Append(this.ProcessorStatusSnapshots).Append("\n");
            sb.Append("  ProcessGroupStatusSnapshots: ").Append(this.ProcessGroupStatusSnapshots).Append("\n");
            sb.Append("  RemoteProcessGroupStatusSnapshots: ").Append(this.RemoteProcessGroupStatusSnapshots).Append("\n");
            sb.Append("  InputPortStatusSnapshots: ").Append(this.InputPortStatusSnapshots).Append("\n");
            sb.Append("  OutputPortStatusSnapshots: ").Append(this.OutputPortStatusSnapshots).Append("\n");
            sb.Append("  VersionedFlowState: ").Append(this.VersionedFlowState).Append("\n");
            sb.Append("  FlowFilesIn: ").Append(this.FlowFilesIn).Append("\n");
            sb.Append("  BytesIn: ").Append(this.BytesIn).Append("\n");
            sb.Append("  Input: ").Append(this.Input).Append("\n");
            sb.Append("  FlowFilesQueued: ").Append(this.FlowFilesQueued).Append("\n");
            sb.Append("  BytesQueued: ").Append(this.BytesQueued).Append("\n");
            sb.Append("  Queued: ").Append(this.Queued).Append("\n");
            sb.Append("  QueuedCount: ").Append(this.QueuedCount).Append("\n");
            sb.Append("  QueuedSize: ").Append(this.QueuedSize).Append("\n");
            sb.Append("  BytesRead: ").Append(this.BytesRead).Append("\n");
            sb.Append("  Read: ").Append(this.Read).Append("\n");
            sb.Append("  BytesWritten: ").Append(this.BytesWritten).Append("\n");
            sb.Append("  Written: ").Append(this.Written).Append("\n");
            sb.Append("  FlowFilesOut: ").Append(this.FlowFilesOut).Append("\n");
            sb.Append("  BytesOut: ").Append(this.BytesOut).Append("\n");
            sb.Append("  Output: ").Append(this.Output).Append("\n");
            sb.Append("  FlowFilesTransferred: ").Append(this.FlowFilesTransferred).Append("\n");
            sb.Append("  BytesTransferred: ").Append(this.BytesTransferred).Append("\n");
            sb.Append("  Transferred: ").Append(this.Transferred).Append("\n");
            sb.Append("  BytesReceived: ").Append(this.BytesReceived).Append("\n");
            sb.Append("  FlowFilesReceived: ").Append(this.FlowFilesReceived).Append("\n");
            sb.Append("  Received: ").Append(this.Received).Append("\n");
            sb.Append("  BytesSent: ").Append(this.BytesSent).Append("\n");
            sb.Append("  FlowFilesSent: ").Append(this.FlowFilesSent).Append("\n");
            sb.Append("  Sent: ").Append(this.Sent).Append("\n");
            sb.Append("  ActiveThreadCount: ").Append(this.ActiveThreadCount).Append("\n");
            sb.Append("  TerminatedThreadCount: ").Append(this.TerminatedThreadCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessGroupStatusSnapshotDTO);
        }

        /// <summary>
        /// Returns true if ProcessGroupStatusSnapshotDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessGroupStatusSnapshotDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessGroupStatusSnapshotDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ConnectionStatusSnapshots == input.ConnectionStatusSnapshots ||
                    this.ConnectionStatusSnapshots != null &&
                    this.ConnectionStatusSnapshots.SequenceEqual(input.ConnectionStatusSnapshots)
                ) && 
                (
                    this.ProcessorStatusSnapshots == input.ProcessorStatusSnapshots ||
                    this.ProcessorStatusSnapshots != null &&
                    this.ProcessorStatusSnapshots.SequenceEqual(input.ProcessorStatusSnapshots)
                ) && 
                (
                    this.ProcessGroupStatusSnapshots == input.ProcessGroupStatusSnapshots ||
                    this.ProcessGroupStatusSnapshots != null &&
                    this.ProcessGroupStatusSnapshots.SequenceEqual(input.ProcessGroupStatusSnapshots)
                ) && 
                (
                    this.RemoteProcessGroupStatusSnapshots == input.RemoteProcessGroupStatusSnapshots ||
                    this.RemoteProcessGroupStatusSnapshots != null &&
                    this.RemoteProcessGroupStatusSnapshots.SequenceEqual(input.RemoteProcessGroupStatusSnapshots)
                ) && 
                (
                    this.InputPortStatusSnapshots == input.InputPortStatusSnapshots ||
                    this.InputPortStatusSnapshots != null &&
                    this.InputPortStatusSnapshots.SequenceEqual(input.InputPortStatusSnapshots)
                ) && 
                (
                    this.OutputPortStatusSnapshots == input.OutputPortStatusSnapshots ||
                    this.OutputPortStatusSnapshots != null &&
                    this.OutputPortStatusSnapshots.SequenceEqual(input.OutputPortStatusSnapshots)
                ) && 
                (
                    this.VersionedFlowState == input.VersionedFlowState ||
                    (this.VersionedFlowState != null &&
                    this.VersionedFlowState.Equals(input.VersionedFlowState))
                ) && 
                (
                    this.FlowFilesIn == input.FlowFilesIn ||
                    (this.FlowFilesIn != null &&
                    this.FlowFilesIn.Equals(input.FlowFilesIn))
                ) && 
                (
                    this.BytesIn == input.BytesIn ||
                    (this.BytesIn != null &&
                    this.BytesIn.Equals(input.BytesIn))
                ) && 
                (
                    this.Input == input.Input ||
                    (this.Input != null &&
                    this.Input.Equals(input.Input))
                ) && 
                (
                    this.FlowFilesQueued == input.FlowFilesQueued ||
                    (this.FlowFilesQueued != null &&
                    this.FlowFilesQueued.Equals(input.FlowFilesQueued))
                ) && 
                (
                    this.BytesQueued == input.BytesQueued ||
                    (this.BytesQueued != null &&
                    this.BytesQueued.Equals(input.BytesQueued))
                ) && 
                (
                    this.Queued == input.Queued ||
                    (this.Queued != null &&
                    this.Queued.Equals(input.Queued))
                ) && 
                (
                    this.QueuedCount == input.QueuedCount ||
                    (this.QueuedCount != null &&
                    this.QueuedCount.Equals(input.QueuedCount))
                ) && 
                (
                    this.QueuedSize == input.QueuedSize ||
                    (this.QueuedSize != null &&
                    this.QueuedSize.Equals(input.QueuedSize))
                ) && 
                (
                    this.BytesRead == input.BytesRead ||
                    (this.BytesRead != null &&
                    this.BytesRead.Equals(input.BytesRead))
                ) && 
                (
                    this.Read == input.Read ||
                    (this.Read != null &&
                    this.Read.Equals(input.Read))
                ) && 
                (
                    this.BytesWritten == input.BytesWritten ||
                    (this.BytesWritten != null &&
                    this.BytesWritten.Equals(input.BytesWritten))
                ) && 
                (
                    this.Written == input.Written ||
                    (this.Written != null &&
                    this.Written.Equals(input.Written))
                ) && 
                (
                    this.FlowFilesOut == input.FlowFilesOut ||
                    (this.FlowFilesOut != null &&
                    this.FlowFilesOut.Equals(input.FlowFilesOut))
                ) && 
                (
                    this.BytesOut == input.BytesOut ||
                    (this.BytesOut != null &&
                    this.BytesOut.Equals(input.BytesOut))
                ) && 
                (
                    this.Output == input.Output ||
                    (this.Output != null &&
                    this.Output.Equals(input.Output))
                ) && 
                (
                    this.FlowFilesTransferred == input.FlowFilesTransferred ||
                    (this.FlowFilesTransferred != null &&
                    this.FlowFilesTransferred.Equals(input.FlowFilesTransferred))
                ) && 
                (
                    this.BytesTransferred == input.BytesTransferred ||
                    (this.BytesTransferred != null &&
                    this.BytesTransferred.Equals(input.BytesTransferred))
                ) && 
                (
                    this.Transferred == input.Transferred ||
                    (this.Transferred != null &&
                    this.Transferred.Equals(input.Transferred))
                ) && 
                (
                    this.BytesReceived == input.BytesReceived ||
                    (this.BytesReceived != null &&
                    this.BytesReceived.Equals(input.BytesReceived))
                ) && 
                (
                    this.FlowFilesReceived == input.FlowFilesReceived ||
                    (this.FlowFilesReceived != null &&
                    this.FlowFilesReceived.Equals(input.FlowFilesReceived))
                ) && 
                (
                    this.Received == input.Received ||
                    (this.Received != null &&
                    this.Received.Equals(input.Received))
                ) && 
                (
                    this.BytesSent == input.BytesSent ||
                    (this.BytesSent != null &&
                    this.BytesSent.Equals(input.BytesSent))
                ) && 
                (
                    this.FlowFilesSent == input.FlowFilesSent ||
                    (this.FlowFilesSent != null &&
                    this.FlowFilesSent.Equals(input.FlowFilesSent))
                ) && 
                (
                    this.Sent == input.Sent ||
                    (this.Sent != null &&
                    this.Sent.Equals(input.Sent))
                ) && 
                (
                    this.ActiveThreadCount == input.ActiveThreadCount ||
                    (this.ActiveThreadCount != null &&
                    this.ActiveThreadCount.Equals(input.ActiveThreadCount))
                ) && 
                (
                    this.TerminatedThreadCount == input.TerminatedThreadCount ||
                    (this.TerminatedThreadCount != null &&
                    this.TerminatedThreadCount.Equals(input.TerminatedThreadCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ConnectionStatusSnapshots != null)
                    hashCode = hashCode * 59 + this.ConnectionStatusSnapshots.GetHashCode();
                if (this.ProcessorStatusSnapshots != null)
                    hashCode = hashCode * 59 + this.ProcessorStatusSnapshots.GetHashCode();
                if (this.ProcessGroupStatusSnapshots != null)
                    hashCode = hashCode * 59 + this.ProcessGroupStatusSnapshots.GetHashCode();
                if (this.RemoteProcessGroupStatusSnapshots != null)
                    hashCode = hashCode * 59 + this.RemoteProcessGroupStatusSnapshots.GetHashCode();
                if (this.InputPortStatusSnapshots != null)
                    hashCode = hashCode * 59 + this.InputPortStatusSnapshots.GetHashCode();
                if (this.OutputPortStatusSnapshots != null)
                    hashCode = hashCode * 59 + this.OutputPortStatusSnapshots.GetHashCode();
                if (this.VersionedFlowState != null)
                    hashCode = hashCode * 59 + this.VersionedFlowState.GetHashCode();
                if (this.FlowFilesIn != null)
                    hashCode = hashCode * 59 + this.FlowFilesIn.GetHashCode();
                if (this.BytesIn != null)
                    hashCode = hashCode * 59 + this.BytesIn.GetHashCode();
                if (this.Input != null)
                    hashCode = hashCode * 59 + this.Input.GetHashCode();
                if (this.FlowFilesQueued != null)
                    hashCode = hashCode * 59 + this.FlowFilesQueued.GetHashCode();
                if (this.BytesQueued != null)
                    hashCode = hashCode * 59 + this.BytesQueued.GetHashCode();
                if (this.Queued != null)
                    hashCode = hashCode * 59 + this.Queued.GetHashCode();
                if (this.QueuedCount != null)
                    hashCode = hashCode * 59 + this.QueuedCount.GetHashCode();
                if (this.QueuedSize != null)
                    hashCode = hashCode * 59 + this.QueuedSize.GetHashCode();
                if (this.BytesRead != null)
                    hashCode = hashCode * 59 + this.BytesRead.GetHashCode();
                if (this.Read != null)
                    hashCode = hashCode * 59 + this.Read.GetHashCode();
                if (this.BytesWritten != null)
                    hashCode = hashCode * 59 + this.BytesWritten.GetHashCode();
                if (this.Written != null)
                    hashCode = hashCode * 59 + this.Written.GetHashCode();
                if (this.FlowFilesOut != null)
                    hashCode = hashCode * 59 + this.FlowFilesOut.GetHashCode();
                if (this.BytesOut != null)
                    hashCode = hashCode * 59 + this.BytesOut.GetHashCode();
                if (this.Output != null)
                    hashCode = hashCode * 59 + this.Output.GetHashCode();
                if (this.FlowFilesTransferred != null)
                    hashCode = hashCode * 59 + this.FlowFilesTransferred.GetHashCode();
                if (this.BytesTransferred != null)
                    hashCode = hashCode * 59 + this.BytesTransferred.GetHashCode();
                if (this.Transferred != null)
                    hashCode = hashCode * 59 + this.Transferred.GetHashCode();
                if (this.BytesReceived != null)
                    hashCode = hashCode * 59 + this.BytesReceived.GetHashCode();
                if (this.FlowFilesReceived != null)
                    hashCode = hashCode * 59 + this.FlowFilesReceived.GetHashCode();
                if (this.Received != null)
                    hashCode = hashCode * 59 + this.Received.GetHashCode();
                if (this.BytesSent != null)
                    hashCode = hashCode * 59 + this.BytesSent.GetHashCode();
                if (this.FlowFilesSent != null)
                    hashCode = hashCode * 59 + this.FlowFilesSent.GetHashCode();
                if (this.Sent != null)
                    hashCode = hashCode * 59 + this.Sent.GetHashCode();
                if (this.ActiveThreadCount != null)
                    hashCode = hashCode * 59 + this.ActiveThreadCount.GetHashCode();
                if (this.TerminatedThreadCount != null)
                    hashCode = hashCode * 59 + this.TerminatedThreadCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
