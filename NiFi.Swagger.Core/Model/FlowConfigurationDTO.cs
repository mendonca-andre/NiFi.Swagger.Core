/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// FlowConfigurationDTO
    /// </summary>
    [DataContract]
    public partial class FlowConfigurationDTO :  IEquatable<FlowConfigurationDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowConfigurationDTO" /> class.
        /// </summary>
        /// <param name="currentTime">The current time on the system..</param>
        /// <param name="timeOffset">The time offset of the system..</param>
        /// <param name="defaultBackPressureObjectThreshold">The default back pressure object threshold..</param>
        /// <param name="defaultBackPressureDataSizeThreshold">The default back pressure data size threshold..</param>
        public FlowConfigurationDTO(string currentTime = default(string), int? timeOffset = default(int?), long? defaultBackPressureObjectThreshold = default(long?), string defaultBackPressureDataSizeThreshold = default(string))
        {
            this.CurrentTime = currentTime;
            this.TimeOffset = timeOffset;
            this.DefaultBackPressureObjectThreshold = defaultBackPressureObjectThreshold;
            this.DefaultBackPressureDataSizeThreshold = defaultBackPressureDataSizeThreshold;
        }
        
        /// <summary>
        /// Whether this NiFi supports a managed authorizer. Managed authorizers can visualize users, groups, and policies in the UI.
        /// </summary>
        /// <value>Whether this NiFi supports a managed authorizer. Managed authorizers can visualize users, groups, and policies in the UI.</value>
        [DataMember(Name="supportsManagedAuthorizer", EmitDefaultValue=false)]
        public bool? SupportsManagedAuthorizer { get; private set; }

        /// <summary>
        /// Whether this NiFi supports a configurable authorizer.
        /// </summary>
        /// <value>Whether this NiFi supports a configurable authorizer.</value>
        [DataMember(Name="supportsConfigurableAuthorizer", EmitDefaultValue=false)]
        public bool? SupportsConfigurableAuthorizer { get; private set; }

        /// <summary>
        /// Whether this NiFi supports configurable users and groups.
        /// </summary>
        /// <value>Whether this NiFi supports configurable users and groups.</value>
        [DataMember(Name="supportsConfigurableUsersAndGroups", EmitDefaultValue=false)]
        public bool? SupportsConfigurableUsersAndGroups { get; private set; }

        /// <summary>
        /// The interval in seconds between the automatic NiFi refresh requests.
        /// </summary>
        /// <value>The interval in seconds between the automatic NiFi refresh requests.</value>
        [DataMember(Name="autoRefreshIntervalSeconds", EmitDefaultValue=false)]
        public long? AutoRefreshIntervalSeconds { get; private set; }

        /// <summary>
        /// The current time on the system.
        /// </summary>
        /// <value>The current time on the system.</value>
        [DataMember(Name="currentTime", EmitDefaultValue=false)]
        public string CurrentTime { get; set; }

        /// <summary>
        /// The time offset of the system.
        /// </summary>
        /// <value>The time offset of the system.</value>
        [DataMember(Name="timeOffset", EmitDefaultValue=false)]
        public int? TimeOffset { get; set; }

        /// <summary>
        /// The default back pressure object threshold.
        /// </summary>
        /// <value>The default back pressure object threshold.</value>
        [DataMember(Name="defaultBackPressureObjectThreshold", EmitDefaultValue=false)]
        public long? DefaultBackPressureObjectThreshold { get; set; }

        /// <summary>
        /// The default back pressure data size threshold.
        /// </summary>
        /// <value>The default back pressure data size threshold.</value>
        [DataMember(Name="defaultBackPressureDataSizeThreshold", EmitDefaultValue=false)]
        public string DefaultBackPressureDataSizeThreshold { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowConfigurationDTO {\n");
            sb.Append("  SupportsManagedAuthorizer: ").Append(this.SupportsManagedAuthorizer).Append("\n");
            sb.Append("  SupportsConfigurableAuthorizer: ").Append(this.SupportsConfigurableAuthorizer).Append("\n");
            sb.Append("  SupportsConfigurableUsersAndGroups: ").Append(this.SupportsConfigurableUsersAndGroups).Append("\n");
            sb.Append("  AutoRefreshIntervalSeconds: ").Append(this.AutoRefreshIntervalSeconds).Append("\n");
            sb.Append("  CurrentTime: ").Append(this.CurrentTime).Append("\n");
            sb.Append("  TimeOffset: ").Append(this.TimeOffset).Append("\n");
            sb.Append("  DefaultBackPressureObjectThreshold: ").Append(this.DefaultBackPressureObjectThreshold).Append("\n");
            sb.Append("  DefaultBackPressureDataSizeThreshold: ").Append(this.DefaultBackPressureDataSizeThreshold).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlowConfigurationDTO);
        }

        /// <summary>
        /// Returns true if FlowConfigurationDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowConfigurationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowConfigurationDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SupportsManagedAuthorizer == input.SupportsManagedAuthorizer ||
                    (this.SupportsManagedAuthorizer != null &&
                    this.SupportsManagedAuthorizer.Equals(input.SupportsManagedAuthorizer))
                ) && 
                (
                    this.SupportsConfigurableAuthorizer == input.SupportsConfigurableAuthorizer ||
                    (this.SupportsConfigurableAuthorizer != null &&
                    this.SupportsConfigurableAuthorizer.Equals(input.SupportsConfigurableAuthorizer))
                ) && 
                (
                    this.SupportsConfigurableUsersAndGroups == input.SupportsConfigurableUsersAndGroups ||
                    (this.SupportsConfigurableUsersAndGroups != null &&
                    this.SupportsConfigurableUsersAndGroups.Equals(input.SupportsConfigurableUsersAndGroups))
                ) && 
                (
                    this.AutoRefreshIntervalSeconds == input.AutoRefreshIntervalSeconds ||
                    (this.AutoRefreshIntervalSeconds != null &&
                    this.AutoRefreshIntervalSeconds.Equals(input.AutoRefreshIntervalSeconds))
                ) && 
                (
                    this.CurrentTime == input.CurrentTime ||
                    (this.CurrentTime != null &&
                    this.CurrentTime.Equals(input.CurrentTime))
                ) && 
                (
                    this.TimeOffset == input.TimeOffset ||
                    (this.TimeOffset != null &&
                    this.TimeOffset.Equals(input.TimeOffset))
                ) && 
                (
                    this.DefaultBackPressureObjectThreshold == input.DefaultBackPressureObjectThreshold ||
                    (this.DefaultBackPressureObjectThreshold != null &&
                    this.DefaultBackPressureObjectThreshold.Equals(input.DefaultBackPressureObjectThreshold))
                ) && 
                (
                    this.DefaultBackPressureDataSizeThreshold == input.DefaultBackPressureDataSizeThreshold ||
                    (this.DefaultBackPressureDataSizeThreshold != null &&
                    this.DefaultBackPressureDataSizeThreshold.Equals(input.DefaultBackPressureDataSizeThreshold))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SupportsManagedAuthorizer != null)
                    hashCode = hashCode * 59 + this.SupportsManagedAuthorizer.GetHashCode();
                if (this.SupportsConfigurableAuthorizer != null)
                    hashCode = hashCode * 59 + this.SupportsConfigurableAuthorizer.GetHashCode();
                if (this.SupportsConfigurableUsersAndGroups != null)
                    hashCode = hashCode * 59 + this.SupportsConfigurableUsersAndGroups.GetHashCode();
                if (this.AutoRefreshIntervalSeconds != null)
                    hashCode = hashCode * 59 + this.AutoRefreshIntervalSeconds.GetHashCode();
                if (this.CurrentTime != null)
                    hashCode = hashCode * 59 + this.CurrentTime.GetHashCode();
                if (this.TimeOffset != null)
                    hashCode = hashCode * 59 + this.TimeOffset.GetHashCode();
                if (this.DefaultBackPressureObjectThreshold != null)
                    hashCode = hashCode * 59 + this.DefaultBackPressureObjectThreshold.GetHashCode();
                if (this.DefaultBackPressureDataSizeThreshold != null)
                    hashCode = hashCode * 59 + this.DefaultBackPressureDataSizeThreshold.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
