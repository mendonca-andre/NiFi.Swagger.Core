/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// VariableRegistryUpdateRequestDTO
    /// </summary>
    [DataContract]
    public partial class VariableRegistryUpdateRequestDTO :  IEquatable<VariableRegistryUpdateRequestDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VariableRegistryUpdateRequestDTO" /> class.
        /// </summary>
        /// <param name="processGroupId">The unique ID of the Process Group that the variable registry belongs to.</param>
        public VariableRegistryUpdateRequestDTO(string processGroupId = default(string))
        {
            this.ProcessGroupId = processGroupId;
        }
        
        /// <summary>
        /// The unique ID of this request.
        /// </summary>
        /// <value>The unique ID of this request.</value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public string RequestId { get; private set; }

        /// <summary>
        /// The unique ID of the Process Group that the variable registry belongs to
        /// </summary>
        /// <value>The unique ID of the Process Group that the variable registry belongs to</value>
        [DataMember(Name="processGroupId", EmitDefaultValue=false)]
        public string ProcessGroupId { get; set; }

        /// <summary>
        /// The URI for future requests to this drop request.
        /// </summary>
        /// <value>The URI for future requests to this drop request.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; private set; }

        /// <summary>
        /// The time at which this request was submitted.
        /// </summary>
        /// <value>The time at which this request was submitted.</value>
        [DataMember(Name="submissionTime", EmitDefaultValue=false)]
        public string SubmissionTime { get; private set; }

        /// <summary>
        /// The last time this request was updated.
        /// </summary>
        /// <value>The last time this request was updated.</value>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public string LastUpdated { get; private set; }

        /// <summary>
        /// Whether or not this request has completed
        /// </summary>
        /// <value>Whether or not this request has completed</value>
        [DataMember(Name="complete", EmitDefaultValue=false)]
        public bool? Complete { get; private set; }

        /// <summary>
        /// An explanation of why this request failed, or null if this request has not failed
        /// </summary>
        /// <value>An explanation of why this request failed, or null if this request has not failed</value>
        [DataMember(Name="failureReason", EmitDefaultValue=false)]
        public string FailureReason { get; private set; }

        /// <summary>
        /// The steps that are required in order to complete the request, along with the status of each
        /// </summary>
        /// <value>The steps that are required in order to complete the request, along with the status of each</value>
        [DataMember(Name="updateSteps", EmitDefaultValue=false)]
        public List<VariableRegistryUpdateStepDTO> UpdateSteps { get; private set; }

        /// <summary>
        /// A set of all components that will be affected if the value of this variable is changed
        /// </summary>
        /// <value>A set of all components that will be affected if the value of this variable is changed</value>
        [DataMember(Name="affectedComponents", EmitDefaultValue=false)]
        public List<AffectedComponentEntity> AffectedComponents { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VariableRegistryUpdateRequestDTO {\n");
            sb.Append("  RequestId: ").Append(this.RequestId).Append("\n");
            sb.Append("  ProcessGroupId: ").Append(this.ProcessGroupId).Append("\n");
            sb.Append("  Uri: ").Append(this.Uri).Append("\n");
            sb.Append("  SubmissionTime: ").Append(this.SubmissionTime).Append("\n");
            sb.Append("  LastUpdated: ").Append(this.LastUpdated).Append("\n");
            sb.Append("  Complete: ").Append(this.Complete).Append("\n");
            sb.Append("  FailureReason: ").Append(this.FailureReason).Append("\n");
            sb.Append("  UpdateSteps: ").Append(this.UpdateSteps).Append("\n");
            sb.Append("  AffectedComponents: ").Append(this.AffectedComponents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VariableRegistryUpdateRequestDTO);
        }

        /// <summary>
        /// Returns true if VariableRegistryUpdateRequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of VariableRegistryUpdateRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VariableRegistryUpdateRequestDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.ProcessGroupId == input.ProcessGroupId ||
                    (this.ProcessGroupId != null &&
                    this.ProcessGroupId.Equals(input.ProcessGroupId))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.SubmissionTime == input.SubmissionTime ||
                    (this.SubmissionTime != null &&
                    this.SubmissionTime.Equals(input.SubmissionTime))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.Complete == input.Complete ||
                    (this.Complete != null &&
                    this.Complete.Equals(input.Complete))
                ) && 
                (
                    this.FailureReason == input.FailureReason ||
                    (this.FailureReason != null &&
                    this.FailureReason.Equals(input.FailureReason))
                ) && 
                (
                    this.UpdateSteps == input.UpdateSteps ||
                    this.UpdateSteps != null &&
                    this.UpdateSteps.SequenceEqual(input.UpdateSteps)
                ) && 
                (
                    this.AffectedComponents == input.AffectedComponents ||
                    this.AffectedComponents != null &&
                    this.AffectedComponents.SequenceEqual(input.AffectedComponents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.ProcessGroupId != null)
                    hashCode = hashCode * 59 + this.ProcessGroupId.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.SubmissionTime != null)
                    hashCode = hashCode * 59 + this.SubmissionTime.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.Complete != null)
                    hashCode = hashCode * 59 + this.Complete.GetHashCode();
                if (this.FailureReason != null)
                    hashCode = hashCode * 59 + this.FailureReason.GetHashCode();
                if (this.UpdateSteps != null)
                    hashCode = hashCode * 59 + this.UpdateSteps.GetHashCode();
                if (this.AffectedComponents != null)
                    hashCode = hashCode * 59 + this.AffectedComponents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
