/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// VersionedPropertyDescriptor
    /// </summary>
    [DataContract]
    public partial class VersionedPropertyDescriptor :  IEquatable<VersionedPropertyDescriptor>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionedPropertyDescriptor" /> class.
        /// </summary>
        /// <param name="name">The name of the property.</param>
        /// <param name="displayName">The display name of the property.</param>
        /// <param name="identifiesControllerService">Whether or not the property provides the identifier of a Controller Service.</param>
        /// <param name="sensitive">Whether or not the property is considered sensitive.</param>
        public VersionedPropertyDescriptor(string name = default(string), string displayName = default(string), bool? identifiesControllerService = default(bool?), bool? sensitive = default(bool?))
        {
            this.Name = name;
            this.DisplayName = displayName;
            this.IdentifiesControllerService = identifiesControllerService;
            this.Sensitive = sensitive;
        }
        
        /// <summary>
        /// The name of the property
        /// </summary>
        /// <value>The name of the property</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The display name of the property
        /// </summary>
        /// <value>The display name of the property</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Whether or not the property provides the identifier of a Controller Service
        /// </summary>
        /// <value>Whether or not the property provides the identifier of a Controller Service</value>
        [DataMember(Name="identifiesControllerService", EmitDefaultValue=false)]
        public bool? IdentifiesControllerService { get; set; }

        /// <summary>
        /// Whether or not the property is considered sensitive
        /// </summary>
        /// <value>Whether or not the property is considered sensitive</value>
        [DataMember(Name="sensitive", EmitDefaultValue=false)]
        public bool? Sensitive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VersionedPropertyDescriptor {\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  DisplayName: ").Append(this.DisplayName).Append("\n");
            sb.Append("  IdentifiesControllerService: ").Append(this.IdentifiesControllerService).Append("\n");
            sb.Append("  Sensitive: ").Append(this.Sensitive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VersionedPropertyDescriptor);
        }

        /// <summary>
        /// Returns true if VersionedPropertyDescriptor instances are equal
        /// </summary>
        /// <param name="input">Instance of VersionedPropertyDescriptor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionedPropertyDescriptor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.IdentifiesControllerService == input.IdentifiesControllerService ||
                    (this.IdentifiesControllerService != null &&
                    this.IdentifiesControllerService.Equals(input.IdentifiesControllerService))
                ) && 
                (
                    this.Sensitive == input.Sensitive ||
                    (this.Sensitive != null &&
                    this.Sensitive.Equals(input.Sensitive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.IdentifiesControllerService != null)
                    hashCode = hashCode * 59 + this.IdentifiesControllerService.GetHashCode();
                if (this.Sensitive != null)
                    hashCode = hashCode * 59 + this.Sensitive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
