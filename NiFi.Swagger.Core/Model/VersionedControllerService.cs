/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// VersionedControllerService
    /// </summary>
    [DataContract]
    public partial class VersionedControllerService :  IEquatable<VersionedControllerService>, IValidatableObject
    {
        /// <summary>
        /// Defines ComponentType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComponentTypeEnum
        {
            
            /// <summary>
            /// Enum CONNECTION for value: CONNECTION
            /// </summary>
            [EnumMember(Value = "CONNECTION")]
            CONNECTION = 1,
            
            /// <summary>
            /// Enum PROCESSOR for value: PROCESSOR
            /// </summary>
            [EnumMember(Value = "PROCESSOR")]
            PROCESSOR = 2,
            
            /// <summary>
            /// Enum PROCESSGROUP for value: PROCESS_GROUP
            /// </summary>
            [EnumMember(Value = "PROCESS_GROUP")]
            PROCESSGROUP = 3,
            
            /// <summary>
            /// Enum REMOTEPROCESSGROUP for value: REMOTE_PROCESS_GROUP
            /// </summary>
            [EnumMember(Value = "REMOTE_PROCESS_GROUP")]
            REMOTEPROCESSGROUP = 4,
            
            /// <summary>
            /// Enum INPUTPORT for value: INPUT_PORT
            /// </summary>
            [EnumMember(Value = "INPUT_PORT")]
            INPUTPORT = 5,
            
            /// <summary>
            /// Enum OUTPUTPORT for value: OUTPUT_PORT
            /// </summary>
            [EnumMember(Value = "OUTPUT_PORT")]
            OUTPUTPORT = 6,
            
            /// <summary>
            /// Enum REMOTEINPUTPORT for value: REMOTE_INPUT_PORT
            /// </summary>
            [EnumMember(Value = "REMOTE_INPUT_PORT")]
            REMOTEINPUTPORT = 7,
            
            /// <summary>
            /// Enum REMOTEOUTPUTPORT for value: REMOTE_OUTPUT_PORT
            /// </summary>
            [EnumMember(Value = "REMOTE_OUTPUT_PORT")]
            REMOTEOUTPUTPORT = 8,
            
            /// <summary>
            /// Enum FUNNEL for value: FUNNEL
            /// </summary>
            [EnumMember(Value = "FUNNEL")]
            FUNNEL = 9,
            
            /// <summary>
            /// Enum LABEL for value: LABEL
            /// </summary>
            [EnumMember(Value = "LABEL")]
            LABEL = 10,
            
            /// <summary>
            /// Enum CONTROLLERSERVICE for value: CONTROLLER_SERVICE
            /// </summary>
            [EnumMember(Value = "CONTROLLER_SERVICE")]
            CONTROLLERSERVICE = 11
        }

        /// <summary>
        /// Gets or Sets ComponentType
        /// </summary>
        [DataMember(Name="componentType", EmitDefaultValue=false)]
        public ComponentTypeEnum? ComponentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionedControllerService" /> class.
        /// </summary>
        /// <param name="identifier">The component&#39;s unique identifier.</param>
        /// <param name="name">The component&#39;s name.</param>
        /// <param name="comments">The user-supplied comments for the component.</param>
        /// <param name="position">The component&#39;s position on the graph.</param>
        /// <param name="type">The type of the controller service..</param>
        /// <param name="bundle">The details of the artifact that bundled this processor type..</param>
        /// <param name="controllerServiceApis">Lists the APIs this Controller Service implements..</param>
        /// <param name="properties">The properties of the controller service..</param>
        /// <param name="propertyDescriptors">The property descriptors for the processor..</param>
        /// <param name="annotationData">The annotation for the controller service. This is how the custom UI relays configuration to the controller service..</param>
        /// <param name="componentType">componentType.</param>
        /// <param name="groupIdentifier">The ID of the Process Group that this component belongs to.</param>
        public VersionedControllerService(string identifier = default(string), string name = default(string), string comments = default(string), Position position = default(Position), string type = default(string), Bundle bundle = default(Bundle), List<ControllerServiceAPI> controllerServiceApis = default(List<ControllerServiceAPI>), Dictionary<string, string> properties = default(Dictionary<string, string>), Dictionary<string, VersionedPropertyDescriptor> propertyDescriptors = default(Dictionary<string, VersionedPropertyDescriptor>), string annotationData = default(string), ComponentTypeEnum? componentType = default(ComponentTypeEnum?), string groupIdentifier = default(string))
        {
            this.Identifier = identifier;
            this.Name = name;
            this.Comments = comments;
            this.Position = position;
            this.Type = type;
            this.Bundle = bundle;
            this.ControllerServiceApis = controllerServiceApis;
            this.Properties = properties;
            this.PropertyDescriptors = propertyDescriptors;
            this.AnnotationData = annotationData;
            this.ComponentType = componentType;
            this.GroupIdentifier = groupIdentifier;
        }
        
        /// <summary>
        /// The component&#39;s unique identifier
        /// </summary>
        /// <value>The component&#39;s unique identifier</value>
        [DataMember(Name="identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }

        /// <summary>
        /// The component&#39;s name
        /// </summary>
        /// <value>The component&#39;s name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The user-supplied comments for the component
        /// </summary>
        /// <value>The user-supplied comments for the component</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// The component&#39;s position on the graph
        /// </summary>
        /// <value>The component&#39;s position on the graph</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public Position Position { get; set; }

        /// <summary>
        /// The type of the controller service.
        /// </summary>
        /// <value>The type of the controller service.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The details of the artifact that bundled this processor type.
        /// </summary>
        /// <value>The details of the artifact that bundled this processor type.</value>
        [DataMember(Name="bundle", EmitDefaultValue=false)]
        public Bundle Bundle { get; set; }

        /// <summary>
        /// Lists the APIs this Controller Service implements.
        /// </summary>
        /// <value>Lists the APIs this Controller Service implements.</value>
        [DataMember(Name="controllerServiceApis", EmitDefaultValue=false)]
        public List<ControllerServiceAPI> ControllerServiceApis { get; set; }

        /// <summary>
        /// The properties of the controller service.
        /// </summary>
        /// <value>The properties of the controller service.</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Dictionary<string, string> Properties { get; set; }

        /// <summary>
        /// The property descriptors for the processor.
        /// </summary>
        /// <value>The property descriptors for the processor.</value>
        [DataMember(Name="propertyDescriptors", EmitDefaultValue=false)]
        public Dictionary<string, VersionedPropertyDescriptor> PropertyDescriptors { get; set; }

        /// <summary>
        /// The annotation for the controller service. This is how the custom UI relays configuration to the controller service.
        /// </summary>
        /// <value>The annotation for the controller service. This is how the custom UI relays configuration to the controller service.</value>
        [DataMember(Name="annotationData", EmitDefaultValue=false)]
        public string AnnotationData { get; set; }


        /// <summary>
        /// The ID of the Process Group that this component belongs to
        /// </summary>
        /// <value>The ID of the Process Group that this component belongs to</value>
        [DataMember(Name="groupIdentifier", EmitDefaultValue=false)]
        public string GroupIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VersionedControllerService {\n");
            sb.Append("  Identifier: ").Append(this.Identifier).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  Comments: ").Append(this.Comments).Append("\n");
            sb.Append("  Position: ").Append(this.Position).Append("\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Bundle: ").Append(this.Bundle).Append("\n");
            sb.Append("  ControllerServiceApis: ").Append(this.ControllerServiceApis).Append("\n");
            sb.Append("  Properties: ").Append(this.Properties).Append("\n");
            sb.Append("  PropertyDescriptors: ").Append(this.PropertyDescriptors).Append("\n");
            sb.Append("  AnnotationData: ").Append(this.AnnotationData).Append("\n");
            sb.Append("  ComponentType: ").Append(this.ComponentType).Append("\n");
            sb.Append("  GroupIdentifier: ").Append(this.GroupIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VersionedControllerService);
        }

        /// <summary>
        /// Returns true if VersionedControllerService instances are equal
        /// </summary>
        /// <param name="input">Instance of VersionedControllerService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionedControllerService input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Bundle == input.Bundle ||
                    (this.Bundle != null &&
                    this.Bundle.Equals(input.Bundle))
                ) && 
                (
                    this.ControllerServiceApis == input.ControllerServiceApis ||
                    this.ControllerServiceApis != null &&
                    this.ControllerServiceApis.SequenceEqual(input.ControllerServiceApis)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.PropertyDescriptors == input.PropertyDescriptors ||
                    this.PropertyDescriptors != null &&
                    this.PropertyDescriptors.SequenceEqual(input.PropertyDescriptors)
                ) && 
                (
                    this.AnnotationData == input.AnnotationData ||
                    (this.AnnotationData != null &&
                    this.AnnotationData.Equals(input.AnnotationData))
                ) && 
                (
                    this.ComponentType == input.ComponentType ||
                    (this.ComponentType != null &&
                    this.ComponentType.Equals(input.ComponentType))
                ) && 
                (
                    this.GroupIdentifier == input.GroupIdentifier ||
                    (this.GroupIdentifier != null &&
                    this.GroupIdentifier.Equals(input.GroupIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identifier != null)
                    hashCode = hashCode * 59 + this.Identifier.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Bundle != null)
                    hashCode = hashCode * 59 + this.Bundle.GetHashCode();
                if (this.ControllerServiceApis != null)
                    hashCode = hashCode * 59 + this.ControllerServiceApis.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.PropertyDescriptors != null)
                    hashCode = hashCode * 59 + this.PropertyDescriptors.GetHashCode();
                if (this.AnnotationData != null)
                    hashCode = hashCode * 59 + this.AnnotationData.GetHashCode();
                if (this.ComponentType != null)
                    hashCode = hashCode * 59 + this.ComponentType.GetHashCode();
                if (this.GroupIdentifier != null)
                    hashCode = hashCode * 59 + this.GroupIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
