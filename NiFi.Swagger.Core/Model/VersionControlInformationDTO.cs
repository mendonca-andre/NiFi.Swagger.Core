/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// VersionControlInformationDTO
    /// </summary>
    [DataContract]
    public partial class VersionControlInformationDTO :  IEquatable<VersionControlInformationDTO>, IValidatableObject
    {
        /// <summary>
        /// The current state of the Process Group, as it relates to the Versioned Flow
        /// </summary>
        /// <value>The current state of the Process Group, as it relates to the Versioned Flow</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum LOCALLYMODIFIED for value: LOCALLY_MODIFIED
            /// </summary>
            [EnumMember(Value = "LOCALLY_MODIFIED")]
            LOCALLYMODIFIED = 1,
            
            /// <summary>
            /// Enum STALE for value: STALE
            /// </summary>
            [EnumMember(Value = "STALE")]
            STALE = 2,
            
            /// <summary>
            /// Enum LOCALLYMODIFIEDANDSTALE for value: LOCALLY_MODIFIED_AND_STALE
            /// </summary>
            [EnumMember(Value = "LOCALLY_MODIFIED_AND_STALE")]
            LOCALLYMODIFIEDANDSTALE = 3,
            
            /// <summary>
            /// Enum UPTODATE for value: UP_TO_DATE
            /// </summary>
            [EnumMember(Value = "UP_TO_DATE")]
            UPTODATE = 4,
            
            /// <summary>
            /// Enum SYNCFAILURE for value: SYNC_FAILURE
            /// </summary>
            [EnumMember(Value = "SYNC_FAILURE")]
            SYNCFAILURE = 5
        }

        /// <summary>
        /// The current state of the Process Group, as it relates to the Versioned Flow
        /// </summary>
        /// <value>The current state of the Process Group, as it relates to the Versioned Flow</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionControlInformationDTO" /> class.
        /// </summary>
        /// <param name="groupId">The ID of the Process Group that is under version control.</param>
        /// <param name="registryId">The ID of the registry that the flow is stored in.</param>
        /// <param name="bucketId">The ID of the bucket that the flow is stored in.</param>
        /// <param name="flowId">The ID of the flow.</param>
        /// <param name="flowName">The name of the flow.</param>
        /// <param name="flowDescription">The description of the flow.</param>
        /// <param name="version">The version of the flow.</param>
        public VersionControlInformationDTO(string groupId = default(string), string registryId = default(string), string bucketId = default(string), string flowId = default(string), string flowName = default(string), string flowDescription = default(string), int? version = default(int?))
        {
            this.GroupId = groupId;
            this.RegistryId = registryId;
            this.BucketId = bucketId;
            this.FlowId = flowId;
            this.FlowName = flowName;
            this.FlowDescription = flowDescription;
            this.Version = version;
        }
        
        /// <summary>
        /// The ID of the Process Group that is under version control
        /// </summary>
        /// <value>The ID of the Process Group that is under version control</value>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public string GroupId { get; set; }

        /// <summary>
        /// The ID of the registry that the flow is stored in
        /// </summary>
        /// <value>The ID of the registry that the flow is stored in</value>
        [DataMember(Name="registryId", EmitDefaultValue=false)]
        public string RegistryId { get; set; }

        /// <summary>
        /// The name of the registry that the flow is stored in
        /// </summary>
        /// <value>The name of the registry that the flow is stored in</value>
        [DataMember(Name="registryName", EmitDefaultValue=false)]
        public string RegistryName { get; private set; }

        /// <summary>
        /// The ID of the bucket that the flow is stored in
        /// </summary>
        /// <value>The ID of the bucket that the flow is stored in</value>
        [DataMember(Name="bucketId", EmitDefaultValue=false)]
        public string BucketId { get; set; }

        /// <summary>
        /// The name of the bucket that the flow is stored in
        /// </summary>
        /// <value>The name of the bucket that the flow is stored in</value>
        [DataMember(Name="bucketName", EmitDefaultValue=false)]
        public string BucketName { get; private set; }

        /// <summary>
        /// The ID of the flow
        /// </summary>
        /// <value>The ID of the flow</value>
        [DataMember(Name="flowId", EmitDefaultValue=false)]
        public string FlowId { get; set; }

        /// <summary>
        /// The name of the flow
        /// </summary>
        /// <value>The name of the flow</value>
        [DataMember(Name="flowName", EmitDefaultValue=false)]
        public string FlowName { get; set; }

        /// <summary>
        /// The description of the flow
        /// </summary>
        /// <value>The description of the flow</value>
        [DataMember(Name="flowDescription", EmitDefaultValue=false)]
        public string FlowDescription { get; set; }

        /// <summary>
        /// The version of the flow
        /// </summary>
        /// <value>The version of the flow</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }


        /// <summary>
        /// Explanation of why the group is in the specified state
        /// </summary>
        /// <value>Explanation of why the group is in the specified state</value>
        [DataMember(Name="stateExplanation", EmitDefaultValue=false)]
        public string StateExplanation { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VersionControlInformationDTO {\n");
            sb.Append("  GroupId: ").Append(this.GroupId).Append("\n");
            sb.Append("  RegistryId: ").Append(this.RegistryId).Append("\n");
            sb.Append("  RegistryName: ").Append(this.RegistryName).Append("\n");
            sb.Append("  BucketId: ").Append(this.BucketId).Append("\n");
            sb.Append("  BucketName: ").Append(this.BucketName).Append("\n");
            sb.Append("  FlowId: ").Append(this.FlowId).Append("\n");
            sb.Append("  FlowName: ").Append(this.FlowName).Append("\n");
            sb.Append("  FlowDescription: ").Append(this.FlowDescription).Append("\n");
            sb.Append("  Version: ").Append(this.Version).Append("\n");
            sb.Append("  State: ").Append(this.State).Append("\n");
            sb.Append("  StateExplanation: ").Append(this.StateExplanation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VersionControlInformationDTO);
        }

        /// <summary>
        /// Returns true if VersionControlInformationDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of VersionControlInformationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionControlInformationDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.RegistryId == input.RegistryId ||
                    (this.RegistryId != null &&
                    this.RegistryId.Equals(input.RegistryId))
                ) && 
                (
                    this.RegistryName == input.RegistryName ||
                    (this.RegistryName != null &&
                    this.RegistryName.Equals(input.RegistryName))
                ) && 
                (
                    this.BucketId == input.BucketId ||
                    (this.BucketId != null &&
                    this.BucketId.Equals(input.BucketId))
                ) && 
                (
                    this.BucketName == input.BucketName ||
                    (this.BucketName != null &&
                    this.BucketName.Equals(input.BucketName))
                ) && 
                (
                    this.FlowId == input.FlowId ||
                    (this.FlowId != null &&
                    this.FlowId.Equals(input.FlowId))
                ) && 
                (
                    this.FlowName == input.FlowName ||
                    (this.FlowName != null &&
                    this.FlowName.Equals(input.FlowName))
                ) && 
                (
                    this.FlowDescription == input.FlowDescription ||
                    (this.FlowDescription != null &&
                    this.FlowDescription.Equals(input.FlowDescription))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StateExplanation == input.StateExplanation ||
                    (this.StateExplanation != null &&
                    this.StateExplanation.Equals(input.StateExplanation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.RegistryId != null)
                    hashCode = hashCode * 59 + this.RegistryId.GetHashCode();
                if (this.RegistryName != null)
                    hashCode = hashCode * 59 + this.RegistryName.GetHashCode();
                if (this.BucketId != null)
                    hashCode = hashCode * 59 + this.BucketId.GetHashCode();
                if (this.BucketName != null)
                    hashCode = hashCode * 59 + this.BucketName.GetHashCode();
                if (this.FlowId != null)
                    hashCode = hashCode * 59 + this.FlowId.GetHashCode();
                if (this.FlowName != null)
                    hashCode = hashCode * 59 + this.FlowName.GetHashCode();
                if (this.FlowDescription != null)
                    hashCode = hashCode * 59 + this.FlowDescription.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.StateExplanation != null)
                    hashCode = hashCode * 59 + this.StateExplanation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
