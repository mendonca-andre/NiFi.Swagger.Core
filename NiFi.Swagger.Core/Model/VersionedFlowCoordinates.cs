/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// VersionedFlowCoordinates
    /// </summary>
    [DataContract]
    public partial class VersionedFlowCoordinates :  IEquatable<VersionedFlowCoordinates>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionedFlowCoordinates" /> class.
        /// </summary>
        /// <param name="registryUrl">The URL of the Flow Registry that contains the flow.</param>
        /// <param name="bucketId">The UUID of the bucket that the flow resides in.</param>
        /// <param name="flowId">The UUID of the flow.</param>
        /// <param name="version">The version of the flow.</param>
        /// <param name="latest">Whether or not these coordinates point to the latest version of the flow.</param>
        public VersionedFlowCoordinates(string registryUrl = default(string), string bucketId = default(string), string flowId = default(string), int? version = default(int?), bool? latest = default(bool?))
        {
            this.RegistryUrl = registryUrl;
            this.BucketId = bucketId;
            this.FlowId = flowId;
            this.Version = version;
            this.Latest = latest;
        }
        
        /// <summary>
        /// The URL of the Flow Registry that contains the flow
        /// </summary>
        /// <value>The URL of the Flow Registry that contains the flow</value>
        [DataMember(Name="registryUrl", EmitDefaultValue=false)]
        public string RegistryUrl { get; set; }

        /// <summary>
        /// The UUID of the bucket that the flow resides in
        /// </summary>
        /// <value>The UUID of the bucket that the flow resides in</value>
        [DataMember(Name="bucketId", EmitDefaultValue=false)]
        public string BucketId { get; set; }

        /// <summary>
        /// The UUID of the flow
        /// </summary>
        /// <value>The UUID of the flow</value>
        [DataMember(Name="flowId", EmitDefaultValue=false)]
        public string FlowId { get; set; }

        /// <summary>
        /// The version of the flow
        /// </summary>
        /// <value>The version of the flow</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }

        /// <summary>
        /// Whether or not these coordinates point to the latest version of the flow
        /// </summary>
        /// <value>Whether or not these coordinates point to the latest version of the flow</value>
        [DataMember(Name="latest", EmitDefaultValue=false)]
        public bool? Latest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VersionedFlowCoordinates {\n");
            sb.Append("  RegistryUrl: ").Append(this.RegistryUrl).Append("\n");
            sb.Append("  BucketId: ").Append(this.BucketId).Append("\n");
            sb.Append("  FlowId: ").Append(this.FlowId).Append("\n");
            sb.Append("  Version: ").Append(this.Version).Append("\n");
            sb.Append("  Latest: ").Append(this.Latest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VersionedFlowCoordinates);
        }

        /// <summary>
        /// Returns true if VersionedFlowCoordinates instances are equal
        /// </summary>
        /// <param name="input">Instance of VersionedFlowCoordinates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionedFlowCoordinates input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RegistryUrl == input.RegistryUrl ||
                    (this.RegistryUrl != null &&
                    this.RegistryUrl.Equals(input.RegistryUrl))
                ) && 
                (
                    this.BucketId == input.BucketId ||
                    (this.BucketId != null &&
                    this.BucketId.Equals(input.BucketId))
                ) && 
                (
                    this.FlowId == input.FlowId ||
                    (this.FlowId != null &&
                    this.FlowId.Equals(input.FlowId))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Latest == input.Latest ||
                    (this.Latest != null &&
                    this.Latest.Equals(input.Latest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RegistryUrl != null)
                    hashCode = hashCode * 59 + this.RegistryUrl.GetHashCode();
                if (this.BucketId != null)
                    hashCode = hashCode * 59 + this.BucketId.GetHashCode();
                if (this.FlowId != null)
                    hashCode = hashCode * 59 + this.FlowId.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Latest != null)
                    hashCode = hashCode * 59 + this.Latest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
