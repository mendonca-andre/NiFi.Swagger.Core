/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// ProcessGroupEntity
    /// </summary>
    [DataContract]
    public partial class ProcessGroupEntity :  IEquatable<ProcessGroupEntity>, IValidatableObject
    {
        /// <summary>
        /// The current state of the Process Group, as it relates to the Versioned Flow
        /// </summary>
        /// <value>The current state of the Process Group, as it relates to the Versioned Flow</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VersionedFlowStateEnum
        {
            
            /// <summary>
            /// Enum LOCALLYMODIFIED for value: LOCALLY_MODIFIED
            /// </summary>
            [EnumMember(Value = "LOCALLY_MODIFIED")]
            LOCALLYMODIFIED = 1,
            
            /// <summary>
            /// Enum STALE for value: STALE
            /// </summary>
            [EnumMember(Value = "STALE")]
            STALE = 2,
            
            /// <summary>
            /// Enum LOCALLYMODIFIEDANDSTALE for value: LOCALLY_MODIFIED_AND_STALE
            /// </summary>
            [EnumMember(Value = "LOCALLY_MODIFIED_AND_STALE")]
            LOCALLYMODIFIEDANDSTALE = 3,
            
            /// <summary>
            /// Enum UPTODATE for value: UP_TO_DATE
            /// </summary>
            [EnumMember(Value = "UP_TO_DATE")]
            UPTODATE = 4,
            
            /// <summary>
            /// Enum SYNCFAILURE for value: SYNC_FAILURE
            /// </summary>
            [EnumMember(Value = "SYNC_FAILURE")]
            SYNCFAILURE = 5
        }

        /// <summary>
        /// The current state of the Process Group, as it relates to the Versioned Flow
        /// </summary>
        /// <value>The current state of the Process Group, as it relates to the Versioned Flow</value>
        [DataMember(Name="versionedFlowState", EmitDefaultValue=false)]
        public VersionedFlowStateEnum? VersionedFlowState { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessGroupEntity" /> class.
        /// </summary>
        /// <param name="revision">The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses..</param>
        /// <param name="id">The id of the component..</param>
        /// <param name="uri">The URI for futures requests to the component..</param>
        /// <param name="position">The position of this component in the UI if applicable..</param>
        /// <param name="permissions">The permissions for this component..</param>
        /// <param name="bulletins">The bulletins for this component..</param>
        /// <param name="disconnectedNodeAcknowledged">Acknowledges that this node is disconnected to allow for mutable requests to proceed..</param>
        /// <param name="component">component.</param>
        /// <param name="status">The status of the process group..</param>
        /// <param name="runningCount">The number of running components in this process group..</param>
        /// <param name="stoppedCount">The number of stopped components in the process group..</param>
        /// <param name="invalidCount">The number of invalid components in the process group..</param>
        /// <param name="disabledCount">The number of disabled components in the process group..</param>
        /// <param name="activeRemotePortCount">The number of active remote ports in the process group..</param>
        /// <param name="inactiveRemotePortCount">The number of inactive remote ports in the process group..</param>
        /// <param name="upToDateCount">The number of up to date versioned process groups in the process group..</param>
        /// <param name="locallyModifiedCount">The number of locally modified versioned process groups in the process group..</param>
        /// <param name="staleCount">The number of stale versioned process groups in the process group..</param>
        /// <param name="locallyModifiedAndStaleCount">The number of locally modified and stale versioned process groups in the process group..</param>
        /// <param name="syncFailureCount">The number of versioned process groups in the process group that are unable to sync to a registry..</param>
        /// <param name="inputPortCount">The number of input ports in the process group..</param>
        /// <param name="outputPortCount">The number of output ports in the process group..</param>
        public ProcessGroupEntity(RevisionDTO revision = default(RevisionDTO), string id = default(string), string uri = default(string), PositionDTO position = default(PositionDTO), PermissionsDTO permissions = default(PermissionsDTO), List<BulletinEntity> bulletins = default(List<BulletinEntity>), bool? disconnectedNodeAcknowledged = default(bool?), ProcessGroupDTO component = default(ProcessGroupDTO), ProcessGroupStatusDTO status = default(ProcessGroupStatusDTO), int? runningCount = default(int?), int? stoppedCount = default(int?), int? invalidCount = default(int?), int? disabledCount = default(int?), int? activeRemotePortCount = default(int?), int? inactiveRemotePortCount = default(int?), int? upToDateCount = default(int?), int? locallyModifiedCount = default(int?), int? staleCount = default(int?), int? locallyModifiedAndStaleCount = default(int?), int? syncFailureCount = default(int?), int? inputPortCount = default(int?), int? outputPortCount = default(int?))
        {
            this.Revision = revision;
            this.Id = id;
            this.Uri = uri;
            this.Position = position;
            this.Permissions = permissions;
            this.Bulletins = bulletins;
            this.DisconnectedNodeAcknowledged = disconnectedNodeAcknowledged;
            this.Component = component;
            this.Status = status;
            this.RunningCount = runningCount;
            this.StoppedCount = stoppedCount;
            this.InvalidCount = invalidCount;
            this.DisabledCount = disabledCount;
            this.ActiveRemotePortCount = activeRemotePortCount;
            this.InactiveRemotePortCount = inactiveRemotePortCount;
            this.UpToDateCount = upToDateCount;
            this.LocallyModifiedCount = locallyModifiedCount;
            this.StaleCount = staleCount;
            this.LocallyModifiedAndStaleCount = locallyModifiedAndStaleCount;
            this.SyncFailureCount = syncFailureCount;
            this.InputPortCount = inputPortCount;
            this.OutputPortCount = outputPortCount;
        }
        
        /// <summary>
        /// The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
        /// </summary>
        /// <value>The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.</value>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public RevisionDTO Revision { get; set; }

        /// <summary>
        /// The id of the component.
        /// </summary>
        /// <value>The id of the component.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The URI for futures requests to the component.
        /// </summary>
        /// <value>The URI for futures requests to the component.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// The position of this component in the UI if applicable.
        /// </summary>
        /// <value>The position of this component in the UI if applicable.</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public PositionDTO Position { get; set; }

        /// <summary>
        /// The permissions for this component.
        /// </summary>
        /// <value>The permissions for this component.</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public PermissionsDTO Permissions { get; set; }

        /// <summary>
        /// The bulletins for this component.
        /// </summary>
        /// <value>The bulletins for this component.</value>
        [DataMember(Name="bulletins", EmitDefaultValue=false)]
        public List<BulletinEntity> Bulletins { get; set; }

        /// <summary>
        /// Acknowledges that this node is disconnected to allow for mutable requests to proceed.
        /// </summary>
        /// <value>Acknowledges that this node is disconnected to allow for mutable requests to proceed.</value>
        [DataMember(Name="disconnectedNodeAcknowledged", EmitDefaultValue=false)]
        public bool? DisconnectedNodeAcknowledged { get; set; }

        /// <summary>
        /// Gets or Sets Component
        /// </summary>
        [DataMember(Name="component", EmitDefaultValue=false)]
        public ProcessGroupDTO Component { get; set; }

        /// <summary>
        /// The status of the process group.
        /// </summary>
        /// <value>The status of the process group.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public ProcessGroupStatusDTO Status { get; set; }

        /// <summary>
        /// Returns the Versioned Flow that describes the contents of the Versioned Flow to be imported
        /// </summary>
        /// <value>Returns the Versioned Flow that describes the contents of the Versioned Flow to be imported</value>
        [DataMember(Name="versionedFlowSnapshot", EmitDefaultValue=false)]
        public VersionedFlowSnapshot VersionedFlowSnapshot { get; private set; }

        /// <summary>
        /// The number of running components in this process group.
        /// </summary>
        /// <value>The number of running components in this process group.</value>
        [DataMember(Name="runningCount", EmitDefaultValue=false)]
        public int? RunningCount { get; set; }

        /// <summary>
        /// The number of stopped components in the process group.
        /// </summary>
        /// <value>The number of stopped components in the process group.</value>
        [DataMember(Name="stoppedCount", EmitDefaultValue=false)]
        public int? StoppedCount { get; set; }

        /// <summary>
        /// The number of invalid components in the process group.
        /// </summary>
        /// <value>The number of invalid components in the process group.</value>
        [DataMember(Name="invalidCount", EmitDefaultValue=false)]
        public int? InvalidCount { get; set; }

        /// <summary>
        /// The number of disabled components in the process group.
        /// </summary>
        /// <value>The number of disabled components in the process group.</value>
        [DataMember(Name="disabledCount", EmitDefaultValue=false)]
        public int? DisabledCount { get; set; }

        /// <summary>
        /// The number of active remote ports in the process group.
        /// </summary>
        /// <value>The number of active remote ports in the process group.</value>
        [DataMember(Name="activeRemotePortCount", EmitDefaultValue=false)]
        public int? ActiveRemotePortCount { get; set; }

        /// <summary>
        /// The number of inactive remote ports in the process group.
        /// </summary>
        /// <value>The number of inactive remote ports in the process group.</value>
        [DataMember(Name="inactiveRemotePortCount", EmitDefaultValue=false)]
        public int? InactiveRemotePortCount { get; set; }


        /// <summary>
        /// The number of up to date versioned process groups in the process group.
        /// </summary>
        /// <value>The number of up to date versioned process groups in the process group.</value>
        [DataMember(Name="upToDateCount", EmitDefaultValue=false)]
        public int? UpToDateCount { get; set; }

        /// <summary>
        /// The number of locally modified versioned process groups in the process group.
        /// </summary>
        /// <value>The number of locally modified versioned process groups in the process group.</value>
        [DataMember(Name="locallyModifiedCount", EmitDefaultValue=false)]
        public int? LocallyModifiedCount { get; set; }

        /// <summary>
        /// The number of stale versioned process groups in the process group.
        /// </summary>
        /// <value>The number of stale versioned process groups in the process group.</value>
        [DataMember(Name="staleCount", EmitDefaultValue=false)]
        public int? StaleCount { get; set; }

        /// <summary>
        /// The number of locally modified and stale versioned process groups in the process group.
        /// </summary>
        /// <value>The number of locally modified and stale versioned process groups in the process group.</value>
        [DataMember(Name="locallyModifiedAndStaleCount", EmitDefaultValue=false)]
        public int? LocallyModifiedAndStaleCount { get; set; }

        /// <summary>
        /// The number of versioned process groups in the process group that are unable to sync to a registry.
        /// </summary>
        /// <value>The number of versioned process groups in the process group that are unable to sync to a registry.</value>
        [DataMember(Name="syncFailureCount", EmitDefaultValue=false)]
        public int? SyncFailureCount { get; set; }

        /// <summary>
        /// The number of input ports in the process group.
        /// </summary>
        /// <value>The number of input ports in the process group.</value>
        [DataMember(Name="inputPortCount", EmitDefaultValue=false)]
        public int? InputPortCount { get; set; }

        /// <summary>
        /// The number of output ports in the process group.
        /// </summary>
        /// <value>The number of output ports in the process group.</value>
        [DataMember(Name="outputPortCount", EmitDefaultValue=false)]
        public int? OutputPortCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessGroupEntity {\n");
            sb.Append("  Revision: ").Append(this.Revision).Append("\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  Uri: ").Append(this.Uri).Append("\n");
            sb.Append("  Position: ").Append(this.Position).Append("\n");
            sb.Append("  Permissions: ").Append(this.Permissions).Append("\n");
            sb.Append("  Bulletins: ").Append(this.Bulletins).Append("\n");
            sb.Append("  DisconnectedNodeAcknowledged: ").Append(this.DisconnectedNodeAcknowledged).Append("\n");
            sb.Append("  Component: ").Append(this.Component).Append("\n");
            sb.Append("  Status: ").Append(this.Status).Append("\n");
            sb.Append("  VersionedFlowSnapshot: ").Append(this.VersionedFlowSnapshot).Append("\n");
            sb.Append("  RunningCount: ").Append(this.RunningCount).Append("\n");
            sb.Append("  StoppedCount: ").Append(this.StoppedCount).Append("\n");
            sb.Append("  InvalidCount: ").Append(this.InvalidCount).Append("\n");
            sb.Append("  DisabledCount: ").Append(this.DisabledCount).Append("\n");
            sb.Append("  ActiveRemotePortCount: ").Append(this.ActiveRemotePortCount).Append("\n");
            sb.Append("  InactiveRemotePortCount: ").Append(this.InactiveRemotePortCount).Append("\n");
            sb.Append("  VersionedFlowState: ").Append(this.VersionedFlowState).Append("\n");
            sb.Append("  UpToDateCount: ").Append(this.UpToDateCount).Append("\n");
            sb.Append("  LocallyModifiedCount: ").Append(this.LocallyModifiedCount).Append("\n");
            sb.Append("  StaleCount: ").Append(this.StaleCount).Append("\n");
            sb.Append("  LocallyModifiedAndStaleCount: ").Append(this.LocallyModifiedAndStaleCount).Append("\n");
            sb.Append("  SyncFailureCount: ").Append(this.SyncFailureCount).Append("\n");
            sb.Append("  InputPortCount: ").Append(this.InputPortCount).Append("\n");
            sb.Append("  OutputPortCount: ").Append(this.OutputPortCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessGroupEntity);
        }

        /// <summary>
        /// Returns true if ProcessGroupEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessGroupEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessGroupEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Revision == input.Revision ||
                    (this.Revision != null &&
                    this.Revision.Equals(input.Revision))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    (this.Permissions != null &&
                    this.Permissions.Equals(input.Permissions))
                ) && 
                (
                    this.Bulletins == input.Bulletins ||
                    this.Bulletins != null &&
                    this.Bulletins.SequenceEqual(input.Bulletins)
                ) && 
                (
                    this.DisconnectedNodeAcknowledged == input.DisconnectedNodeAcknowledged ||
                    (this.DisconnectedNodeAcknowledged != null &&
                    this.DisconnectedNodeAcknowledged.Equals(input.DisconnectedNodeAcknowledged))
                ) && 
                (
                    this.Component == input.Component ||
                    (this.Component != null &&
                    this.Component.Equals(input.Component))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.VersionedFlowSnapshot == input.VersionedFlowSnapshot ||
                    (this.VersionedFlowSnapshot != null &&
                    this.VersionedFlowSnapshot.Equals(input.VersionedFlowSnapshot))
                ) && 
                (
                    this.RunningCount == input.RunningCount ||
                    (this.RunningCount != null &&
                    this.RunningCount.Equals(input.RunningCount))
                ) && 
                (
                    this.StoppedCount == input.StoppedCount ||
                    (this.StoppedCount != null &&
                    this.StoppedCount.Equals(input.StoppedCount))
                ) && 
                (
                    this.InvalidCount == input.InvalidCount ||
                    (this.InvalidCount != null &&
                    this.InvalidCount.Equals(input.InvalidCount))
                ) && 
                (
                    this.DisabledCount == input.DisabledCount ||
                    (this.DisabledCount != null &&
                    this.DisabledCount.Equals(input.DisabledCount))
                ) && 
                (
                    this.ActiveRemotePortCount == input.ActiveRemotePortCount ||
                    (this.ActiveRemotePortCount != null &&
                    this.ActiveRemotePortCount.Equals(input.ActiveRemotePortCount))
                ) && 
                (
                    this.InactiveRemotePortCount == input.InactiveRemotePortCount ||
                    (this.InactiveRemotePortCount != null &&
                    this.InactiveRemotePortCount.Equals(input.InactiveRemotePortCount))
                ) && 
                (
                    this.VersionedFlowState == input.VersionedFlowState ||
                    (this.VersionedFlowState != null &&
                    this.VersionedFlowState.Equals(input.VersionedFlowState))
                ) && 
                (
                    this.UpToDateCount == input.UpToDateCount ||
                    (this.UpToDateCount != null &&
                    this.UpToDateCount.Equals(input.UpToDateCount))
                ) && 
                (
                    this.LocallyModifiedCount == input.LocallyModifiedCount ||
                    (this.LocallyModifiedCount != null &&
                    this.LocallyModifiedCount.Equals(input.LocallyModifiedCount))
                ) && 
                (
                    this.StaleCount == input.StaleCount ||
                    (this.StaleCount != null &&
                    this.StaleCount.Equals(input.StaleCount))
                ) && 
                (
                    this.LocallyModifiedAndStaleCount == input.LocallyModifiedAndStaleCount ||
                    (this.LocallyModifiedAndStaleCount != null &&
                    this.LocallyModifiedAndStaleCount.Equals(input.LocallyModifiedAndStaleCount))
                ) && 
                (
                    this.SyncFailureCount == input.SyncFailureCount ||
                    (this.SyncFailureCount != null &&
                    this.SyncFailureCount.Equals(input.SyncFailureCount))
                ) && 
                (
                    this.InputPortCount == input.InputPortCount ||
                    (this.InputPortCount != null &&
                    this.InputPortCount.Equals(input.InputPortCount))
                ) && 
                (
                    this.OutputPortCount == input.OutputPortCount ||
                    (this.OutputPortCount != null &&
                    this.OutputPortCount.Equals(input.OutputPortCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Revision != null)
                    hashCode = hashCode * 59 + this.Revision.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.Bulletins != null)
                    hashCode = hashCode * 59 + this.Bulletins.GetHashCode();
                if (this.DisconnectedNodeAcknowledged != null)
                    hashCode = hashCode * 59 + this.DisconnectedNodeAcknowledged.GetHashCode();
                if (this.Component != null)
                    hashCode = hashCode * 59 + this.Component.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.VersionedFlowSnapshot != null)
                    hashCode = hashCode * 59 + this.VersionedFlowSnapshot.GetHashCode();
                if (this.RunningCount != null)
                    hashCode = hashCode * 59 + this.RunningCount.GetHashCode();
                if (this.StoppedCount != null)
                    hashCode = hashCode * 59 + this.StoppedCount.GetHashCode();
                if (this.InvalidCount != null)
                    hashCode = hashCode * 59 + this.InvalidCount.GetHashCode();
                if (this.DisabledCount != null)
                    hashCode = hashCode * 59 + this.DisabledCount.GetHashCode();
                if (this.ActiveRemotePortCount != null)
                    hashCode = hashCode * 59 + this.ActiveRemotePortCount.GetHashCode();
                if (this.InactiveRemotePortCount != null)
                    hashCode = hashCode * 59 + this.InactiveRemotePortCount.GetHashCode();
                if (this.VersionedFlowState != null)
                    hashCode = hashCode * 59 + this.VersionedFlowState.GetHashCode();
                if (this.UpToDateCount != null)
                    hashCode = hashCode * 59 + this.UpToDateCount.GetHashCode();
                if (this.LocallyModifiedCount != null)
                    hashCode = hashCode * 59 + this.LocallyModifiedCount.GetHashCode();
                if (this.StaleCount != null)
                    hashCode = hashCode * 59 + this.StaleCount.GetHashCode();
                if (this.LocallyModifiedAndStaleCount != null)
                    hashCode = hashCode * 59 + this.LocallyModifiedAndStaleCount.GetHashCode();
                if (this.SyncFailureCount != null)
                    hashCode = hashCode * 59 + this.SyncFailureCount.GetHashCode();
                if (this.InputPortCount != null)
                    hashCode = hashCode * 59 + this.InputPortCount.GetHashCode();
                if (this.OutputPortCount != null)
                    hashCode = hashCode * 59 + this.OutputPortCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
