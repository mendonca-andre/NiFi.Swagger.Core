/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.IO;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// VersionedFlowSnapshotMetadata
    /// </summary>
    [DataContract]
    public partial class VersionedFlowSnapshotMetadata :  IEquatable<VersionedFlowSnapshotMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionedFlowSnapshotMetadata" /> class.
        /// </summary>
        [JsonConstructor]
        protected VersionedFlowSnapshotMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionedFlowSnapshotMetadata" /> class.
        /// </summary>
        /// <param name="bucketIdentifier">The identifier of the bucket this snapshot belongs to. (required).</param>
        /// <param name="flowIdentifier">The identifier of the flow this snapshot belongs to. (required).</param>
        /// <param name="version">The version of this snapshot of the flow. (required).</param>
        /// <param name="comments">The comments provided by the user when creating the snapshot..</param>
        public VersionedFlowSnapshotMetadata(string bucketIdentifier = default(string), string flowIdentifier = default(string), int? version = default(int?), string comments = default(string))
        {
            // to ensure "bucketIdentifier" is required (not null)
            if (bucketIdentifier == null)
            {
                throw new InvalidDataException("bucketIdentifier is a required property for VersionedFlowSnapshotMetadata and cannot be null");
            }
            else
            {
                this.BucketIdentifier = bucketIdentifier;
            }
            // to ensure "flowIdentifier" is required (not null)
            if (flowIdentifier == null)
            {
                throw new InvalidDataException("flowIdentifier is a required property for VersionedFlowSnapshotMetadata and cannot be null");
            }
            else
            {
                this.FlowIdentifier = flowIdentifier;
            }
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for VersionedFlowSnapshotMetadata and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            this.Comments = comments;
        }
        
        /// <summary>
        /// An WebLink to this entity.
        /// </summary>
        /// <value>An WebLink to this entity.</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public Link Link { get; private set; }

        /// <summary>
        /// The identifier of the bucket this snapshot belongs to.
        /// </summary>
        /// <value>The identifier of the bucket this snapshot belongs to.</value>
        [DataMember(Name="bucketIdentifier", EmitDefaultValue=false)]
        public string BucketIdentifier { get; set; }

        /// <summary>
        /// The identifier of the flow this snapshot belongs to.
        /// </summary>
        /// <value>The identifier of the flow this snapshot belongs to.</value>
        [DataMember(Name="flowIdentifier", EmitDefaultValue=false)]
        public string FlowIdentifier { get; set; }

        /// <summary>
        /// The version of this snapshot of the flow.
        /// </summary>
        /// <value>The version of this snapshot of the flow.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }

        /// <summary>
        /// The timestamp when the flow was saved, as milliseconds since epoch.
        /// </summary>
        /// <value>The timestamp when the flow was saved, as milliseconds since epoch.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; private set; }

        /// <summary>
        /// The user that created this snapshot of the flow.
        /// </summary>
        /// <value>The user that created this snapshot of the flow.</value>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; private set; }

        /// <summary>
        /// The comments provided by the user when creating the snapshot.
        /// </summary>
        /// <value>The comments provided by the user when creating the snapshot.</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VersionedFlowSnapshotMetadata {\n");
            sb.Append("  Link: ").Append(this.Link).Append("\n");
            sb.Append("  BucketIdentifier: ").Append(this.BucketIdentifier).Append("\n");
            sb.Append("  FlowIdentifier: ").Append(this.FlowIdentifier).Append("\n");
            sb.Append("  Version: ").Append(this.Version).Append("\n");
            sb.Append("  Timestamp: ").Append(this.Timestamp).Append("\n");
            sb.Append("  Author: ").Append(this.Author).Append("\n");
            sb.Append("  Comments: ").Append(this.Comments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VersionedFlowSnapshotMetadata);
        }

        /// <summary>
        /// Returns true if VersionedFlowSnapshotMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of VersionedFlowSnapshotMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionedFlowSnapshotMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.BucketIdentifier == input.BucketIdentifier ||
                    (this.BucketIdentifier != null &&
                    this.BucketIdentifier.Equals(input.BucketIdentifier))
                ) && 
                (
                    this.FlowIdentifier == input.FlowIdentifier ||
                    (this.FlowIdentifier != null &&
                    this.FlowIdentifier.Equals(input.FlowIdentifier))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Author == input.Author ||
                    (this.Author != null &&
                    this.Author.Equals(input.Author))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.BucketIdentifier != null)
                    hashCode = hashCode * 59 + this.BucketIdentifier.GetHashCode();
                if (this.FlowIdentifier != null)
                    hashCode = hashCode * 59 + this.FlowIdentifier.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Author != null)
                    hashCode = hashCode * 59 + this.Author.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Version (int?) minimum
            if(this.Version < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Version, must be a value greater than or equal to 1.", new [] { "Version" });
            }

            // Timestamp (long?) minimum
            if(this.Timestamp < (long?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timestamp, must be a value greater than or equal to 1.", new [] { "Timestamp" });
            }

            yield break;
        }
    }

}
