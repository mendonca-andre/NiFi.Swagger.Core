/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// ControllerBulletinsEntity
    /// </summary>
    [DataContract]
    public partial class ControllerBulletinsEntity :  IEquatable<ControllerBulletinsEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ControllerBulletinsEntity" /> class.
        /// </summary>
        /// <param name="bulletins">System level bulletins to be reported to the user..</param>
        /// <param name="controllerServiceBulletins">Controller service bulletins to be reported to the user..</param>
        /// <param name="reportingTaskBulletins">Reporting task bulletins to be reported to the user..</param>
        public ControllerBulletinsEntity(List<BulletinEntity> bulletins = default(List<BulletinEntity>), List<BulletinEntity> controllerServiceBulletins = default(List<BulletinEntity>), List<BulletinEntity> reportingTaskBulletins = default(List<BulletinEntity>))
        {
            this.Bulletins = bulletins;
            this.ControllerServiceBulletins = controllerServiceBulletins;
            this.ReportingTaskBulletins = reportingTaskBulletins;
        }
        
        /// <summary>
        /// System level bulletins to be reported to the user.
        /// </summary>
        /// <value>System level bulletins to be reported to the user.</value>
        [DataMember(Name="bulletins", EmitDefaultValue=false)]
        public List<BulletinEntity> Bulletins { get; set; }

        /// <summary>
        /// Controller service bulletins to be reported to the user.
        /// </summary>
        /// <value>Controller service bulletins to be reported to the user.</value>
        [DataMember(Name="controllerServiceBulletins", EmitDefaultValue=false)]
        public List<BulletinEntity> ControllerServiceBulletins { get; set; }

        /// <summary>
        /// Reporting task bulletins to be reported to the user.
        /// </summary>
        /// <value>Reporting task bulletins to be reported to the user.</value>
        [DataMember(Name="reportingTaskBulletins", EmitDefaultValue=false)]
        public List<BulletinEntity> ReportingTaskBulletins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ControllerBulletinsEntity {\n");
            sb.Append("  Bulletins: ").Append(this.Bulletins).Append("\n");
            sb.Append("  ControllerServiceBulletins: ").Append(this.ControllerServiceBulletins).Append("\n");
            sb.Append("  ReportingTaskBulletins: ").Append(this.ReportingTaskBulletins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ControllerBulletinsEntity);
        }

        /// <summary>
        /// Returns true if ControllerBulletinsEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of ControllerBulletinsEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ControllerBulletinsEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bulletins == input.Bulletins ||
                    this.Bulletins != null &&
                    this.Bulletins.SequenceEqual(input.Bulletins)
                ) && 
                (
                    this.ControllerServiceBulletins == input.ControllerServiceBulletins ||
                    this.ControllerServiceBulletins != null &&
                    this.ControllerServiceBulletins.SequenceEqual(input.ControllerServiceBulletins)
                ) && 
                (
                    this.ReportingTaskBulletins == input.ReportingTaskBulletins ||
                    this.ReportingTaskBulletins != null &&
                    this.ReportingTaskBulletins.SequenceEqual(input.ReportingTaskBulletins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bulletins != null)
                    hashCode = hashCode * 59 + this.Bulletins.GetHashCode();
                if (this.ControllerServiceBulletins != null)
                    hashCode = hashCode * 59 + this.ControllerServiceBulletins.GetHashCode();
                if (this.ReportingTaskBulletins != null)
                    hashCode = hashCode * 59 + this.ReportingTaskBulletins.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
