/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// ProcessGroupDTO
    /// </summary>
    [DataContract]
    public partial class ProcessGroupDTO :  IEquatable<ProcessGroupDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessGroupDTO" /> class.
        /// </summary>
        /// <param name="id">The id of the component..</param>
        /// <param name="versionedComponentId">The ID of the corresponding component that is under version control.</param>
        /// <param name="parentGroupId">The id of parent process group of this component if applicable..</param>
        /// <param name="position">The position of this component in the UI if applicable..</param>
        /// <param name="name">The name of the process group..</param>
        /// <param name="comments">The comments for the process group..</param>
        /// <param name="versionControlInformation">The Version Control information that indicates which Flow Registry, and where in the Flow Registry, this Process Group is tracking to; or null if this Process Group is not under version control.</param>
        /// <param name="runningCount">The number of running components in this process group..</param>
        /// <param name="stoppedCount">The number of stopped components in the process group..</param>
        /// <param name="invalidCount">The number of invalid components in the process group..</param>
        /// <param name="disabledCount">The number of disabled components in the process group..</param>
        /// <param name="activeRemotePortCount">The number of active remote ports in the process group..</param>
        /// <param name="inactiveRemotePortCount">The number of inactive remote ports in the process group..</param>
        /// <param name="upToDateCount">The number of up to date versioned process groups in the process group..</param>
        /// <param name="locallyModifiedCount">The number of locally modified versioned process groups in the process group..</param>
        /// <param name="staleCount">The number of stale versioned process groups in the process group..</param>
        /// <param name="locallyModifiedAndStaleCount">The number of locally modified and stale versioned process groups in the process group..</param>
        /// <param name="syncFailureCount">The number of versioned process groups in the process group that are unable to sync to a registry..</param>
        /// <param name="inputPortCount">The number of input ports in the process group..</param>
        /// <param name="outputPortCount">The number of output ports in the process group..</param>
        /// <param name="contents">The contents of this process group..</param>
        public ProcessGroupDTO(string id = default(string), string versionedComponentId = default(string), string parentGroupId = default(string), PositionDTO position = default(PositionDTO), string name = default(string), string comments = default(string), VersionControlInformationDTO versionControlInformation = default(VersionControlInformationDTO), int? runningCount = default(int?), int? stoppedCount = default(int?), int? invalidCount = default(int?), int? disabledCount = default(int?), int? activeRemotePortCount = default(int?), int? inactiveRemotePortCount = default(int?), int? upToDateCount = default(int?), int? locallyModifiedCount = default(int?), int? staleCount = default(int?), int? locallyModifiedAndStaleCount = default(int?), int? syncFailureCount = default(int?), int? inputPortCount = default(int?), int? outputPortCount = default(int?), FlowSnippetDTO contents = default(FlowSnippetDTO))
        {
            this.Id = id;
            this.VersionedComponentId = versionedComponentId;
            this.ParentGroupId = parentGroupId;
            this.Position = position;
            this.Name = name;
            this.Comments = comments;
            this.VersionControlInformation = versionControlInformation;
            this.RunningCount = runningCount;
            this.StoppedCount = stoppedCount;
            this.InvalidCount = invalidCount;
            this.DisabledCount = disabledCount;
            this.ActiveRemotePortCount = activeRemotePortCount;
            this.InactiveRemotePortCount = inactiveRemotePortCount;
            this.UpToDateCount = upToDateCount;
            this.LocallyModifiedCount = locallyModifiedCount;
            this.StaleCount = staleCount;
            this.LocallyModifiedAndStaleCount = locallyModifiedAndStaleCount;
            this.SyncFailureCount = syncFailureCount;
            this.InputPortCount = inputPortCount;
            this.OutputPortCount = outputPortCount;
            this.Contents = contents;
        }
        
        /// <summary>
        /// The id of the component.
        /// </summary>
        /// <value>The id of the component.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the corresponding component that is under version control
        /// </summary>
        /// <value>The ID of the corresponding component that is under version control</value>
        [DataMember(Name="versionedComponentId", EmitDefaultValue=false)]
        public string VersionedComponentId { get; set; }

        /// <summary>
        /// The id of parent process group of this component if applicable.
        /// </summary>
        /// <value>The id of parent process group of this component if applicable.</value>
        [DataMember(Name="parentGroupId", EmitDefaultValue=false)]
        public string ParentGroupId { get; set; }

        /// <summary>
        /// The position of this component in the UI if applicable.
        /// </summary>
        /// <value>The position of this component in the UI if applicable.</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public PositionDTO Position { get; set; }

        /// <summary>
        /// The name of the process group.
        /// </summary>
        /// <value>The name of the process group.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The comments for the process group.
        /// </summary>
        /// <value>The comments for the process group.</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// The variables that are configured for the Process Group. Note that this map contains only those variables that are defined on this Process Group and not any variables that are defined in the parent Process Group, etc. I.e., this Map will not contain all variables that are accessible by components in this Process Group by rather only the variables that are defined for this Process Group itself.
        /// </summary>
        /// <value>The variables that are configured for the Process Group. Note that this map contains only those variables that are defined on this Process Group and not any variables that are defined in the parent Process Group, etc. I.e., this Map will not contain all variables that are accessible by components in this Process Group by rather only the variables that are defined for this Process Group itself.</value>
        [DataMember(Name="variables", EmitDefaultValue=false)]
        public Dictionary<string, string> Variables { get; private set; }

        /// <summary>
        /// The Version Control information that indicates which Flow Registry, and where in the Flow Registry, this Process Group is tracking to; or null if this Process Group is not under version control
        /// </summary>
        /// <value>The Version Control information that indicates which Flow Registry, and where in the Flow Registry, this Process Group is tracking to; or null if this Process Group is not under version control</value>
        [DataMember(Name="versionControlInformation", EmitDefaultValue=false)]
        public VersionControlInformationDTO VersionControlInformation { get; set; }

        /// <summary>
        /// The number of running components in this process group.
        /// </summary>
        /// <value>The number of running components in this process group.</value>
        [DataMember(Name="runningCount", EmitDefaultValue=false)]
        public int? RunningCount { get; set; }

        /// <summary>
        /// The number of stopped components in the process group.
        /// </summary>
        /// <value>The number of stopped components in the process group.</value>
        [DataMember(Name="stoppedCount", EmitDefaultValue=false)]
        public int? StoppedCount { get; set; }

        /// <summary>
        /// The number of invalid components in the process group.
        /// </summary>
        /// <value>The number of invalid components in the process group.</value>
        [DataMember(Name="invalidCount", EmitDefaultValue=false)]
        public int? InvalidCount { get; set; }

        /// <summary>
        /// The number of disabled components in the process group.
        /// </summary>
        /// <value>The number of disabled components in the process group.</value>
        [DataMember(Name="disabledCount", EmitDefaultValue=false)]
        public int? DisabledCount { get; set; }

        /// <summary>
        /// The number of active remote ports in the process group.
        /// </summary>
        /// <value>The number of active remote ports in the process group.</value>
        [DataMember(Name="activeRemotePortCount", EmitDefaultValue=false)]
        public int? ActiveRemotePortCount { get; set; }

        /// <summary>
        /// The number of inactive remote ports in the process group.
        /// </summary>
        /// <value>The number of inactive remote ports in the process group.</value>
        [DataMember(Name="inactiveRemotePortCount", EmitDefaultValue=false)]
        public int? InactiveRemotePortCount { get; set; }

        /// <summary>
        /// The number of up to date versioned process groups in the process group.
        /// </summary>
        /// <value>The number of up to date versioned process groups in the process group.</value>
        [DataMember(Name="upToDateCount", EmitDefaultValue=false)]
        public int? UpToDateCount { get; set; }

        /// <summary>
        /// The number of locally modified versioned process groups in the process group.
        /// </summary>
        /// <value>The number of locally modified versioned process groups in the process group.</value>
        [DataMember(Name="locallyModifiedCount", EmitDefaultValue=false)]
        public int? LocallyModifiedCount { get; set; }

        /// <summary>
        /// The number of stale versioned process groups in the process group.
        /// </summary>
        /// <value>The number of stale versioned process groups in the process group.</value>
        [DataMember(Name="staleCount", EmitDefaultValue=false)]
        public int? StaleCount { get; set; }

        /// <summary>
        /// The number of locally modified and stale versioned process groups in the process group.
        /// </summary>
        /// <value>The number of locally modified and stale versioned process groups in the process group.</value>
        [DataMember(Name="locallyModifiedAndStaleCount", EmitDefaultValue=false)]
        public int? LocallyModifiedAndStaleCount { get; set; }

        /// <summary>
        /// The number of versioned process groups in the process group that are unable to sync to a registry.
        /// </summary>
        /// <value>The number of versioned process groups in the process group that are unable to sync to a registry.</value>
        [DataMember(Name="syncFailureCount", EmitDefaultValue=false)]
        public int? SyncFailureCount { get; set; }

        /// <summary>
        /// The number of input ports in the process group.
        /// </summary>
        /// <value>The number of input ports in the process group.</value>
        [DataMember(Name="inputPortCount", EmitDefaultValue=false)]
        public int? InputPortCount { get; set; }

        /// <summary>
        /// The number of output ports in the process group.
        /// </summary>
        /// <value>The number of output ports in the process group.</value>
        [DataMember(Name="outputPortCount", EmitDefaultValue=false)]
        public int? OutputPortCount { get; set; }

        /// <summary>
        /// The contents of this process group.
        /// </summary>
        /// <value>The contents of this process group.</value>
        [DataMember(Name="contents", EmitDefaultValue=false)]
        public FlowSnippetDTO Contents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessGroupDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  VersionedComponentId: ").Append(this.VersionedComponentId).Append("\n");
            sb.Append("  ParentGroupId: ").Append(this.ParentGroupId).Append("\n");
            sb.Append("  Position: ").Append(this.Position).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  Comments: ").Append(this.Comments).Append("\n");
            sb.Append("  Variables: ").Append(this.Variables).Append("\n");
            sb.Append("  VersionControlInformation: ").Append(this.VersionControlInformation).Append("\n");
            sb.Append("  RunningCount: ").Append(this.RunningCount).Append("\n");
            sb.Append("  StoppedCount: ").Append(this.StoppedCount).Append("\n");
            sb.Append("  InvalidCount: ").Append(this.InvalidCount).Append("\n");
            sb.Append("  DisabledCount: ").Append(this.DisabledCount).Append("\n");
            sb.Append("  ActiveRemotePortCount: ").Append(this.ActiveRemotePortCount).Append("\n");
            sb.Append("  InactiveRemotePortCount: ").Append(this.InactiveRemotePortCount).Append("\n");
            sb.Append("  UpToDateCount: ").Append(this.UpToDateCount).Append("\n");
            sb.Append("  LocallyModifiedCount: ").Append(this.LocallyModifiedCount).Append("\n");
            sb.Append("  StaleCount: ").Append(this.StaleCount).Append("\n");
            sb.Append("  LocallyModifiedAndStaleCount: ").Append(this.LocallyModifiedAndStaleCount).Append("\n");
            sb.Append("  SyncFailureCount: ").Append(this.SyncFailureCount).Append("\n");
            sb.Append("  InputPortCount: ").Append(this.InputPortCount).Append("\n");
            sb.Append("  OutputPortCount: ").Append(this.OutputPortCount).Append("\n");
            sb.Append("  Contents: ").Append(this.Contents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessGroupDTO);
        }

        /// <summary>
        /// Returns true if ProcessGroupDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessGroupDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessGroupDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VersionedComponentId == input.VersionedComponentId ||
                    (this.VersionedComponentId != null &&
                    this.VersionedComponentId.Equals(input.VersionedComponentId))
                ) && 
                (
                    this.ParentGroupId == input.ParentGroupId ||
                    (this.ParentGroupId != null &&
                    this.ParentGroupId.Equals(input.ParentGroupId))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.Variables == input.Variables ||
                    this.Variables != null &&
                    this.Variables.SequenceEqual(input.Variables)
                ) && 
                (
                    this.VersionControlInformation == input.VersionControlInformation ||
                    (this.VersionControlInformation != null &&
                    this.VersionControlInformation.Equals(input.VersionControlInformation))
                ) && 
                (
                    this.RunningCount == input.RunningCount ||
                    (this.RunningCount != null &&
                    this.RunningCount.Equals(input.RunningCount))
                ) && 
                (
                    this.StoppedCount == input.StoppedCount ||
                    (this.StoppedCount != null &&
                    this.StoppedCount.Equals(input.StoppedCount))
                ) && 
                (
                    this.InvalidCount == input.InvalidCount ||
                    (this.InvalidCount != null &&
                    this.InvalidCount.Equals(input.InvalidCount))
                ) && 
                (
                    this.DisabledCount == input.DisabledCount ||
                    (this.DisabledCount != null &&
                    this.DisabledCount.Equals(input.DisabledCount))
                ) && 
                (
                    this.ActiveRemotePortCount == input.ActiveRemotePortCount ||
                    (this.ActiveRemotePortCount != null &&
                    this.ActiveRemotePortCount.Equals(input.ActiveRemotePortCount))
                ) && 
                (
                    this.InactiveRemotePortCount == input.InactiveRemotePortCount ||
                    (this.InactiveRemotePortCount != null &&
                    this.InactiveRemotePortCount.Equals(input.InactiveRemotePortCount))
                ) && 
                (
                    this.UpToDateCount == input.UpToDateCount ||
                    (this.UpToDateCount != null &&
                    this.UpToDateCount.Equals(input.UpToDateCount))
                ) && 
                (
                    this.LocallyModifiedCount == input.LocallyModifiedCount ||
                    (this.LocallyModifiedCount != null &&
                    this.LocallyModifiedCount.Equals(input.LocallyModifiedCount))
                ) && 
                (
                    this.StaleCount == input.StaleCount ||
                    (this.StaleCount != null &&
                    this.StaleCount.Equals(input.StaleCount))
                ) && 
                (
                    this.LocallyModifiedAndStaleCount == input.LocallyModifiedAndStaleCount ||
                    (this.LocallyModifiedAndStaleCount != null &&
                    this.LocallyModifiedAndStaleCount.Equals(input.LocallyModifiedAndStaleCount))
                ) && 
                (
                    this.SyncFailureCount == input.SyncFailureCount ||
                    (this.SyncFailureCount != null &&
                    this.SyncFailureCount.Equals(input.SyncFailureCount))
                ) && 
                (
                    this.InputPortCount == input.InputPortCount ||
                    (this.InputPortCount != null &&
                    this.InputPortCount.Equals(input.InputPortCount))
                ) && 
                (
                    this.OutputPortCount == input.OutputPortCount ||
                    (this.OutputPortCount != null &&
                    this.OutputPortCount.Equals(input.OutputPortCount))
                ) && 
                (
                    this.Contents == input.Contents ||
                    (this.Contents != null &&
                    this.Contents.Equals(input.Contents))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.VersionedComponentId != null)
                    hashCode = hashCode * 59 + this.VersionedComponentId.GetHashCode();
                if (this.ParentGroupId != null)
                    hashCode = hashCode * 59 + this.ParentGroupId.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Variables != null)
                    hashCode = hashCode * 59 + this.Variables.GetHashCode();
                if (this.VersionControlInformation != null)
                    hashCode = hashCode * 59 + this.VersionControlInformation.GetHashCode();
                if (this.RunningCount != null)
                    hashCode = hashCode * 59 + this.RunningCount.GetHashCode();
                if (this.StoppedCount != null)
                    hashCode = hashCode * 59 + this.StoppedCount.GetHashCode();
                if (this.InvalidCount != null)
                    hashCode = hashCode * 59 + this.InvalidCount.GetHashCode();
                if (this.DisabledCount != null)
                    hashCode = hashCode * 59 + this.DisabledCount.GetHashCode();
                if (this.ActiveRemotePortCount != null)
                    hashCode = hashCode * 59 + this.ActiveRemotePortCount.GetHashCode();
                if (this.InactiveRemotePortCount != null)
                    hashCode = hashCode * 59 + this.InactiveRemotePortCount.GetHashCode();
                if (this.UpToDateCount != null)
                    hashCode = hashCode * 59 + this.UpToDateCount.GetHashCode();
                if (this.LocallyModifiedCount != null)
                    hashCode = hashCode * 59 + this.LocallyModifiedCount.GetHashCode();
                if (this.StaleCount != null)
                    hashCode = hashCode * 59 + this.StaleCount.GetHashCode();
                if (this.LocallyModifiedAndStaleCount != null)
                    hashCode = hashCode * 59 + this.LocallyModifiedAndStaleCount.GetHashCode();
                if (this.SyncFailureCount != null)
                    hashCode = hashCode * 59 + this.SyncFailureCount.GetHashCode();
                if (this.InputPortCount != null)
                    hashCode = hashCode * 59 + this.InputPortCount.GetHashCode();
                if (this.OutputPortCount != null)
                    hashCode = hashCode * 59 + this.OutputPortCount.GetHashCode();
                if (this.Contents != null)
                    hashCode = hashCode * 59 + this.Contents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
