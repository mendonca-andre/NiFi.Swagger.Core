/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// CurrentUserEntity
    /// </summary>
    [DataContract]
    public partial class CurrentUserEntity :  IEquatable<CurrentUserEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentUserEntity" /> class.
        /// </summary>
        /// <param name="identity">The user identity being serialized..</param>
        /// <param name="anonymous">Whether the current user is anonymous..</param>
        /// <param name="provenancePermissions">Permissions for querying provenance..</param>
        /// <param name="countersPermissions">Permissions for accessing counters..</param>
        /// <param name="tenantsPermissions">Permissions for accessing tenants..</param>
        /// <param name="controllerPermissions">Permissions for accessing the controller..</param>
        /// <param name="policiesPermissions">Permissions for accessing the policies..</param>
        /// <param name="systemPermissions">Permissions for accessing system..</param>
        /// <param name="restrictedComponentsPermissions">Permissions for accessing restricted components. Note: the read permission are not used and will always be false..</param>
        /// <param name="componentRestrictionPermissions">Permissions for specific component restrictions..</param>
        /// <param name="canVersionFlows">Whether the current user can version flows..</param>
        public CurrentUserEntity(string identity = default(string), bool? anonymous = default(bool?), PermissionsDTO provenancePermissions = default(PermissionsDTO), PermissionsDTO countersPermissions = default(PermissionsDTO), PermissionsDTO tenantsPermissions = default(PermissionsDTO), PermissionsDTO controllerPermissions = default(PermissionsDTO), PermissionsDTO policiesPermissions = default(PermissionsDTO), PermissionsDTO systemPermissions = default(PermissionsDTO), PermissionsDTO restrictedComponentsPermissions = default(PermissionsDTO), List<ComponentRestrictionPermissionDTO> componentRestrictionPermissions = default(List<ComponentRestrictionPermissionDTO>), bool? canVersionFlows = default(bool?))
        {
            this.Identity = identity;
            this.Anonymous = anonymous;
            this.ProvenancePermissions = provenancePermissions;
            this.CountersPermissions = countersPermissions;
            this.TenantsPermissions = tenantsPermissions;
            this.ControllerPermissions = controllerPermissions;
            this.PoliciesPermissions = policiesPermissions;
            this.SystemPermissions = systemPermissions;
            this.RestrictedComponentsPermissions = restrictedComponentsPermissions;
            this.ComponentRestrictionPermissions = componentRestrictionPermissions;
            this.CanVersionFlows = canVersionFlows;
        }
        
        /// <summary>
        /// The user identity being serialized.
        /// </summary>
        /// <value>The user identity being serialized.</value>
        [DataMember(Name="identity", EmitDefaultValue=false)]
        public string Identity { get; set; }

        /// <summary>
        /// Whether the current user is anonymous.
        /// </summary>
        /// <value>Whether the current user is anonymous.</value>
        [DataMember(Name="anonymous", EmitDefaultValue=false)]
        public bool? Anonymous { get; set; }

        /// <summary>
        /// Permissions for querying provenance.
        /// </summary>
        /// <value>Permissions for querying provenance.</value>
        [DataMember(Name="provenancePermissions", EmitDefaultValue=false)]
        public PermissionsDTO ProvenancePermissions { get; set; }

        /// <summary>
        /// Permissions for accessing counters.
        /// </summary>
        /// <value>Permissions for accessing counters.</value>
        [DataMember(Name="countersPermissions", EmitDefaultValue=false)]
        public PermissionsDTO CountersPermissions { get; set; }

        /// <summary>
        /// Permissions for accessing tenants.
        /// </summary>
        /// <value>Permissions for accessing tenants.</value>
        [DataMember(Name="tenantsPermissions", EmitDefaultValue=false)]
        public PermissionsDTO TenantsPermissions { get; set; }

        /// <summary>
        /// Permissions for accessing the controller.
        /// </summary>
        /// <value>Permissions for accessing the controller.</value>
        [DataMember(Name="controllerPermissions", EmitDefaultValue=false)]
        public PermissionsDTO ControllerPermissions { get; set; }

        /// <summary>
        /// Permissions for accessing the policies.
        /// </summary>
        /// <value>Permissions for accessing the policies.</value>
        [DataMember(Name="policiesPermissions", EmitDefaultValue=false)]
        public PermissionsDTO PoliciesPermissions { get; set; }

        /// <summary>
        /// Permissions for accessing system.
        /// </summary>
        /// <value>Permissions for accessing system.</value>
        [DataMember(Name="systemPermissions", EmitDefaultValue=false)]
        public PermissionsDTO SystemPermissions { get; set; }

        /// <summary>
        /// Permissions for accessing restricted components. Note: the read permission are not used and will always be false.
        /// </summary>
        /// <value>Permissions for accessing restricted components. Note: the read permission are not used and will always be false.</value>
        [DataMember(Name="restrictedComponentsPermissions", EmitDefaultValue=false)]
        public PermissionsDTO RestrictedComponentsPermissions { get; set; }

        /// <summary>
        /// Permissions for specific component restrictions.
        /// </summary>
        /// <value>Permissions for specific component restrictions.</value>
        [DataMember(Name="componentRestrictionPermissions", EmitDefaultValue=false)]
        public List<ComponentRestrictionPermissionDTO> ComponentRestrictionPermissions { get; set; }

        /// <summary>
        /// Whether the current user can version flows.
        /// </summary>
        /// <value>Whether the current user can version flows.</value>
        [DataMember(Name="canVersionFlows", EmitDefaultValue=false)]
        public bool? CanVersionFlows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrentUserEntity {\n");
            sb.Append("  Identity: ").Append(this.Identity).Append("\n");
            sb.Append("  Anonymous: ").Append(this.Anonymous).Append("\n");
            sb.Append("  ProvenancePermissions: ").Append(this.ProvenancePermissions).Append("\n");
            sb.Append("  CountersPermissions: ").Append(this.CountersPermissions).Append("\n");
            sb.Append("  TenantsPermissions: ").Append(this.TenantsPermissions).Append("\n");
            sb.Append("  ControllerPermissions: ").Append(this.ControllerPermissions).Append("\n");
            sb.Append("  PoliciesPermissions: ").Append(this.PoliciesPermissions).Append("\n");
            sb.Append("  SystemPermissions: ").Append(this.SystemPermissions).Append("\n");
            sb.Append("  RestrictedComponentsPermissions: ").Append(this.RestrictedComponentsPermissions).Append("\n");
            sb.Append("  ComponentRestrictionPermissions: ").Append(this.ComponentRestrictionPermissions).Append("\n");
            sb.Append("  CanVersionFlows: ").Append(this.CanVersionFlows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrentUserEntity);
        }

        /// <summary>
        /// Returns true if CurrentUserEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrentUserEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrentUserEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identity == input.Identity ||
                    (this.Identity != null &&
                    this.Identity.Equals(input.Identity))
                ) && 
                (
                    this.Anonymous == input.Anonymous ||
                    (this.Anonymous != null &&
                    this.Anonymous.Equals(input.Anonymous))
                ) && 
                (
                    this.ProvenancePermissions == input.ProvenancePermissions ||
                    (this.ProvenancePermissions != null &&
                    this.ProvenancePermissions.Equals(input.ProvenancePermissions))
                ) && 
                (
                    this.CountersPermissions == input.CountersPermissions ||
                    (this.CountersPermissions != null &&
                    this.CountersPermissions.Equals(input.CountersPermissions))
                ) && 
                (
                    this.TenantsPermissions == input.TenantsPermissions ||
                    (this.TenantsPermissions != null &&
                    this.TenantsPermissions.Equals(input.TenantsPermissions))
                ) && 
                (
                    this.ControllerPermissions == input.ControllerPermissions ||
                    (this.ControllerPermissions != null &&
                    this.ControllerPermissions.Equals(input.ControllerPermissions))
                ) && 
                (
                    this.PoliciesPermissions == input.PoliciesPermissions ||
                    (this.PoliciesPermissions != null &&
                    this.PoliciesPermissions.Equals(input.PoliciesPermissions))
                ) && 
                (
                    this.SystemPermissions == input.SystemPermissions ||
                    (this.SystemPermissions != null &&
                    this.SystemPermissions.Equals(input.SystemPermissions))
                ) && 
                (
                    this.RestrictedComponentsPermissions == input.RestrictedComponentsPermissions ||
                    (this.RestrictedComponentsPermissions != null &&
                    this.RestrictedComponentsPermissions.Equals(input.RestrictedComponentsPermissions))
                ) && 
                (
                    this.ComponentRestrictionPermissions == input.ComponentRestrictionPermissions ||
                    this.ComponentRestrictionPermissions != null &&
                    this.ComponentRestrictionPermissions.SequenceEqual(input.ComponentRestrictionPermissions)
                ) && 
                (
                    this.CanVersionFlows == input.CanVersionFlows ||
                    (this.CanVersionFlows != null &&
                    this.CanVersionFlows.Equals(input.CanVersionFlows))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identity != null)
                    hashCode = hashCode * 59 + this.Identity.GetHashCode();
                if (this.Anonymous != null)
                    hashCode = hashCode * 59 + this.Anonymous.GetHashCode();
                if (this.ProvenancePermissions != null)
                    hashCode = hashCode * 59 + this.ProvenancePermissions.GetHashCode();
                if (this.CountersPermissions != null)
                    hashCode = hashCode * 59 + this.CountersPermissions.GetHashCode();
                if (this.TenantsPermissions != null)
                    hashCode = hashCode * 59 + this.TenantsPermissions.GetHashCode();
                if (this.ControllerPermissions != null)
                    hashCode = hashCode * 59 + this.ControllerPermissions.GetHashCode();
                if (this.PoliciesPermissions != null)
                    hashCode = hashCode * 59 + this.PoliciesPermissions.GetHashCode();
                if (this.SystemPermissions != null)
                    hashCode = hashCode * 59 + this.SystemPermissions.GetHashCode();
                if (this.RestrictedComponentsPermissions != null)
                    hashCode = hashCode * 59 + this.RestrictedComponentsPermissions.GetHashCode();
                if (this.ComponentRestrictionPermissions != null)
                    hashCode = hashCode * 59 + this.ComponentRestrictionPermissions.GetHashCode();
                if (this.CanVersionFlows != null)
                    hashCode = hashCode * 59 + this.CanVersionFlows.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
