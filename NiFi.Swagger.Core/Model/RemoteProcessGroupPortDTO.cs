/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// RemoteProcessGroupPortDTO
    /// </summary>
    [DataContract]
    public partial class RemoteProcessGroupPortDTO :  IEquatable<RemoteProcessGroupPortDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteProcessGroupPortDTO" /> class.
        /// </summary>
        /// <param name="id">The id of the port..</param>
        /// <param name="targetId">The id of the target port..</param>
        /// <param name="versionedComponentId">The ID of the corresponding component that is under version control.</param>
        /// <param name="groupId">The id of the remote process group that the port resides in..</param>
        /// <param name="name">The name of the target port..</param>
        /// <param name="comments">The comments as configured on the target port..</param>
        /// <param name="concurrentlySchedulableTaskCount">The number of task that may transmit flowfiles to the target port concurrently..</param>
        /// <param name="transmitting">Whether the remote port is configured for transmission..</param>
        /// <param name="useCompression">Whether the flowfiles are compressed when sent to the target port..</param>
        /// <param name="exists">Whether the target port exists..</param>
        /// <param name="targetRunning">Whether the target port is running..</param>
        /// <param name="connected">Whether the port has either an incoming or outgoing connection..</param>
        /// <param name="batchSettings">The batch settings for data transmission..</param>
        public RemoteProcessGroupPortDTO(string id = default(string), string targetId = default(string), string versionedComponentId = default(string), string groupId = default(string), string name = default(string), string comments = default(string), int? concurrentlySchedulableTaskCount = default(int?), bool? transmitting = default(bool?), bool? useCompression = default(bool?), bool? exists = default(bool?), bool? targetRunning = default(bool?), bool? connected = default(bool?), BatchSettingsDTO batchSettings = default(BatchSettingsDTO))
        {
            this.Id = id;
            this.TargetId = targetId;
            this.VersionedComponentId = versionedComponentId;
            this.GroupId = groupId;
            this.Name = name;
            this.Comments = comments;
            this.ConcurrentlySchedulableTaskCount = concurrentlySchedulableTaskCount;
            this.Transmitting = transmitting;
            this.UseCompression = useCompression;
            this.Exists = exists;
            this.TargetRunning = targetRunning;
            this.Connected = connected;
            this.BatchSettings = batchSettings;
        }
        
        /// <summary>
        /// The id of the port.
        /// </summary>
        /// <value>The id of the port.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The id of the target port.
        /// </summary>
        /// <value>The id of the target port.</value>
        [DataMember(Name="targetId", EmitDefaultValue=false)]
        public string TargetId { get; set; }

        /// <summary>
        /// The ID of the corresponding component that is under version control
        /// </summary>
        /// <value>The ID of the corresponding component that is under version control</value>
        [DataMember(Name="versionedComponentId", EmitDefaultValue=false)]
        public string VersionedComponentId { get; set; }

        /// <summary>
        /// The id of the remote process group that the port resides in.
        /// </summary>
        /// <value>The id of the remote process group that the port resides in.</value>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public string GroupId { get; set; }

        /// <summary>
        /// The name of the target port.
        /// </summary>
        /// <value>The name of the target port.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The comments as configured on the target port.
        /// </summary>
        /// <value>The comments as configured on the target port.</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// The number of task that may transmit flowfiles to the target port concurrently.
        /// </summary>
        /// <value>The number of task that may transmit flowfiles to the target port concurrently.</value>
        [DataMember(Name="concurrentlySchedulableTaskCount", EmitDefaultValue=false)]
        public int? ConcurrentlySchedulableTaskCount { get; set; }

        /// <summary>
        /// Whether the remote port is configured for transmission.
        /// </summary>
        /// <value>Whether the remote port is configured for transmission.</value>
        [DataMember(Name="transmitting", EmitDefaultValue=false)]
        public bool? Transmitting { get; set; }

        /// <summary>
        /// Whether the flowfiles are compressed when sent to the target port.
        /// </summary>
        /// <value>Whether the flowfiles are compressed when sent to the target port.</value>
        [DataMember(Name="useCompression", EmitDefaultValue=false)]
        public bool? UseCompression { get; set; }

        /// <summary>
        /// Whether the target port exists.
        /// </summary>
        /// <value>Whether the target port exists.</value>
        [DataMember(Name="exists", EmitDefaultValue=false)]
        public bool? Exists { get; set; }

        /// <summary>
        /// Whether the target port is running.
        /// </summary>
        /// <value>Whether the target port is running.</value>
        [DataMember(Name="targetRunning", EmitDefaultValue=false)]
        public bool? TargetRunning { get; set; }

        /// <summary>
        /// Whether the port has either an incoming or outgoing connection.
        /// </summary>
        /// <value>Whether the port has either an incoming or outgoing connection.</value>
        [DataMember(Name="connected", EmitDefaultValue=false)]
        public bool? Connected { get; set; }

        /// <summary>
        /// The batch settings for data transmission.
        /// </summary>
        /// <value>The batch settings for data transmission.</value>
        [DataMember(Name="batchSettings", EmitDefaultValue=false)]
        public BatchSettingsDTO BatchSettings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteProcessGroupPortDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  TargetId: ").Append(this.TargetId).Append("\n");
            sb.Append("  VersionedComponentId: ").Append(this.VersionedComponentId).Append("\n");
            sb.Append("  GroupId: ").Append(this.GroupId).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  Comments: ").Append(this.Comments).Append("\n");
            sb.Append("  ConcurrentlySchedulableTaskCount: ").Append(this.ConcurrentlySchedulableTaskCount).Append("\n");
            sb.Append("  Transmitting: ").Append(this.Transmitting).Append("\n");
            sb.Append("  UseCompression: ").Append(this.UseCompression).Append("\n");
            sb.Append("  Exists: ").Append(this.Exists).Append("\n");
            sb.Append("  TargetRunning: ").Append(this.TargetRunning).Append("\n");
            sb.Append("  Connected: ").Append(this.Connected).Append("\n");
            sb.Append("  BatchSettings: ").Append(this.BatchSettings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemoteProcessGroupPortDTO);
        }

        /// <summary>
        /// Returns true if RemoteProcessGroupPortDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of RemoteProcessGroupPortDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteProcessGroupPortDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TargetId == input.TargetId ||
                    (this.TargetId != null &&
                    this.TargetId.Equals(input.TargetId))
                ) && 
                (
                    this.VersionedComponentId == input.VersionedComponentId ||
                    (this.VersionedComponentId != null &&
                    this.VersionedComponentId.Equals(input.VersionedComponentId))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.ConcurrentlySchedulableTaskCount == input.ConcurrentlySchedulableTaskCount ||
                    (this.ConcurrentlySchedulableTaskCount != null &&
                    this.ConcurrentlySchedulableTaskCount.Equals(input.ConcurrentlySchedulableTaskCount))
                ) && 
                (
                    this.Transmitting == input.Transmitting ||
                    (this.Transmitting != null &&
                    this.Transmitting.Equals(input.Transmitting))
                ) && 
                (
                    this.UseCompression == input.UseCompression ||
                    (this.UseCompression != null &&
                    this.UseCompression.Equals(input.UseCompression))
                ) && 
                (
                    this.Exists == input.Exists ||
                    (this.Exists != null &&
                    this.Exists.Equals(input.Exists))
                ) && 
                (
                    this.TargetRunning == input.TargetRunning ||
                    (this.TargetRunning != null &&
                    this.TargetRunning.Equals(input.TargetRunning))
                ) && 
                (
                    this.Connected == input.Connected ||
                    (this.Connected != null &&
                    this.Connected.Equals(input.Connected))
                ) && 
                (
                    this.BatchSettings == input.BatchSettings ||
                    (this.BatchSettings != null &&
                    this.BatchSettings.Equals(input.BatchSettings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TargetId != null)
                    hashCode = hashCode * 59 + this.TargetId.GetHashCode();
                if (this.VersionedComponentId != null)
                    hashCode = hashCode * 59 + this.VersionedComponentId.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.ConcurrentlySchedulableTaskCount != null)
                    hashCode = hashCode * 59 + this.ConcurrentlySchedulableTaskCount.GetHashCode();
                if (this.Transmitting != null)
                    hashCode = hashCode * 59 + this.Transmitting.GetHashCode();
                if (this.UseCompression != null)
                    hashCode = hashCode * 59 + this.UseCompression.GetHashCode();
                if (this.Exists != null)
                    hashCode = hashCode * 59 + this.Exists.GetHashCode();
                if (this.TargetRunning != null)
                    hashCode = hashCode * 59 + this.TargetRunning.GetHashCode();
                if (this.Connected != null)
                    hashCode = hashCode * 59 + this.Connected.GetHashCode();
                if (this.BatchSettings != null)
                    hashCode = hashCode * 59 + this.BatchSettings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
