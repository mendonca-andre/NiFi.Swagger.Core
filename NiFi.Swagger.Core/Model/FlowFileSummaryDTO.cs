/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// FlowFileSummaryDTO
    /// </summary>
    [DataContract]
    public partial class FlowFileSummaryDTO :  IEquatable<FlowFileSummaryDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlowFileSummaryDTO" /> class.
        /// </summary>
        /// <param name="uri">The URI that can be used to access this FlowFile..</param>
        /// <param name="uuid">The FlowFile UUID..</param>
        /// <param name="filename">The FlowFile filename..</param>
        /// <param name="position">The FlowFile&#39;s position in the queue..</param>
        /// <param name="size">The FlowFile file size..</param>
        /// <param name="queuedDuration">How long this FlowFile has been enqueued..</param>
        /// <param name="lineageDuration">Duration since the FlowFile&#39;s greatest ancestor entered the flow..</param>
        /// <param name="penaltyExpiresIn">How long in milliseconds until the FlowFile penalty expires..</param>
        /// <param name="clusterNodeId">The id of the node where this FlowFile resides..</param>
        /// <param name="clusterNodeAddress">The label for the node where this FlowFile resides..</param>
        /// <param name="penalized">If the FlowFile is penalized..</param>
        public FlowFileSummaryDTO(string uri = default(string), string uuid = default(string), string filename = default(string), int? position = default(int?), long? size = default(long?), long? queuedDuration = default(long?), long? lineageDuration = default(long?), long? penaltyExpiresIn = default(long?), string clusterNodeId = default(string), string clusterNodeAddress = default(string), bool? penalized = default(bool?))
        {
            this.Uri = uri;
            this.Uuid = uuid;
            this.Filename = filename;
            this.Position = position;
            this.Size = size;
            this.QueuedDuration = queuedDuration;
            this.LineageDuration = lineageDuration;
            this.PenaltyExpiresIn = penaltyExpiresIn;
            this.ClusterNodeId = clusterNodeId;
            this.ClusterNodeAddress = clusterNodeAddress;
            this.Penalized = penalized;
        }
        
        /// <summary>
        /// The URI that can be used to access this FlowFile.
        /// </summary>
        /// <value>The URI that can be used to access this FlowFile.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// The FlowFile UUID.
        /// </summary>
        /// <value>The FlowFile UUID.</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// The FlowFile filename.
        /// </summary>
        /// <value>The FlowFile filename.</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// The FlowFile&#39;s position in the queue.
        /// </summary>
        /// <value>The FlowFile&#39;s position in the queue.</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public int? Position { get; set; }

        /// <summary>
        /// The FlowFile file size.
        /// </summary>
        /// <value>The FlowFile file size.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public long? Size { get; set; }

        /// <summary>
        /// How long this FlowFile has been enqueued.
        /// </summary>
        /// <value>How long this FlowFile has been enqueued.</value>
        [DataMember(Name="queuedDuration", EmitDefaultValue=false)]
        public long? QueuedDuration { get; set; }

        /// <summary>
        /// Duration since the FlowFile&#39;s greatest ancestor entered the flow.
        /// </summary>
        /// <value>Duration since the FlowFile&#39;s greatest ancestor entered the flow.</value>
        [DataMember(Name="lineageDuration", EmitDefaultValue=false)]
        public long? LineageDuration { get; set; }

        /// <summary>
        /// How long in milliseconds until the FlowFile penalty expires.
        /// </summary>
        /// <value>How long in milliseconds until the FlowFile penalty expires.</value>
        [DataMember(Name="penaltyExpiresIn", EmitDefaultValue=false)]
        public long? PenaltyExpiresIn { get; set; }

        /// <summary>
        /// The id of the node where this FlowFile resides.
        /// </summary>
        /// <value>The id of the node where this FlowFile resides.</value>
        [DataMember(Name="clusterNodeId", EmitDefaultValue=false)]
        public string ClusterNodeId { get; set; }

        /// <summary>
        /// The label for the node where this FlowFile resides.
        /// </summary>
        /// <value>The label for the node where this FlowFile resides.</value>
        [DataMember(Name="clusterNodeAddress", EmitDefaultValue=false)]
        public string ClusterNodeAddress { get; set; }

        /// <summary>
        /// If the FlowFile is penalized.
        /// </summary>
        /// <value>If the FlowFile is penalized.</value>
        [DataMember(Name="penalized", EmitDefaultValue=false)]
        public bool? Penalized { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowFileSummaryDTO {\n");
            sb.Append("  Uri: ").Append(this.Uri).Append("\n");
            sb.Append("  Uuid: ").Append(this.Uuid).Append("\n");
            sb.Append("  Filename: ").Append(this.Filename).Append("\n");
            sb.Append("  Position: ").Append(this.Position).Append("\n");
            sb.Append("  Size: ").Append(this.Size).Append("\n");
            sb.Append("  QueuedDuration: ").Append(this.QueuedDuration).Append("\n");
            sb.Append("  LineageDuration: ").Append(this.LineageDuration).Append("\n");
            sb.Append("  PenaltyExpiresIn: ").Append(this.PenaltyExpiresIn).Append("\n");
            sb.Append("  ClusterNodeId: ").Append(this.ClusterNodeId).Append("\n");
            sb.Append("  ClusterNodeAddress: ").Append(this.ClusterNodeAddress).Append("\n");
            sb.Append("  Penalized: ").Append(this.Penalized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlowFileSummaryDTO);
        }

        /// <summary>
        /// Returns true if FlowFileSummaryDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of FlowFileSummaryDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowFileSummaryDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.QueuedDuration == input.QueuedDuration ||
                    (this.QueuedDuration != null &&
                    this.QueuedDuration.Equals(input.QueuedDuration))
                ) && 
                (
                    this.LineageDuration == input.LineageDuration ||
                    (this.LineageDuration != null &&
                    this.LineageDuration.Equals(input.LineageDuration))
                ) && 
                (
                    this.PenaltyExpiresIn == input.PenaltyExpiresIn ||
                    (this.PenaltyExpiresIn != null &&
                    this.PenaltyExpiresIn.Equals(input.PenaltyExpiresIn))
                ) && 
                (
                    this.ClusterNodeId == input.ClusterNodeId ||
                    (this.ClusterNodeId != null &&
                    this.ClusterNodeId.Equals(input.ClusterNodeId))
                ) && 
                (
                    this.ClusterNodeAddress == input.ClusterNodeAddress ||
                    (this.ClusterNodeAddress != null &&
                    this.ClusterNodeAddress.Equals(input.ClusterNodeAddress))
                ) && 
                (
                    this.Penalized == input.Penalized ||
                    (this.Penalized != null &&
                    this.Penalized.Equals(input.Penalized))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.QueuedDuration != null)
                    hashCode = hashCode * 59 + this.QueuedDuration.GetHashCode();
                if (this.LineageDuration != null)
                    hashCode = hashCode * 59 + this.LineageDuration.GetHashCode();
                if (this.PenaltyExpiresIn != null)
                    hashCode = hashCode * 59 + this.PenaltyExpiresIn.GetHashCode();
                if (this.ClusterNodeId != null)
                    hashCode = hashCode * 59 + this.ClusterNodeId.GetHashCode();
                if (this.ClusterNodeAddress != null)
                    hashCode = hashCode * 59 + this.ClusterNodeAddress.GetHashCode();
                if (this.Penalized != null)
                    hashCode = hashCode * 59 + this.Penalized.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
