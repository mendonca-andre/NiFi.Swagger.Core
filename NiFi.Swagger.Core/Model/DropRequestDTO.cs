/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// DropRequestDTO
    /// </summary>
    [DataContract]
    public partial class DropRequestDTO :  IEquatable<DropRequestDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DropRequestDTO" /> class.
        /// </summary>
        /// <param name="id">The id for this drop request..</param>
        /// <param name="uri">The URI for future requests to this drop request..</param>
        /// <param name="submissionTime">The timestamp when the query was submitted..</param>
        /// <param name="lastUpdated">The last time this drop request was updated..</param>
        /// <param name="percentCompleted">The current percent complete..</param>
        /// <param name="finished">Whether the query has finished..</param>
        /// <param name="failureReason">The reason, if any, that this drop request failed..</param>
        /// <param name="currentCount">The number of flow files currently queued..</param>
        /// <param name="currentSize">The size of flow files currently queued in bytes..</param>
        /// <param name="current">The count and size of flow files currently queued..</param>
        /// <param name="originalCount">The number of flow files to be dropped as a result of this request..</param>
        /// <param name="originalSize">The size of flow files to be dropped as a result of this request in bytes..</param>
        /// <param name="original">The count and size of flow files to be dropped as a result of this request..</param>
        /// <param name="droppedCount">The number of flow files that have been dropped thus far..</param>
        /// <param name="droppedSize">The size of flow files that have been dropped thus far in bytes..</param>
        /// <param name="dropped">The count and size of flow files that have been dropped thus far..</param>
        /// <param name="state">The current state of the drop request..</param>
        public DropRequestDTO(string id = default(string), string uri = default(string), string submissionTime = default(string), string lastUpdated = default(string), int? percentCompleted = default(int?), bool? finished = default(bool?), string failureReason = default(string), int? currentCount = default(int?), long? currentSize = default(long?), string current = default(string), int? originalCount = default(int?), long? originalSize = default(long?), string original = default(string), int? droppedCount = default(int?), long? droppedSize = default(long?), string dropped = default(string), string state = default(string))
        {
            this.Id = id;
            this.Uri = uri;
            this.SubmissionTime = submissionTime;
            this.LastUpdated = lastUpdated;
            this.PercentCompleted = percentCompleted;
            this.Finished = finished;
            this.FailureReason = failureReason;
            this.CurrentCount = currentCount;
            this.CurrentSize = currentSize;
            this.Current = current;
            this.OriginalCount = originalCount;
            this.OriginalSize = originalSize;
            this.Original = original;
            this.DroppedCount = droppedCount;
            this.DroppedSize = droppedSize;
            this.Dropped = dropped;
            this.State = state;
        }
        
        /// <summary>
        /// The id for this drop request.
        /// </summary>
        /// <value>The id for this drop request.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The URI for future requests to this drop request.
        /// </summary>
        /// <value>The URI for future requests to this drop request.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// The timestamp when the query was submitted.
        /// </summary>
        /// <value>The timestamp when the query was submitted.</value>
        [DataMember(Name="submissionTime", EmitDefaultValue=false)]
        public string SubmissionTime { get; set; }

        /// <summary>
        /// The last time this drop request was updated.
        /// </summary>
        /// <value>The last time this drop request was updated.</value>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public string LastUpdated { get; set; }

        /// <summary>
        /// The current percent complete.
        /// </summary>
        /// <value>The current percent complete.</value>
        [DataMember(Name="percentCompleted", EmitDefaultValue=false)]
        public int? PercentCompleted { get; set; }

        /// <summary>
        /// Whether the query has finished.
        /// </summary>
        /// <value>Whether the query has finished.</value>
        [DataMember(Name="finished", EmitDefaultValue=false)]
        public bool? Finished { get; set; }

        /// <summary>
        /// The reason, if any, that this drop request failed.
        /// </summary>
        /// <value>The reason, if any, that this drop request failed.</value>
        [DataMember(Name="failureReason", EmitDefaultValue=false)]
        public string FailureReason { get; set; }

        /// <summary>
        /// The number of flow files currently queued.
        /// </summary>
        /// <value>The number of flow files currently queued.</value>
        [DataMember(Name="currentCount", EmitDefaultValue=false)]
        public int? CurrentCount { get; set; }

        /// <summary>
        /// The size of flow files currently queued in bytes.
        /// </summary>
        /// <value>The size of flow files currently queued in bytes.</value>
        [DataMember(Name="currentSize", EmitDefaultValue=false)]
        public long? CurrentSize { get; set; }

        /// <summary>
        /// The count and size of flow files currently queued.
        /// </summary>
        /// <value>The count and size of flow files currently queued.</value>
        [DataMember(Name="current", EmitDefaultValue=false)]
        public string Current { get; set; }

        /// <summary>
        /// The number of flow files to be dropped as a result of this request.
        /// </summary>
        /// <value>The number of flow files to be dropped as a result of this request.</value>
        [DataMember(Name="originalCount", EmitDefaultValue=false)]
        public int? OriginalCount { get; set; }

        /// <summary>
        /// The size of flow files to be dropped as a result of this request in bytes.
        /// </summary>
        /// <value>The size of flow files to be dropped as a result of this request in bytes.</value>
        [DataMember(Name="originalSize", EmitDefaultValue=false)]
        public long? OriginalSize { get; set; }

        /// <summary>
        /// The count and size of flow files to be dropped as a result of this request.
        /// </summary>
        /// <value>The count and size of flow files to be dropped as a result of this request.</value>
        [DataMember(Name="original", EmitDefaultValue=false)]
        public string Original { get; set; }

        /// <summary>
        /// The number of flow files that have been dropped thus far.
        /// </summary>
        /// <value>The number of flow files that have been dropped thus far.</value>
        [DataMember(Name="droppedCount", EmitDefaultValue=false)]
        public int? DroppedCount { get; set; }

        /// <summary>
        /// The size of flow files that have been dropped thus far in bytes.
        /// </summary>
        /// <value>The size of flow files that have been dropped thus far in bytes.</value>
        [DataMember(Name="droppedSize", EmitDefaultValue=false)]
        public long? DroppedSize { get; set; }

        /// <summary>
        /// The count and size of flow files that have been dropped thus far.
        /// </summary>
        /// <value>The count and size of flow files that have been dropped thus far.</value>
        [DataMember(Name="dropped", EmitDefaultValue=false)]
        public string Dropped { get; set; }

        /// <summary>
        /// The current state of the drop request.
        /// </summary>
        /// <value>The current state of the drop request.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DropRequestDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  Uri: ").Append(this.Uri).Append("\n");
            sb.Append("  SubmissionTime: ").Append(this.SubmissionTime).Append("\n");
            sb.Append("  LastUpdated: ").Append(this.LastUpdated).Append("\n");
            sb.Append("  PercentCompleted: ").Append(this.PercentCompleted).Append("\n");
            sb.Append("  Finished: ").Append(this.Finished).Append("\n");
            sb.Append("  FailureReason: ").Append(this.FailureReason).Append("\n");
            sb.Append("  CurrentCount: ").Append(this.CurrentCount).Append("\n");
            sb.Append("  CurrentSize: ").Append(this.CurrentSize).Append("\n");
            sb.Append("  Current: ").Append(this.Current).Append("\n");
            sb.Append("  OriginalCount: ").Append(this.OriginalCount).Append("\n");
            sb.Append("  OriginalSize: ").Append(this.OriginalSize).Append("\n");
            sb.Append("  Original: ").Append(this.Original).Append("\n");
            sb.Append("  DroppedCount: ").Append(this.DroppedCount).Append("\n");
            sb.Append("  DroppedSize: ").Append(this.DroppedSize).Append("\n");
            sb.Append("  Dropped: ").Append(this.Dropped).Append("\n");
            sb.Append("  State: ").Append(this.State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DropRequestDTO);
        }

        /// <summary>
        /// Returns true if DropRequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DropRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DropRequestDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.SubmissionTime == input.SubmissionTime ||
                    (this.SubmissionTime != null &&
                    this.SubmissionTime.Equals(input.SubmissionTime))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.PercentCompleted == input.PercentCompleted ||
                    (this.PercentCompleted != null &&
                    this.PercentCompleted.Equals(input.PercentCompleted))
                ) && 
                (
                    this.Finished == input.Finished ||
                    (this.Finished != null &&
                    this.Finished.Equals(input.Finished))
                ) && 
                (
                    this.FailureReason == input.FailureReason ||
                    (this.FailureReason != null &&
                    this.FailureReason.Equals(input.FailureReason))
                ) && 
                (
                    this.CurrentCount == input.CurrentCount ||
                    (this.CurrentCount != null &&
                    this.CurrentCount.Equals(input.CurrentCount))
                ) && 
                (
                    this.CurrentSize == input.CurrentSize ||
                    (this.CurrentSize != null &&
                    this.CurrentSize.Equals(input.CurrentSize))
                ) && 
                (
                    this.Current == input.Current ||
                    (this.Current != null &&
                    this.Current.Equals(input.Current))
                ) && 
                (
                    this.OriginalCount == input.OriginalCount ||
                    (this.OriginalCount != null &&
                    this.OriginalCount.Equals(input.OriginalCount))
                ) && 
                (
                    this.OriginalSize == input.OriginalSize ||
                    (this.OriginalSize != null &&
                    this.OriginalSize.Equals(input.OriginalSize))
                ) && 
                (
                    this.Original == input.Original ||
                    (this.Original != null &&
                    this.Original.Equals(input.Original))
                ) && 
                (
                    this.DroppedCount == input.DroppedCount ||
                    (this.DroppedCount != null &&
                    this.DroppedCount.Equals(input.DroppedCount))
                ) && 
                (
                    this.DroppedSize == input.DroppedSize ||
                    (this.DroppedSize != null &&
                    this.DroppedSize.Equals(input.DroppedSize))
                ) && 
                (
                    this.Dropped == input.Dropped ||
                    (this.Dropped != null &&
                    this.Dropped.Equals(input.Dropped))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.SubmissionTime != null)
                    hashCode = hashCode * 59 + this.SubmissionTime.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                if (this.PercentCompleted != null)
                    hashCode = hashCode * 59 + this.PercentCompleted.GetHashCode();
                if (this.Finished != null)
                    hashCode = hashCode * 59 + this.Finished.GetHashCode();
                if (this.FailureReason != null)
                    hashCode = hashCode * 59 + this.FailureReason.GetHashCode();
                if (this.CurrentCount != null)
                    hashCode = hashCode * 59 + this.CurrentCount.GetHashCode();
                if (this.CurrentSize != null)
                    hashCode = hashCode * 59 + this.CurrentSize.GetHashCode();
                if (this.Current != null)
                    hashCode = hashCode * 59 + this.Current.GetHashCode();
                if (this.OriginalCount != null)
                    hashCode = hashCode * 59 + this.OriginalCount.GetHashCode();
                if (this.OriginalSize != null)
                    hashCode = hashCode * 59 + this.OriginalSize.GetHashCode();
                if (this.Original != null)
                    hashCode = hashCode * 59 + this.Original.GetHashCode();
                if (this.DroppedCount != null)
                    hashCode = hashCode * 59 + this.DroppedCount.GetHashCode();
                if (this.DroppedSize != null)
                    hashCode = hashCode * 59 + this.DroppedSize.GetHashCode();
                if (this.Dropped != null)
                    hashCode = hashCode * 59 + this.Dropped.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
