/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// ClusterSummaryDTO
    /// </summary>
    [DataContract]
    public partial class ClusterSummaryDTO :  IEquatable<ClusterSummaryDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterSummaryDTO" /> class.
        /// </summary>
        /// <param name="connectedNodes">When clustered, reports the number of nodes connected vs the number of nodes in the cluster..</param>
        /// <param name="connectedNodeCount">The number of nodes that are currently connected to the cluster.</param>
        /// <param name="totalNodeCount">The number of nodes in the cluster, regardless of whether or not they are connected.</param>
        /// <param name="clustered">Whether this NiFi instance is clustered..</param>
        /// <param name="connectedToCluster">Whether this NiFi instance is connected to a cluster..</param>
        public ClusterSummaryDTO(string connectedNodes = default(string), int? connectedNodeCount = default(int?), int? totalNodeCount = default(int?), bool? clustered = default(bool?), bool? connectedToCluster = default(bool?))
        {
            this.ConnectedNodes = connectedNodes;
            this.ConnectedNodeCount = connectedNodeCount;
            this.TotalNodeCount = totalNodeCount;
            this.Clustered = clustered;
            this.ConnectedToCluster = connectedToCluster;
        }
        
        /// <summary>
        /// When clustered, reports the number of nodes connected vs the number of nodes in the cluster.
        /// </summary>
        /// <value>When clustered, reports the number of nodes connected vs the number of nodes in the cluster.</value>
        [DataMember(Name="connectedNodes", EmitDefaultValue=false)]
        public string ConnectedNodes { get; set; }

        /// <summary>
        /// The number of nodes that are currently connected to the cluster
        /// </summary>
        /// <value>The number of nodes that are currently connected to the cluster</value>
        [DataMember(Name="connectedNodeCount", EmitDefaultValue=false)]
        public int? ConnectedNodeCount { get; set; }

        /// <summary>
        /// The number of nodes in the cluster, regardless of whether or not they are connected
        /// </summary>
        /// <value>The number of nodes in the cluster, regardless of whether or not they are connected</value>
        [DataMember(Name="totalNodeCount", EmitDefaultValue=false)]
        public int? TotalNodeCount { get; set; }

        /// <summary>
        /// Whether this NiFi instance is clustered.
        /// </summary>
        /// <value>Whether this NiFi instance is clustered.</value>
        [DataMember(Name="clustered", EmitDefaultValue=false)]
        public bool? Clustered { get; set; }

        /// <summary>
        /// Whether this NiFi instance is connected to a cluster.
        /// </summary>
        /// <value>Whether this NiFi instance is connected to a cluster.</value>
        [DataMember(Name="connectedToCluster", EmitDefaultValue=false)]
        public bool? ConnectedToCluster { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClusterSummaryDTO {\n");
            sb.Append("  ConnectedNodes: ").Append(this.ConnectedNodes).Append("\n");
            sb.Append("  ConnectedNodeCount: ").Append(this.ConnectedNodeCount).Append("\n");
            sb.Append("  TotalNodeCount: ").Append(this.TotalNodeCount).Append("\n");
            sb.Append("  Clustered: ").Append(this.Clustered).Append("\n");
            sb.Append("  ConnectedToCluster: ").Append(this.ConnectedToCluster).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClusterSummaryDTO);
        }

        /// <summary>
        /// Returns true if ClusterSummaryDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ClusterSummaryDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClusterSummaryDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConnectedNodes == input.ConnectedNodes ||
                    (this.ConnectedNodes != null &&
                    this.ConnectedNodes.Equals(input.ConnectedNodes))
                ) && 
                (
                    this.ConnectedNodeCount == input.ConnectedNodeCount ||
                    (this.ConnectedNodeCount != null &&
                    this.ConnectedNodeCount.Equals(input.ConnectedNodeCount))
                ) && 
                (
                    this.TotalNodeCount == input.TotalNodeCount ||
                    (this.TotalNodeCount != null &&
                    this.TotalNodeCount.Equals(input.TotalNodeCount))
                ) && 
                (
                    this.Clustered == input.Clustered ||
                    (this.Clustered != null &&
                    this.Clustered.Equals(input.Clustered))
                ) && 
                (
                    this.ConnectedToCluster == input.ConnectedToCluster ||
                    (this.ConnectedToCluster != null &&
                    this.ConnectedToCluster.Equals(input.ConnectedToCluster))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConnectedNodes != null)
                    hashCode = hashCode * 59 + this.ConnectedNodes.GetHashCode();
                if (this.ConnectedNodeCount != null)
                    hashCode = hashCode * 59 + this.ConnectedNodeCount.GetHashCode();
                if (this.TotalNodeCount != null)
                    hashCode = hashCode * 59 + this.TotalNodeCount.GetHashCode();
                if (this.Clustered != null)
                    hashCode = hashCode * 59 + this.Clustered.GetHashCode();
                if (this.ConnectedToCluster != null)
                    hashCode = hashCode * 59 + this.ConnectedToCluster.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
