/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// AccessPolicyDTO
    /// </summary>
    [DataContract]
    public partial class AccessPolicyDTO :  IEquatable<AccessPolicyDTO>, IValidatableObject
    {
        /// <summary>
        /// The action associated with this access policy.
        /// </summary>
        /// <value>The action associated with this access policy.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Read for value: read
            /// </summary>
            [EnumMember(Value = "read")]
            Read = 1,
            
            /// <summary>
            /// Enum Write for value: write
            /// </summary>
            [EnumMember(Value = "write")]
            Write = 2
        }

        /// <summary>
        /// The action associated with this access policy.
        /// </summary>
        /// <value>The action associated with this access policy.</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum? Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessPolicyDTO" /> class.
        /// </summary>
        /// <param name="id">The id of the component..</param>
        /// <param name="versionedComponentId">The ID of the corresponding component that is under version control.</param>
        /// <param name="parentGroupId">The id of parent process group of this component if applicable..</param>
        /// <param name="position">The position of this component in the UI if applicable..</param>
        /// <param name="resource">The resource for this access policy..</param>
        /// <param name="action">The action associated with this access policy..</param>
        /// <param name="componentReference">Component this policy references if applicable..</param>
        /// <param name="configurable">Whether this policy is configurable..</param>
        /// <param name="users">The set of user IDs associated with this access policy..</param>
        /// <param name="userGroups">The set of user group IDs associated with this access policy..</param>
        public AccessPolicyDTO(string id = default(string), string versionedComponentId = default(string), string parentGroupId = default(string), PositionDTO position = default(PositionDTO), string resource = default(string), ActionEnum? action = default(ActionEnum?), ComponentReferenceEntity componentReference = default(ComponentReferenceEntity), bool? configurable = default(bool?), List<TenantEntity> users = default(List<TenantEntity>), List<TenantEntity> userGroups = default(List<TenantEntity>))
        {
            this.Id = id;
            this.VersionedComponentId = versionedComponentId;
            this.ParentGroupId = parentGroupId;
            this.Position = position;
            this.Resource = resource;
            this.Action = action;
            this.ComponentReference = componentReference;
            this.Configurable = configurable;
            this.Users = users;
            this.UserGroups = userGroups;
        }
        
        /// <summary>
        /// The id of the component.
        /// </summary>
        /// <value>The id of the component.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the corresponding component that is under version control
        /// </summary>
        /// <value>The ID of the corresponding component that is under version control</value>
        [DataMember(Name="versionedComponentId", EmitDefaultValue=false)]
        public string VersionedComponentId { get; set; }

        /// <summary>
        /// The id of parent process group of this component if applicable.
        /// </summary>
        /// <value>The id of parent process group of this component if applicable.</value>
        [DataMember(Name="parentGroupId", EmitDefaultValue=false)]
        public string ParentGroupId { get; set; }

        /// <summary>
        /// The position of this component in the UI if applicable.
        /// </summary>
        /// <value>The position of this component in the UI if applicable.</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public PositionDTO Position { get; set; }

        /// <summary>
        /// The resource for this access policy.
        /// </summary>
        /// <value>The resource for this access policy.</value>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public string Resource { get; set; }


        /// <summary>
        /// Component this policy references if applicable.
        /// </summary>
        /// <value>Component this policy references if applicable.</value>
        [DataMember(Name="componentReference", EmitDefaultValue=false)]
        public ComponentReferenceEntity ComponentReference { get; set; }

        /// <summary>
        /// Whether this policy is configurable.
        /// </summary>
        /// <value>Whether this policy is configurable.</value>
        [DataMember(Name="configurable", EmitDefaultValue=false)]
        public bool? Configurable { get; set; }

        /// <summary>
        /// The set of user IDs associated with this access policy.
        /// </summary>
        /// <value>The set of user IDs associated with this access policy.</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<TenantEntity> Users { get; set; }

        /// <summary>
        /// The set of user group IDs associated with this access policy.
        /// </summary>
        /// <value>The set of user group IDs associated with this access policy.</value>
        [DataMember(Name="userGroups", EmitDefaultValue=false)]
        public List<TenantEntity> UserGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessPolicyDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  VersionedComponentId: ").Append(this.VersionedComponentId).Append("\n");
            sb.Append("  ParentGroupId: ").Append(this.ParentGroupId).Append("\n");
            sb.Append("  Position: ").Append(this.Position).Append("\n");
            sb.Append("  Resource: ").Append(this.Resource).Append("\n");
            sb.Append("  Action: ").Append(this.Action).Append("\n");
            sb.Append("  ComponentReference: ").Append(this.ComponentReference).Append("\n");
            sb.Append("  Configurable: ").Append(this.Configurable).Append("\n");
            sb.Append("  Users: ").Append(this.Users).Append("\n");
            sb.Append("  UserGroups: ").Append(this.UserGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccessPolicyDTO);
        }

        /// <summary>
        /// Returns true if AccessPolicyDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of AccessPolicyDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessPolicyDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VersionedComponentId == input.VersionedComponentId ||
                    (this.VersionedComponentId != null &&
                    this.VersionedComponentId.Equals(input.VersionedComponentId))
                ) && 
                (
                    this.ParentGroupId == input.ParentGroupId ||
                    (this.ParentGroupId != null &&
                    this.ParentGroupId.Equals(input.ParentGroupId))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Resource == input.Resource ||
                    (this.Resource != null &&
                    this.Resource.Equals(input.Resource))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.ComponentReference == input.ComponentReference ||
                    (this.ComponentReference != null &&
                    this.ComponentReference.Equals(input.ComponentReference))
                ) && 
                (
                    this.Configurable == input.Configurable ||
                    (this.Configurable != null &&
                    this.Configurable.Equals(input.Configurable))
                ) && 
                (
                    this.Users == input.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(input.Users)
                ) && 
                (
                    this.UserGroups == input.UserGroups ||
                    this.UserGroups != null &&
                    this.UserGroups.SequenceEqual(input.UserGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.VersionedComponentId != null)
                    hashCode = hashCode * 59 + this.VersionedComponentId.GetHashCode();
                if (this.ParentGroupId != null)
                    hashCode = hashCode * 59 + this.ParentGroupId.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Resource != null)
                    hashCode = hashCode * 59 + this.Resource.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.ComponentReference != null)
                    hashCode = hashCode * 59 + this.ComponentReference.GetHashCode();
                if (this.Configurable != null)
                    hashCode = hashCode * 59 + this.Configurable.GetHashCode();
                if (this.Users != null)
                    hashCode = hashCode * 59 + this.Users.GetHashCode();
                if (this.UserGroups != null)
                    hashCode = hashCode * 59 + this.UserGroups.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
