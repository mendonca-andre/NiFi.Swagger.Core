/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// ProvenanceDTO
    /// </summary>
    [DataContract]
    public partial class ProvenanceDTO :  IEquatable<ProvenanceDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvenanceDTO" /> class.
        /// </summary>
        /// <param name="id">The id of the provenance query..</param>
        /// <param name="uri">The URI for this query. Used for obtaining/deleting the request at a later time.</param>
        /// <param name="submissionTime">The timestamp when the query was submitted..</param>
        /// <param name="expiration">The timestamp when the query will expire..</param>
        /// <param name="percentCompleted">The current percent complete..</param>
        /// <param name="finished">Whether the query has finished..</param>
        /// <param name="request">The provenance request..</param>
        /// <param name="results">The provenance results..</param>
        public ProvenanceDTO(string id = default(string), string uri = default(string), string submissionTime = default(string), string expiration = default(string), int? percentCompleted = default(int?), bool? finished = default(bool?), ProvenanceRequestDTO request = default(ProvenanceRequestDTO), ProvenanceResultsDTO results = default(ProvenanceResultsDTO))
        {
            this.Id = id;
            this.Uri = uri;
            this.SubmissionTime = submissionTime;
            this.Expiration = expiration;
            this.PercentCompleted = percentCompleted;
            this.Finished = finished;
            this.Request = request;
            this.Results = results;
        }
        
        /// <summary>
        /// The id of the provenance query.
        /// </summary>
        /// <value>The id of the provenance query.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The URI for this query. Used for obtaining/deleting the request at a later time
        /// </summary>
        /// <value>The URI for this query. Used for obtaining/deleting the request at a later time</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// The timestamp when the query was submitted.
        /// </summary>
        /// <value>The timestamp when the query was submitted.</value>
        [DataMember(Name="submissionTime", EmitDefaultValue=false)]
        public string SubmissionTime { get; set; }

        /// <summary>
        /// The timestamp when the query will expire.
        /// </summary>
        /// <value>The timestamp when the query will expire.</value>
        [DataMember(Name="expiration", EmitDefaultValue=false)]
        public string Expiration { get; set; }

        /// <summary>
        /// The current percent complete.
        /// </summary>
        /// <value>The current percent complete.</value>
        [DataMember(Name="percentCompleted", EmitDefaultValue=false)]
        public int? PercentCompleted { get; set; }

        /// <summary>
        /// Whether the query has finished.
        /// </summary>
        /// <value>Whether the query has finished.</value>
        [DataMember(Name="finished", EmitDefaultValue=false)]
        public bool? Finished { get; set; }

        /// <summary>
        /// The provenance request.
        /// </summary>
        /// <value>The provenance request.</value>
        [DataMember(Name="request", EmitDefaultValue=false)]
        public ProvenanceRequestDTO Request { get; set; }

        /// <summary>
        /// The provenance results.
        /// </summary>
        /// <value>The provenance results.</value>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public ProvenanceResultsDTO Results { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvenanceDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  Uri: ").Append(this.Uri).Append("\n");
            sb.Append("  SubmissionTime: ").Append(this.SubmissionTime).Append("\n");
            sb.Append("  Expiration: ").Append(this.Expiration).Append("\n");
            sb.Append("  PercentCompleted: ").Append(this.PercentCompleted).Append("\n");
            sb.Append("  Finished: ").Append(this.Finished).Append("\n");
            sb.Append("  Request: ").Append(this.Request).Append("\n");
            sb.Append("  Results: ").Append(this.Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProvenanceDTO);
        }

        /// <summary>
        /// Returns true if ProvenanceDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProvenanceDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvenanceDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.SubmissionTime == input.SubmissionTime ||
                    (this.SubmissionTime != null &&
                    this.SubmissionTime.Equals(input.SubmissionTime))
                ) && 
                (
                    this.Expiration == input.Expiration ||
                    (this.Expiration != null &&
                    this.Expiration.Equals(input.Expiration))
                ) && 
                (
                    this.PercentCompleted == input.PercentCompleted ||
                    (this.PercentCompleted != null &&
                    this.PercentCompleted.Equals(input.PercentCompleted))
                ) && 
                (
                    this.Finished == input.Finished ||
                    (this.Finished != null &&
                    this.Finished.Equals(input.Finished))
                ) && 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                ) && 
                (
                    this.Results == input.Results ||
                    (this.Results != null &&
                    this.Results.Equals(input.Results))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.SubmissionTime != null)
                    hashCode = hashCode * 59 + this.SubmissionTime.GetHashCode();
                if (this.Expiration != null)
                    hashCode = hashCode * 59 + this.Expiration.GetHashCode();
                if (this.PercentCompleted != null)
                    hashCode = hashCode * 59 + this.PercentCompleted.GetHashCode();
                if (this.Finished != null)
                    hashCode = hashCode * 59 + this.Finished.GetHashCode();
                if (this.Request != null)
                    hashCode = hashCode * 59 + this.Request.GetHashCode();
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
