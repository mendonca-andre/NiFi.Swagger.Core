/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// AffectedComponentDTO
    /// </summary>
    [DataContract]
    public partial class AffectedComponentDTO :  IEquatable<AffectedComponentDTO>, IValidatableObject
    {
        /// <summary>
        /// The type of this component
        /// </summary>
        /// <value>The type of this component</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReferenceTypeEnum
        {
            
            /// <summary>
            /// Enum PROCESSOR for value: PROCESSOR
            /// </summary>
            [EnumMember(Value = "PROCESSOR")]
            PROCESSOR = 1,
            
            /// <summary>
            /// Enum CONTROLLERSERVICE for value: CONTROLLER_SERVICE
            /// </summary>
            [EnumMember(Value = "CONTROLLER_SERVICE")]
            CONTROLLERSERVICE = 2,
            
            /// <summary>
            /// Enum INPUTPORT for value: INPUT_PORT
            /// </summary>
            [EnumMember(Value = "INPUT_PORT")]
            INPUTPORT = 3,
            
            /// <summary>
            /// Enum OUTPUTPORT for value: OUTPUT_PORT
            /// </summary>
            [EnumMember(Value = "OUTPUT_PORT")]
            OUTPUTPORT = 4,
            
            /// <summary>
            /// Enum REMOTEINPUTPORT for value: REMOTE_INPUT_PORT
            /// </summary>
            [EnumMember(Value = "REMOTE_INPUT_PORT")]
            REMOTEINPUTPORT = 5,
            
            /// <summary>
            /// Enum REMOTEOUTPUTPORT for value: REMOTE_OUTPUT_PORT
            /// </summary>
            [EnumMember(Value = "REMOTE_OUTPUT_PORT")]
            REMOTEOUTPUTPORT = 6
        }

        /// <summary>
        /// The type of this component
        /// </summary>
        /// <value>The type of this component</value>
        [DataMember(Name="referenceType", EmitDefaultValue=false)]
        public ReferenceTypeEnum? ReferenceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AffectedComponentDTO" /> class.
        /// </summary>
        /// <param name="processGroupId">The UUID of the Process Group that this component is in.</param>
        /// <param name="id">The UUID of this component.</param>
        /// <param name="referenceType">The type of this component.</param>
        /// <param name="name">The name of this component..</param>
        /// <param name="state">The scheduled state of a processor or reporting task referencing a controller service. If this component is another controller service, this field represents the controller service state..</param>
        /// <param name="activeThreadCount">The number of active threads for the referencing component..</param>
        /// <param name="validationErrors">The validation errors for the component..</param>
        public AffectedComponentDTO(string processGroupId = default(string), string id = default(string), ReferenceTypeEnum? referenceType = default(ReferenceTypeEnum?), string name = default(string), string state = default(string), int? activeThreadCount = default(int?), List<string> validationErrors = default(List<string>))
        {
            this.ProcessGroupId = processGroupId;
            this.Id = id;
            this.ReferenceType = referenceType;
            this.Name = name;
            this.State = state;
            this.ActiveThreadCount = activeThreadCount;
            this.ValidationErrors = validationErrors;
        }
        
        /// <summary>
        /// The UUID of the Process Group that this component is in
        /// </summary>
        /// <value>The UUID of the Process Group that this component is in</value>
        [DataMember(Name="processGroupId", EmitDefaultValue=false)]
        public string ProcessGroupId { get; set; }

        /// <summary>
        /// The UUID of this component
        /// </summary>
        /// <value>The UUID of this component</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// The name of this component.
        /// </summary>
        /// <value>The name of this component.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The scheduled state of a processor or reporting task referencing a controller service. If this component is another controller service, this field represents the controller service state.
        /// </summary>
        /// <value>The scheduled state of a processor or reporting task referencing a controller service. If this component is another controller service, this field represents the controller service state.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// The number of active threads for the referencing component.
        /// </summary>
        /// <value>The number of active threads for the referencing component.</value>
        [DataMember(Name="activeThreadCount", EmitDefaultValue=false)]
        public int? ActiveThreadCount { get; set; }

        /// <summary>
        /// The validation errors for the component.
        /// </summary>
        /// <value>The validation errors for the component.</value>
        [DataMember(Name="validationErrors", EmitDefaultValue=false)]
        public List<string> ValidationErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AffectedComponentDTO {\n");
            sb.Append("  ProcessGroupId: ").Append(this.ProcessGroupId).Append("\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  ReferenceType: ").Append(this.ReferenceType).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  State: ").Append(this.State).Append("\n");
            sb.Append("  ActiveThreadCount: ").Append(this.ActiveThreadCount).Append("\n");
            sb.Append("  ValidationErrors: ").Append(this.ValidationErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AffectedComponentDTO);
        }

        /// <summary>
        /// Returns true if AffectedComponentDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of AffectedComponentDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AffectedComponentDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProcessGroupId == input.ProcessGroupId ||
                    (this.ProcessGroupId != null &&
                    this.ProcessGroupId.Equals(input.ProcessGroupId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ReferenceType == input.ReferenceType ||
                    (this.ReferenceType != null &&
                    this.ReferenceType.Equals(input.ReferenceType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.ActiveThreadCount == input.ActiveThreadCount ||
                    (this.ActiveThreadCount != null &&
                    this.ActiveThreadCount.Equals(input.ActiveThreadCount))
                ) && 
                (
                    this.ValidationErrors == input.ValidationErrors ||
                    this.ValidationErrors != null &&
                    this.ValidationErrors.SequenceEqual(input.ValidationErrors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProcessGroupId != null)
                    hashCode = hashCode * 59 + this.ProcessGroupId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ReferenceType != null)
                    hashCode = hashCode * 59 + this.ReferenceType.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.ActiveThreadCount != null)
                    hashCode = hashCode * 59 + this.ActiveThreadCount.GetHashCode();
                if (this.ValidationErrors != null)
                    hashCode = hashCode * 59 + this.ValidationErrors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
