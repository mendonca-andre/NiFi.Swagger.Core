/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// SnippetDTO
    /// </summary>
    [DataContract]
    public partial class SnippetDTO :  IEquatable<SnippetDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SnippetDTO" /> class.
        /// </summary>
        /// <param name="id">The id of the snippet..</param>
        /// <param name="uri">The URI of the snippet..</param>
        /// <param name="parentGroupId">The group id for the components in the snippet..</param>
        /// <param name="processGroups">The ids of the process groups in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests)..</param>
        /// <param name="remoteProcessGroups">The ids of the remote process groups in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests)..</param>
        /// <param name="processors">The ids of the processors in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests)..</param>
        /// <param name="inputPorts">The ids of the input ports in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests)..</param>
        /// <param name="outputPorts">The ids of the output ports in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests)..</param>
        /// <param name="connections">The ids of the connections in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests)..</param>
        /// <param name="labels">The ids of the labels in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests)..</param>
        /// <param name="funnels">The ids of the funnels in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests)..</param>
        public SnippetDTO(string id = default(string), string uri = default(string), string parentGroupId = default(string), Dictionary<string, RevisionDTO> processGroups = default(Dictionary<string, RevisionDTO>), Dictionary<string, RevisionDTO> remoteProcessGroups = default(Dictionary<string, RevisionDTO>), Dictionary<string, RevisionDTO> processors = default(Dictionary<string, RevisionDTO>), Dictionary<string, RevisionDTO> inputPorts = default(Dictionary<string, RevisionDTO>), Dictionary<string, RevisionDTO> outputPorts = default(Dictionary<string, RevisionDTO>), Dictionary<string, RevisionDTO> connections = default(Dictionary<string, RevisionDTO>), Dictionary<string, RevisionDTO> labels = default(Dictionary<string, RevisionDTO>), Dictionary<string, RevisionDTO> funnels = default(Dictionary<string, RevisionDTO>))
        {
            this.Id = id;
            this.Uri = uri;
            this.ParentGroupId = parentGroupId;
            this.ProcessGroups = processGroups;
            this.RemoteProcessGroups = remoteProcessGroups;
            this.Processors = processors;
            this.InputPorts = inputPorts;
            this.OutputPorts = outputPorts;
            this.Connections = connections;
            this.Labels = labels;
            this.Funnels = funnels;
        }
        
        /// <summary>
        /// The id of the snippet.
        /// </summary>
        /// <value>The id of the snippet.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The URI of the snippet.
        /// </summary>
        /// <value>The URI of the snippet.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// The group id for the components in the snippet.
        /// </summary>
        /// <value>The group id for the components in the snippet.</value>
        [DataMember(Name="parentGroupId", EmitDefaultValue=false)]
        public string ParentGroupId { get; set; }

        /// <summary>
        /// The ids of the process groups in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
        /// </summary>
        /// <value>The ids of the process groups in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).</value>
        [DataMember(Name="processGroups", EmitDefaultValue=false)]
        public Dictionary<string, RevisionDTO> ProcessGroups { get; set; }

        /// <summary>
        /// The ids of the remote process groups in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
        /// </summary>
        /// <value>The ids of the remote process groups in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).</value>
        [DataMember(Name="remoteProcessGroups", EmitDefaultValue=false)]
        public Dictionary<string, RevisionDTO> RemoteProcessGroups { get; set; }

        /// <summary>
        /// The ids of the processors in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
        /// </summary>
        /// <value>The ids of the processors in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).</value>
        [DataMember(Name="processors", EmitDefaultValue=false)]
        public Dictionary<string, RevisionDTO> Processors { get; set; }

        /// <summary>
        /// The ids of the input ports in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
        /// </summary>
        /// <value>The ids of the input ports in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).</value>
        [DataMember(Name="inputPorts", EmitDefaultValue=false)]
        public Dictionary<string, RevisionDTO> InputPorts { get; set; }

        /// <summary>
        /// The ids of the output ports in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
        /// </summary>
        /// <value>The ids of the output ports in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).</value>
        [DataMember(Name="outputPorts", EmitDefaultValue=false)]
        public Dictionary<string, RevisionDTO> OutputPorts { get; set; }

        /// <summary>
        /// The ids of the connections in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
        /// </summary>
        /// <value>The ids of the connections in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).</value>
        [DataMember(Name="connections", EmitDefaultValue=false)]
        public Dictionary<string, RevisionDTO> Connections { get; set; }

        /// <summary>
        /// The ids of the labels in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
        /// </summary>
        /// <value>The ids of the labels in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).</value>
        [DataMember(Name="labels", EmitDefaultValue=false)]
        public Dictionary<string, RevisionDTO> Labels { get; set; }

        /// <summary>
        /// The ids of the funnels in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
        /// </summary>
        /// <value>The ids of the funnels in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).</value>
        [DataMember(Name="funnels", EmitDefaultValue=false)]
        public Dictionary<string, RevisionDTO> Funnels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SnippetDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  Uri: ").Append(this.Uri).Append("\n");
            sb.Append("  ParentGroupId: ").Append(this.ParentGroupId).Append("\n");
            sb.Append("  ProcessGroups: ").Append(this.ProcessGroups).Append("\n");
            sb.Append("  RemoteProcessGroups: ").Append(this.RemoteProcessGroups).Append("\n");
            sb.Append("  Processors: ").Append(this.Processors).Append("\n");
            sb.Append("  InputPorts: ").Append(this.InputPorts).Append("\n");
            sb.Append("  OutputPorts: ").Append(this.OutputPorts).Append("\n");
            sb.Append("  Connections: ").Append(this.Connections).Append("\n");
            sb.Append("  Labels: ").Append(this.Labels).Append("\n");
            sb.Append("  Funnels: ").Append(this.Funnels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SnippetDTO);
        }

        /// <summary>
        /// Returns true if SnippetDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SnippetDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SnippetDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.ParentGroupId == input.ParentGroupId ||
                    (this.ParentGroupId != null &&
                    this.ParentGroupId.Equals(input.ParentGroupId))
                ) && 
                (
                    this.ProcessGroups == input.ProcessGroups ||
                    this.ProcessGroups != null &&
                    this.ProcessGroups.SequenceEqual(input.ProcessGroups)
                ) && 
                (
                    this.RemoteProcessGroups == input.RemoteProcessGroups ||
                    this.RemoteProcessGroups != null &&
                    this.RemoteProcessGroups.SequenceEqual(input.RemoteProcessGroups)
                ) && 
                (
                    this.Processors == input.Processors ||
                    this.Processors != null &&
                    this.Processors.SequenceEqual(input.Processors)
                ) && 
                (
                    this.InputPorts == input.InputPorts ||
                    this.InputPorts != null &&
                    this.InputPorts.SequenceEqual(input.InputPorts)
                ) && 
                (
                    this.OutputPorts == input.OutputPorts ||
                    this.OutputPorts != null &&
                    this.OutputPorts.SequenceEqual(input.OutputPorts)
                ) && 
                (
                    this.Connections == input.Connections ||
                    this.Connections != null &&
                    this.Connections.SequenceEqual(input.Connections)
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    this.Funnels == input.Funnels ||
                    this.Funnels != null &&
                    this.Funnels.SequenceEqual(input.Funnels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.ParentGroupId != null)
                    hashCode = hashCode * 59 + this.ParentGroupId.GetHashCode();
                if (this.ProcessGroups != null)
                    hashCode = hashCode * 59 + this.ProcessGroups.GetHashCode();
                if (this.RemoteProcessGroups != null)
                    hashCode = hashCode * 59 + this.RemoteProcessGroups.GetHashCode();
                if (this.Processors != null)
                    hashCode = hashCode * 59 + this.Processors.GetHashCode();
                if (this.InputPorts != null)
                    hashCode = hashCode * 59 + this.InputPorts.GetHashCode();
                if (this.OutputPorts != null)
                    hashCode = hashCode * 59 + this.OutputPorts.GetHashCode();
                if (this.Connections != null)
                    hashCode = hashCode * 59 + this.Connections.GetHashCode();
                if (this.Labels != null)
                    hashCode = hashCode * 59 + this.Labels.GetHashCode();
                if (this.Funnels != null)
                    hashCode = hashCode * 59 + this.Funnels.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
