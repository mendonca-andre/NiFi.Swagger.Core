/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// NodeDTO
    /// </summary>
    [DataContract]
    public partial class NodeDTO :  IEquatable<NodeDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NodeDTO" /> class.
        /// </summary>
        /// <param name="status">The node&#39;s status..</param>
        public NodeDTO(string status = default(string))
        {
            this.Status = status;
        }
        
        /// <summary>
        /// The id of the node.
        /// </summary>
        /// <value>The id of the node.</value>
        [DataMember(Name="nodeId", EmitDefaultValue=false)]
        public string NodeId { get; private set; }

        /// <summary>
        /// The node&#39;s host/ip address.
        /// </summary>
        /// <value>The node&#39;s host/ip address.</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; private set; }

        /// <summary>
        /// The port the node is listening for API requests.
        /// </summary>
        /// <value>The port the node is listening for API requests.</value>
        [DataMember(Name="apiPort", EmitDefaultValue=false)]
        public int? ApiPort { get; private set; }

        /// <summary>
        /// The node&#39;s status.
        /// </summary>
        /// <value>The node&#39;s status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// the time of the nodes&#39;s last heartbeat.
        /// </summary>
        /// <value>the time of the nodes&#39;s last heartbeat.</value>
        [DataMember(Name="heartbeat", EmitDefaultValue=false)]
        public string Heartbeat { get; private set; }

        /// <summary>
        /// The time of the node&#39;s last connection request.
        /// </summary>
        /// <value>The time of the node&#39;s last connection request.</value>
        [DataMember(Name="connectionRequested", EmitDefaultValue=false)]
        public string ConnectionRequested { get; private set; }

        /// <summary>
        /// The roles of this node.
        /// </summary>
        /// <value>The roles of this node.</value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<string> Roles { get; private set; }

        /// <summary>
        /// The active threads for the NiFi on the node.
        /// </summary>
        /// <value>The active threads for the NiFi on the node.</value>
        [DataMember(Name="activeThreadCount", EmitDefaultValue=false)]
        public int? ActiveThreadCount { get; private set; }

        /// <summary>
        /// The queue the NiFi on the node.
        /// </summary>
        /// <value>The queue the NiFi on the node.</value>
        [DataMember(Name="queued", EmitDefaultValue=false)]
        public string Queued { get; private set; }

        /// <summary>
        /// The node&#39;s events.
        /// </summary>
        /// <value>The node&#39;s events.</value>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<NodeEventDTO> Events { get; private set; }

        /// <summary>
        /// The time at which this Node was last refreshed.
        /// </summary>
        /// <value>The time at which this Node was last refreshed.</value>
        [DataMember(Name="nodeStartTime", EmitDefaultValue=false)]
        public string NodeStartTime { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NodeDTO {\n");
            sb.Append("  NodeId: ").Append(this.NodeId).Append("\n");
            sb.Append("  Address: ").Append(this.Address).Append("\n");
            sb.Append("  ApiPort: ").Append(this.ApiPort).Append("\n");
            sb.Append("  Status: ").Append(this.Status).Append("\n");
            sb.Append("  Heartbeat: ").Append(this.Heartbeat).Append("\n");
            sb.Append("  ConnectionRequested: ").Append(this.ConnectionRequested).Append("\n");
            sb.Append("  Roles: ").Append(this.Roles).Append("\n");
            sb.Append("  ActiveThreadCount: ").Append(this.ActiveThreadCount).Append("\n");
            sb.Append("  Queued: ").Append(this.Queued).Append("\n");
            sb.Append("  Events: ").Append(this.Events).Append("\n");
            sb.Append("  NodeStartTime: ").Append(this.NodeStartTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NodeDTO);
        }

        /// <summary>
        /// Returns true if NodeDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of NodeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NodeDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NodeId == input.NodeId ||
                    (this.NodeId != null &&
                    this.NodeId.Equals(input.NodeId))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.ApiPort == input.ApiPort ||
                    (this.ApiPort != null &&
                    this.ApiPort.Equals(input.ApiPort))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Heartbeat == input.Heartbeat ||
                    (this.Heartbeat != null &&
                    this.Heartbeat.Equals(input.Heartbeat))
                ) && 
                (
                    this.ConnectionRequested == input.ConnectionRequested ||
                    (this.ConnectionRequested != null &&
                    this.ConnectionRequested.Equals(input.ConnectionRequested))
                ) && 
                (
                    this.Roles == input.Roles ||
                    this.Roles != null &&
                    this.Roles.SequenceEqual(input.Roles)
                ) && 
                (
                    this.ActiveThreadCount == input.ActiveThreadCount ||
                    (this.ActiveThreadCount != null &&
                    this.ActiveThreadCount.Equals(input.ActiveThreadCount))
                ) && 
                (
                    this.Queued == input.Queued ||
                    (this.Queued != null &&
                    this.Queued.Equals(input.Queued))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.NodeStartTime == input.NodeStartTime ||
                    (this.NodeStartTime != null &&
                    this.NodeStartTime.Equals(input.NodeStartTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NodeId != null)
                    hashCode = hashCode * 59 + this.NodeId.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.ApiPort != null)
                    hashCode = hashCode * 59 + this.ApiPort.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Heartbeat != null)
                    hashCode = hashCode * 59 + this.Heartbeat.GetHashCode();
                if (this.ConnectionRequested != null)
                    hashCode = hashCode * 59 + this.ConnectionRequested.GetHashCode();
                if (this.Roles != null)
                    hashCode = hashCode * 59 + this.Roles.GetHashCode();
                if (this.ActiveThreadCount != null)
                    hashCode = hashCode * 59 + this.ActiveThreadCount.GetHashCode();
                if (this.Queued != null)
                    hashCode = hashCode * 59 + this.Queued.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                if (this.NodeStartTime != null)
                    hashCode = hashCode * 59 + this.NodeStartTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
