/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// DifferenceDTO
    /// </summary>
    [DataContract]
    public partial class DifferenceDTO :  IEquatable<DifferenceDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DifferenceDTO" /> class.
        /// </summary>
        /// <param name="differenceType">The type of difference.</param>
        /// <param name="difference">Description of the difference.</param>
        public DifferenceDTO(string differenceType = default(string), string difference = default(string))
        {
            this.DifferenceType = differenceType;
            this.Difference = difference;
        }
        
        /// <summary>
        /// The type of difference
        /// </summary>
        /// <value>The type of difference</value>
        [DataMember(Name="differenceType", EmitDefaultValue=false)]
        public string DifferenceType { get; set; }

        /// <summary>
        /// Description of the difference
        /// </summary>
        /// <value>Description of the difference</value>
        [DataMember(Name="difference", EmitDefaultValue=false)]
        public string Difference { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DifferenceDTO {\n");
            sb.Append("  DifferenceType: ").Append(this.DifferenceType).Append("\n");
            sb.Append("  Difference: ").Append(this.Difference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DifferenceDTO);
        }

        /// <summary>
        /// Returns true if DifferenceDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DifferenceDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DifferenceDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DifferenceType == input.DifferenceType ||
                    (this.DifferenceType != null &&
                    this.DifferenceType.Equals(input.DifferenceType))
                ) && 
                (
                    this.Difference == input.Difference ||
                    (this.Difference != null &&
                    this.Difference.Equals(input.Difference))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DifferenceType != null)
                    hashCode = hashCode * 59 + this.DifferenceType.GetHashCode();
                if (this.Difference != null)
                    hashCode = hashCode * 59 + this.Difference.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
