/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// ControllerStatusDTO
    /// </summary>
    [DataContract]
    public partial class ControllerStatusDTO :  IEquatable<ControllerStatusDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ControllerStatusDTO" /> class.
        /// </summary>
        /// <param name="activeThreadCount">The number of active threads in the NiFi..</param>
        /// <param name="terminatedThreadCount">The number of terminated threads in the NiFi..</param>
        /// <param name="queued">The number of flowfiles queued in the NiFi..</param>
        /// <param name="flowFilesQueued">The number of FlowFiles queued across the entire flow.</param>
        /// <param name="bytesQueued">The size of the FlowFiles queued across the entire flow.</param>
        /// <param name="runningCount">The number of running components in the NiFi..</param>
        /// <param name="stoppedCount">The number of stopped components in the NiFi..</param>
        /// <param name="invalidCount">The number of invalid components in the NiFi..</param>
        /// <param name="disabledCount">The number of disabled components in the NiFi..</param>
        /// <param name="activeRemotePortCount">The number of active remote ports in the NiFi..</param>
        /// <param name="inactiveRemotePortCount">The number of inactive remote ports in the NiFi..</param>
        /// <param name="upToDateCount">The number of up to date versioned process groups in the NiFi..</param>
        /// <param name="locallyModifiedCount">The number of locally modified versioned process groups in the NiFi..</param>
        /// <param name="staleCount">The number of stale versioned process groups in the NiFi..</param>
        /// <param name="locallyModifiedAndStaleCount">The number of locally modified and stale versioned process groups in the NiFi..</param>
        /// <param name="syncFailureCount">The number of versioned process groups in the NiFi that are unable to sync to a registry..</param>
        public ControllerStatusDTO(int? activeThreadCount = default(int?), int? terminatedThreadCount = default(int?), string queued = default(string), int? flowFilesQueued = default(int?), long? bytesQueued = default(long?), int? runningCount = default(int?), int? stoppedCount = default(int?), int? invalidCount = default(int?), int? disabledCount = default(int?), int? activeRemotePortCount = default(int?), int? inactiveRemotePortCount = default(int?), int? upToDateCount = default(int?), int? locallyModifiedCount = default(int?), int? staleCount = default(int?), int? locallyModifiedAndStaleCount = default(int?), int? syncFailureCount = default(int?))
        {
            this.ActiveThreadCount = activeThreadCount;
            this.TerminatedThreadCount = terminatedThreadCount;
            this.Queued = queued;
            this.FlowFilesQueued = flowFilesQueued;
            this.BytesQueued = bytesQueued;
            this.RunningCount = runningCount;
            this.StoppedCount = stoppedCount;
            this.InvalidCount = invalidCount;
            this.DisabledCount = disabledCount;
            this.ActiveRemotePortCount = activeRemotePortCount;
            this.InactiveRemotePortCount = inactiveRemotePortCount;
            this.UpToDateCount = upToDateCount;
            this.LocallyModifiedCount = locallyModifiedCount;
            this.StaleCount = staleCount;
            this.LocallyModifiedAndStaleCount = locallyModifiedAndStaleCount;
            this.SyncFailureCount = syncFailureCount;
        }
        
        /// <summary>
        /// The number of active threads in the NiFi.
        /// </summary>
        /// <value>The number of active threads in the NiFi.</value>
        [DataMember(Name="activeThreadCount", EmitDefaultValue=false)]
        public int? ActiveThreadCount { get; set; }

        /// <summary>
        /// The number of terminated threads in the NiFi.
        /// </summary>
        /// <value>The number of terminated threads in the NiFi.</value>
        [DataMember(Name="terminatedThreadCount", EmitDefaultValue=false)]
        public int? TerminatedThreadCount { get; set; }

        /// <summary>
        /// The number of flowfiles queued in the NiFi.
        /// </summary>
        /// <value>The number of flowfiles queued in the NiFi.</value>
        [DataMember(Name="queued", EmitDefaultValue=false)]
        public string Queued { get; set; }

        /// <summary>
        /// The number of FlowFiles queued across the entire flow
        /// </summary>
        /// <value>The number of FlowFiles queued across the entire flow</value>
        [DataMember(Name="flowFilesQueued", EmitDefaultValue=false)]
        public int? FlowFilesQueued { get; set; }

        /// <summary>
        /// The size of the FlowFiles queued across the entire flow
        /// </summary>
        /// <value>The size of the FlowFiles queued across the entire flow</value>
        [DataMember(Name="bytesQueued", EmitDefaultValue=false)]
        public long? BytesQueued { get; set; }

        /// <summary>
        /// The number of running components in the NiFi.
        /// </summary>
        /// <value>The number of running components in the NiFi.</value>
        [DataMember(Name="runningCount", EmitDefaultValue=false)]
        public int? RunningCount { get; set; }

        /// <summary>
        /// The number of stopped components in the NiFi.
        /// </summary>
        /// <value>The number of stopped components in the NiFi.</value>
        [DataMember(Name="stoppedCount", EmitDefaultValue=false)]
        public int? StoppedCount { get; set; }

        /// <summary>
        /// The number of invalid components in the NiFi.
        /// </summary>
        /// <value>The number of invalid components in the NiFi.</value>
        [DataMember(Name="invalidCount", EmitDefaultValue=false)]
        public int? InvalidCount { get; set; }

        /// <summary>
        /// The number of disabled components in the NiFi.
        /// </summary>
        /// <value>The number of disabled components in the NiFi.</value>
        [DataMember(Name="disabledCount", EmitDefaultValue=false)]
        public int? DisabledCount { get; set; }

        /// <summary>
        /// The number of active remote ports in the NiFi.
        /// </summary>
        /// <value>The number of active remote ports in the NiFi.</value>
        [DataMember(Name="activeRemotePortCount", EmitDefaultValue=false)]
        public int? ActiveRemotePortCount { get; set; }

        /// <summary>
        /// The number of inactive remote ports in the NiFi.
        /// </summary>
        /// <value>The number of inactive remote ports in the NiFi.</value>
        [DataMember(Name="inactiveRemotePortCount", EmitDefaultValue=false)]
        public int? InactiveRemotePortCount { get; set; }

        /// <summary>
        /// The number of up to date versioned process groups in the NiFi.
        /// </summary>
        /// <value>The number of up to date versioned process groups in the NiFi.</value>
        [DataMember(Name="upToDateCount", EmitDefaultValue=false)]
        public int? UpToDateCount { get; set; }

        /// <summary>
        /// The number of locally modified versioned process groups in the NiFi.
        /// </summary>
        /// <value>The number of locally modified versioned process groups in the NiFi.</value>
        [DataMember(Name="locallyModifiedCount", EmitDefaultValue=false)]
        public int? LocallyModifiedCount { get; set; }

        /// <summary>
        /// The number of stale versioned process groups in the NiFi.
        /// </summary>
        /// <value>The number of stale versioned process groups in the NiFi.</value>
        [DataMember(Name="staleCount", EmitDefaultValue=false)]
        public int? StaleCount { get; set; }

        /// <summary>
        /// The number of locally modified and stale versioned process groups in the NiFi.
        /// </summary>
        /// <value>The number of locally modified and stale versioned process groups in the NiFi.</value>
        [DataMember(Name="locallyModifiedAndStaleCount", EmitDefaultValue=false)]
        public int? LocallyModifiedAndStaleCount { get; set; }

        /// <summary>
        /// The number of versioned process groups in the NiFi that are unable to sync to a registry.
        /// </summary>
        /// <value>The number of versioned process groups in the NiFi that are unable to sync to a registry.</value>
        [DataMember(Name="syncFailureCount", EmitDefaultValue=false)]
        public int? SyncFailureCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ControllerStatusDTO {\n");
            sb.Append("  ActiveThreadCount: ").Append(this.ActiveThreadCount).Append("\n");
            sb.Append("  TerminatedThreadCount: ").Append(this.TerminatedThreadCount).Append("\n");
            sb.Append("  Queued: ").Append(this.Queued).Append("\n");
            sb.Append("  FlowFilesQueued: ").Append(this.FlowFilesQueued).Append("\n");
            sb.Append("  BytesQueued: ").Append(this.BytesQueued).Append("\n");
            sb.Append("  RunningCount: ").Append(this.RunningCount).Append("\n");
            sb.Append("  StoppedCount: ").Append(this.StoppedCount).Append("\n");
            sb.Append("  InvalidCount: ").Append(this.InvalidCount).Append("\n");
            sb.Append("  DisabledCount: ").Append(this.DisabledCount).Append("\n");
            sb.Append("  ActiveRemotePortCount: ").Append(this.ActiveRemotePortCount).Append("\n");
            sb.Append("  InactiveRemotePortCount: ").Append(this.InactiveRemotePortCount).Append("\n");
            sb.Append("  UpToDateCount: ").Append(this.UpToDateCount).Append("\n");
            sb.Append("  LocallyModifiedCount: ").Append(this.LocallyModifiedCount).Append("\n");
            sb.Append("  StaleCount: ").Append(this.StaleCount).Append("\n");
            sb.Append("  LocallyModifiedAndStaleCount: ").Append(this.LocallyModifiedAndStaleCount).Append("\n");
            sb.Append("  SyncFailureCount: ").Append(this.SyncFailureCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ControllerStatusDTO);
        }

        /// <summary>
        /// Returns true if ControllerStatusDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ControllerStatusDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ControllerStatusDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActiveThreadCount == input.ActiveThreadCount ||
                    (this.ActiveThreadCount != null &&
                    this.ActiveThreadCount.Equals(input.ActiveThreadCount))
                ) && 
                (
                    this.TerminatedThreadCount == input.TerminatedThreadCount ||
                    (this.TerminatedThreadCount != null &&
                    this.TerminatedThreadCount.Equals(input.TerminatedThreadCount))
                ) && 
                (
                    this.Queued == input.Queued ||
                    (this.Queued != null &&
                    this.Queued.Equals(input.Queued))
                ) && 
                (
                    this.FlowFilesQueued == input.FlowFilesQueued ||
                    (this.FlowFilesQueued != null &&
                    this.FlowFilesQueued.Equals(input.FlowFilesQueued))
                ) && 
                (
                    this.BytesQueued == input.BytesQueued ||
                    (this.BytesQueued != null &&
                    this.BytesQueued.Equals(input.BytesQueued))
                ) && 
                (
                    this.RunningCount == input.RunningCount ||
                    (this.RunningCount != null &&
                    this.RunningCount.Equals(input.RunningCount))
                ) && 
                (
                    this.StoppedCount == input.StoppedCount ||
                    (this.StoppedCount != null &&
                    this.StoppedCount.Equals(input.StoppedCount))
                ) && 
                (
                    this.InvalidCount == input.InvalidCount ||
                    (this.InvalidCount != null &&
                    this.InvalidCount.Equals(input.InvalidCount))
                ) && 
                (
                    this.DisabledCount == input.DisabledCount ||
                    (this.DisabledCount != null &&
                    this.DisabledCount.Equals(input.DisabledCount))
                ) && 
                (
                    this.ActiveRemotePortCount == input.ActiveRemotePortCount ||
                    (this.ActiveRemotePortCount != null &&
                    this.ActiveRemotePortCount.Equals(input.ActiveRemotePortCount))
                ) && 
                (
                    this.InactiveRemotePortCount == input.InactiveRemotePortCount ||
                    (this.InactiveRemotePortCount != null &&
                    this.InactiveRemotePortCount.Equals(input.InactiveRemotePortCount))
                ) && 
                (
                    this.UpToDateCount == input.UpToDateCount ||
                    (this.UpToDateCount != null &&
                    this.UpToDateCount.Equals(input.UpToDateCount))
                ) && 
                (
                    this.LocallyModifiedCount == input.LocallyModifiedCount ||
                    (this.LocallyModifiedCount != null &&
                    this.LocallyModifiedCount.Equals(input.LocallyModifiedCount))
                ) && 
                (
                    this.StaleCount == input.StaleCount ||
                    (this.StaleCount != null &&
                    this.StaleCount.Equals(input.StaleCount))
                ) && 
                (
                    this.LocallyModifiedAndStaleCount == input.LocallyModifiedAndStaleCount ||
                    (this.LocallyModifiedAndStaleCount != null &&
                    this.LocallyModifiedAndStaleCount.Equals(input.LocallyModifiedAndStaleCount))
                ) && 
                (
                    this.SyncFailureCount == input.SyncFailureCount ||
                    (this.SyncFailureCount != null &&
                    this.SyncFailureCount.Equals(input.SyncFailureCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActiveThreadCount != null)
                    hashCode = hashCode * 59 + this.ActiveThreadCount.GetHashCode();
                if (this.TerminatedThreadCount != null)
                    hashCode = hashCode * 59 + this.TerminatedThreadCount.GetHashCode();
                if (this.Queued != null)
                    hashCode = hashCode * 59 + this.Queued.GetHashCode();
                if (this.FlowFilesQueued != null)
                    hashCode = hashCode * 59 + this.FlowFilesQueued.GetHashCode();
                if (this.BytesQueued != null)
                    hashCode = hashCode * 59 + this.BytesQueued.GetHashCode();
                if (this.RunningCount != null)
                    hashCode = hashCode * 59 + this.RunningCount.GetHashCode();
                if (this.StoppedCount != null)
                    hashCode = hashCode * 59 + this.StoppedCount.GetHashCode();
                if (this.InvalidCount != null)
                    hashCode = hashCode * 59 + this.InvalidCount.GetHashCode();
                if (this.DisabledCount != null)
                    hashCode = hashCode * 59 + this.DisabledCount.GetHashCode();
                if (this.ActiveRemotePortCount != null)
                    hashCode = hashCode * 59 + this.ActiveRemotePortCount.GetHashCode();
                if (this.InactiveRemotePortCount != null)
                    hashCode = hashCode * 59 + this.InactiveRemotePortCount.GetHashCode();
                if (this.UpToDateCount != null)
                    hashCode = hashCode * 59 + this.UpToDateCount.GetHashCode();
                if (this.LocallyModifiedCount != null)
                    hashCode = hashCode * 59 + this.LocallyModifiedCount.GetHashCode();
                if (this.StaleCount != null)
                    hashCode = hashCode * 59 + this.StaleCount.GetHashCode();
                if (this.LocallyModifiedAndStaleCount != null)
                    hashCode = hashCode * 59 + this.LocallyModifiedAndStaleCount.GetHashCode();
                if (this.SyncFailureCount != null)
                    hashCode = hashCode * 59 + this.SyncFailureCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
