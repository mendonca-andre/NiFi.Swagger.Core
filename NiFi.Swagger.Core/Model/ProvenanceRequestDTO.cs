/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// ProvenanceRequestDTO
    /// </summary>
    [DataContract]
    public partial class ProvenanceRequestDTO :  IEquatable<ProvenanceRequestDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvenanceRequestDTO" /> class.
        /// </summary>
        /// <param name="searchTerms">The search terms used to perform the search..</param>
        /// <param name="clusterNodeId">The id of the node in the cluster where this provenance originated..</param>
        /// <param name="startDate">The earliest event time to include in the query..</param>
        /// <param name="endDate">The latest event time to include in the query..</param>
        /// <param name="minimumFileSize">The minimum file size to include in the query..</param>
        /// <param name="maximumFileSize">The maximum file size to include in the query..</param>
        /// <param name="maxResults">The maximum number of results to include..</param>
        /// <param name="summarize">Whether or not to summarize provenance events returned. This property is false by default..</param>
        /// <param name="incrementalResults">Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default..</param>
        public ProvenanceRequestDTO(Dictionary<string, string> searchTerms = default(Dictionary<string, string>), string clusterNodeId = default(string), string startDate = default(string), string endDate = default(string), string minimumFileSize = default(string), string maximumFileSize = default(string), int? maxResults = default(int?), bool? summarize = default(bool?), bool? incrementalResults = default(bool?))
        {
            this.SearchTerms = searchTerms;
            this.ClusterNodeId = clusterNodeId;
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.MinimumFileSize = minimumFileSize;
            this.MaximumFileSize = maximumFileSize;
            this.MaxResults = maxResults;
            this.Summarize = summarize;
            this.IncrementalResults = incrementalResults;
        }
        
        /// <summary>
        /// The search terms used to perform the search.
        /// </summary>
        /// <value>The search terms used to perform the search.</value>
        [DataMember(Name="searchTerms", EmitDefaultValue=false)]
        public Dictionary<string, string> SearchTerms { get; set; }

        /// <summary>
        /// The id of the node in the cluster where this provenance originated.
        /// </summary>
        /// <value>The id of the node in the cluster where this provenance originated.</value>
        [DataMember(Name="clusterNodeId", EmitDefaultValue=false)]
        public string ClusterNodeId { get; set; }

        /// <summary>
        /// The earliest event time to include in the query.
        /// </summary>
        /// <value>The earliest event time to include in the query.</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public string StartDate { get; set; }

        /// <summary>
        /// The latest event time to include in the query.
        /// </summary>
        /// <value>The latest event time to include in the query.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public string EndDate { get; set; }

        /// <summary>
        /// The minimum file size to include in the query.
        /// </summary>
        /// <value>The minimum file size to include in the query.</value>
        [DataMember(Name="minimumFileSize", EmitDefaultValue=false)]
        public string MinimumFileSize { get; set; }

        /// <summary>
        /// The maximum file size to include in the query.
        /// </summary>
        /// <value>The maximum file size to include in the query.</value>
        [DataMember(Name="maximumFileSize", EmitDefaultValue=false)]
        public string MaximumFileSize { get; set; }

        /// <summary>
        /// The maximum number of results to include.
        /// </summary>
        /// <value>The maximum number of results to include.</value>
        [DataMember(Name="maxResults", EmitDefaultValue=false)]
        public int? MaxResults { get; set; }

        /// <summary>
        /// Whether or not to summarize provenance events returned. This property is false by default.
        /// </summary>
        /// <value>Whether or not to summarize provenance events returned. This property is false by default.</value>
        [DataMember(Name="summarize", EmitDefaultValue=false)]
        public bool? Summarize { get; set; }

        /// <summary>
        /// Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default.
        /// </summary>
        /// <value>Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default.</value>
        [DataMember(Name="incrementalResults", EmitDefaultValue=false)]
        public bool? IncrementalResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvenanceRequestDTO {\n");
            sb.Append("  SearchTerms: ").Append(this.SearchTerms).Append("\n");
            sb.Append("  ClusterNodeId: ").Append(this.ClusterNodeId).Append("\n");
            sb.Append("  StartDate: ").Append(this.StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(this.EndDate).Append("\n");
            sb.Append("  MinimumFileSize: ").Append(this.MinimumFileSize).Append("\n");
            sb.Append("  MaximumFileSize: ").Append(this.MaximumFileSize).Append("\n");
            sb.Append("  MaxResults: ").Append(this.MaxResults).Append("\n");
            sb.Append("  Summarize: ").Append(this.Summarize).Append("\n");
            sb.Append("  IncrementalResults: ").Append(this.IncrementalResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProvenanceRequestDTO);
        }

        /// <summary>
        /// Returns true if ProvenanceRequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProvenanceRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvenanceRequestDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SearchTerms == input.SearchTerms ||
                    this.SearchTerms != null &&
                    this.SearchTerms.SequenceEqual(input.SearchTerms)
                ) && 
                (
                    this.ClusterNodeId == input.ClusterNodeId ||
                    (this.ClusterNodeId != null &&
                    this.ClusterNodeId.Equals(input.ClusterNodeId))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.MinimumFileSize == input.MinimumFileSize ||
                    (this.MinimumFileSize != null &&
                    this.MinimumFileSize.Equals(input.MinimumFileSize))
                ) && 
                (
                    this.MaximumFileSize == input.MaximumFileSize ||
                    (this.MaximumFileSize != null &&
                    this.MaximumFileSize.Equals(input.MaximumFileSize))
                ) && 
                (
                    this.MaxResults == input.MaxResults ||
                    (this.MaxResults != null &&
                    this.MaxResults.Equals(input.MaxResults))
                ) && 
                (
                    this.Summarize == input.Summarize ||
                    (this.Summarize != null &&
                    this.Summarize.Equals(input.Summarize))
                ) && 
                (
                    this.IncrementalResults == input.IncrementalResults ||
                    (this.IncrementalResults != null &&
                    this.IncrementalResults.Equals(input.IncrementalResults))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SearchTerms != null)
                    hashCode = hashCode * 59 + this.SearchTerms.GetHashCode();
                if (this.ClusterNodeId != null)
                    hashCode = hashCode * 59 + this.ClusterNodeId.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.MinimumFileSize != null)
                    hashCode = hashCode * 59 + this.MinimumFileSize.GetHashCode();
                if (this.MaximumFileSize != null)
                    hashCode = hashCode * 59 + this.MaximumFileSize.GetHashCode();
                if (this.MaxResults != null)
                    hashCode = hashCode * 59 + this.MaxResults.GetHashCode();
                if (this.Summarize != null)
                    hashCode = hashCode * 59 + this.Summarize.GetHashCode();
                if (this.IncrementalResults != null)
                    hashCode = hashCode * 59 + this.IncrementalResults.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
