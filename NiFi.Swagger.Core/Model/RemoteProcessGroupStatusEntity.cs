/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// RemoteProcessGroupStatusEntity
    /// </summary>
    [DataContract]
    public partial class RemoteProcessGroupStatusEntity :  IEquatable<RemoteProcessGroupStatusEntity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteProcessGroupStatusEntity" /> class.
        /// </summary>
        /// <param name="remoteProcessGroupStatus">remoteProcessGroupStatus.</param>
        public RemoteProcessGroupStatusEntity(RemoteProcessGroupStatusDTO remoteProcessGroupStatus = default(RemoteProcessGroupStatusDTO))
        {
            this.RemoteProcessGroupStatus = remoteProcessGroupStatus;
        }
        
        /// <summary>
        /// Gets or Sets RemoteProcessGroupStatus
        /// </summary>
        [DataMember(Name="remoteProcessGroupStatus", EmitDefaultValue=false)]
        public RemoteProcessGroupStatusDTO RemoteProcessGroupStatus { get; set; }

        /// <summary>
        /// Indicates whether the user can read a given resource.
        /// </summary>
        /// <value>Indicates whether the user can read a given resource.</value>
        [DataMember(Name="canRead", EmitDefaultValue=false)]
        public bool? CanRead { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteProcessGroupStatusEntity {\n");
            sb.Append("  RemoteProcessGroupStatus: ").Append(this.RemoteProcessGroupStatus).Append("\n");
            sb.Append("  CanRead: ").Append(this.CanRead).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemoteProcessGroupStatusEntity);
        }

        /// <summary>
        /// Returns true if RemoteProcessGroupStatusEntity instances are equal
        /// </summary>
        /// <param name="input">Instance of RemoteProcessGroupStatusEntity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteProcessGroupStatusEntity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RemoteProcessGroupStatus == input.RemoteProcessGroupStatus ||
                    (this.RemoteProcessGroupStatus != null &&
                    this.RemoteProcessGroupStatus.Equals(input.RemoteProcessGroupStatus))
                ) && 
                (
                    this.CanRead == input.CanRead ||
                    (this.CanRead != null &&
                    this.CanRead.Equals(input.CanRead))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RemoteProcessGroupStatus != null)
                    hashCode = hashCode * 59 + this.RemoteProcessGroupStatus.GetHashCode();
                if (this.CanRead != null)
                    hashCode = hashCode * 59 + this.CanRead.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
