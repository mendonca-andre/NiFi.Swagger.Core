/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// RemoteProcessGroupStatusDTO
    /// </summary>
    [DataContract]
    public partial class RemoteProcessGroupStatusDTO :  IEquatable<RemoteProcessGroupStatusDTO>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether the component is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the component is valid)
        /// </summary>
        /// <value>Indicates whether the component is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the component is valid)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValidationStatusEnum
        {
            
            /// <summary>
            /// Enum VALID for value: VALID
            /// </summary>
            [EnumMember(Value = "VALID")]
            VALID = 1,
            
            /// <summary>
            /// Enum INVALID for value: INVALID
            /// </summary>
            [EnumMember(Value = "INVALID")]
            INVALID = 2,
            
            /// <summary>
            /// Enum VALIDATING for value: VALIDATING
            /// </summary>
            [EnumMember(Value = "VALIDATING")]
            VALIDATING = 3
        }

        /// <summary>
        /// Indicates whether the component is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the component is valid)
        /// </summary>
        /// <value>Indicates whether the component is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the component is valid)</value>
        [DataMember(Name="validationStatus", EmitDefaultValue=false)]
        public ValidationStatusEnum? ValidationStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteProcessGroupStatusDTO" /> class.
        /// </summary>
        /// <param name="groupId">The unique ID of the process group that the Processor belongs to.</param>
        /// <param name="id">The unique ID of the Processor.</param>
        /// <param name="name">The name of the remote process group..</param>
        /// <param name="targetUri">The URI of the target system..</param>
        /// <param name="transmissionStatus">The transmission status of the remote process group..</param>
        /// <param name="statsLastRefreshed">The time the status for the process group was last refreshed..</param>
        /// <param name="aggregateSnapshot">A status snapshot that represents the aggregate stats of all nodes in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this represents the stats of the single instance..</param>
        /// <param name="nodeSnapshots">A status snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null..</param>
        public RemoteProcessGroupStatusDTO(string groupId = default(string), string id = default(string), string name = default(string), string targetUri = default(string), string transmissionStatus = default(string), string statsLastRefreshed = default(string), RemoteProcessGroupStatusSnapshotDTO aggregateSnapshot = default(RemoteProcessGroupStatusSnapshotDTO), List<NodeRemoteProcessGroupStatusSnapshotDTO> nodeSnapshots = default(List<NodeRemoteProcessGroupStatusSnapshotDTO>))
        {
            this.GroupId = groupId;
            this.Id = id;
            this.Name = name;
            this.TargetUri = targetUri;
            this.TransmissionStatus = transmissionStatus;
            this.StatsLastRefreshed = statsLastRefreshed;
            this.AggregateSnapshot = aggregateSnapshot;
            this.NodeSnapshots = nodeSnapshots;
        }
        
        /// <summary>
        /// The unique ID of the process group that the Processor belongs to
        /// </summary>
        /// <value>The unique ID of the process group that the Processor belongs to</value>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public string GroupId { get; set; }

        /// <summary>
        /// The unique ID of the Processor
        /// </summary>
        /// <value>The unique ID of the Processor</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the remote process group.
        /// </summary>
        /// <value>The name of the remote process group.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The URI of the target system.
        /// </summary>
        /// <value>The URI of the target system.</value>
        [DataMember(Name="targetUri", EmitDefaultValue=false)]
        public string TargetUri { get; set; }

        /// <summary>
        /// The transmission status of the remote process group.
        /// </summary>
        /// <value>The transmission status of the remote process group.</value>
        [DataMember(Name="transmissionStatus", EmitDefaultValue=false)]
        public string TransmissionStatus { get; set; }

        /// <summary>
        /// The time the status for the process group was last refreshed.
        /// </summary>
        /// <value>The time the status for the process group was last refreshed.</value>
        [DataMember(Name="statsLastRefreshed", EmitDefaultValue=false)]
        public string StatsLastRefreshed { get; set; }


        /// <summary>
        /// A status snapshot that represents the aggregate stats of all nodes in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this represents the stats of the single instance.
        /// </summary>
        /// <value>A status snapshot that represents the aggregate stats of all nodes in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this represents the stats of the single instance.</value>
        [DataMember(Name="aggregateSnapshot", EmitDefaultValue=false)]
        public RemoteProcessGroupStatusSnapshotDTO AggregateSnapshot { get; set; }

        /// <summary>
        /// A status snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.
        /// </summary>
        /// <value>A status snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.</value>
        [DataMember(Name="nodeSnapshots", EmitDefaultValue=false)]
        public List<NodeRemoteProcessGroupStatusSnapshotDTO> NodeSnapshots { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteProcessGroupStatusDTO {\n");
            sb.Append("  GroupId: ").Append(this.GroupId).Append("\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  TargetUri: ").Append(this.TargetUri).Append("\n");
            sb.Append("  TransmissionStatus: ").Append(this.TransmissionStatus).Append("\n");
            sb.Append("  StatsLastRefreshed: ").Append(this.StatsLastRefreshed).Append("\n");
            sb.Append("  ValidationStatus: ").Append(this.ValidationStatus).Append("\n");
            sb.Append("  AggregateSnapshot: ").Append(this.AggregateSnapshot).Append("\n");
            sb.Append("  NodeSnapshots: ").Append(this.NodeSnapshots).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemoteProcessGroupStatusDTO);
        }

        /// <summary>
        /// Returns true if RemoteProcessGroupStatusDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of RemoteProcessGroupStatusDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteProcessGroupStatusDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TargetUri == input.TargetUri ||
                    (this.TargetUri != null &&
                    this.TargetUri.Equals(input.TargetUri))
                ) && 
                (
                    this.TransmissionStatus == input.TransmissionStatus ||
                    (this.TransmissionStatus != null &&
                    this.TransmissionStatus.Equals(input.TransmissionStatus))
                ) && 
                (
                    this.StatsLastRefreshed == input.StatsLastRefreshed ||
                    (this.StatsLastRefreshed != null &&
                    this.StatsLastRefreshed.Equals(input.StatsLastRefreshed))
                ) && 
                (
                    this.ValidationStatus == input.ValidationStatus ||
                    (this.ValidationStatus != null &&
                    this.ValidationStatus.Equals(input.ValidationStatus))
                ) && 
                (
                    this.AggregateSnapshot == input.AggregateSnapshot ||
                    (this.AggregateSnapshot != null &&
                    this.AggregateSnapshot.Equals(input.AggregateSnapshot))
                ) && 
                (
                    this.NodeSnapshots == input.NodeSnapshots ||
                    this.NodeSnapshots != null &&
                    this.NodeSnapshots.SequenceEqual(input.NodeSnapshots)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TargetUri != null)
                    hashCode = hashCode * 59 + this.TargetUri.GetHashCode();
                if (this.TransmissionStatus != null)
                    hashCode = hashCode * 59 + this.TransmissionStatus.GetHashCode();
                if (this.StatsLastRefreshed != null)
                    hashCode = hashCode * 59 + this.StatsLastRefreshed.GetHashCode();
                if (this.ValidationStatus != null)
                    hashCode = hashCode * 59 + this.ValidationStatus.GetHashCode();
                if (this.AggregateSnapshot != null)
                    hashCode = hashCode * 59 + this.AggregateSnapshot.GetHashCode();
                if (this.NodeSnapshots != null)
                    hashCode = hashCode * 59 + this.NodeSnapshots.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
