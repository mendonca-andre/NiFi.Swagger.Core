/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// ProcessorDTO
    /// </summary>
    [DataContract]
    public partial class ProcessorDTO :  IEquatable<ProcessorDTO>, IValidatableObject
    {
        /// <summary>
        /// The state of the processor
        /// </summary>
        /// <value>The state of the processor</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum RUNNING for value: RUNNING
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNING = 1,
            
            /// <summary>
            /// Enum STOPPED for value: STOPPED
            /// </summary>
            [EnumMember(Value = "STOPPED")]
            STOPPED = 2,
            
            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 3
        }

        /// <summary>
        /// The state of the processor
        /// </summary>
        /// <value>The state of the processor</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)
        /// </summary>
        /// <value>Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValidationStatusEnum
        {
            
            /// <summary>
            /// Enum VALID for value: VALID
            /// </summary>
            [EnumMember(Value = "VALID")]
            VALID = 1,
            
            /// <summary>
            /// Enum INVALID for value: INVALID
            /// </summary>
            [EnumMember(Value = "INVALID")]
            INVALID = 2,
            
            /// <summary>
            /// Enum VALIDATING for value: VALIDATING
            /// </summary>
            [EnumMember(Value = "VALIDATING")]
            VALIDATING = 3
        }

        /// <summary>
        /// Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)
        /// </summary>
        /// <value>Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)</value>
        [DataMember(Name="validationStatus", EmitDefaultValue=false)]
        public ValidationStatusEnum? ValidationStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessorDTO" /> class.
        /// </summary>
        /// <param name="id">The id of the component..</param>
        /// <param name="versionedComponentId">The ID of the corresponding component that is under version control.</param>
        /// <param name="parentGroupId">The id of parent process group of this component if applicable..</param>
        /// <param name="position">The position of this component in the UI if applicable..</param>
        /// <param name="name">The name of the processor..</param>
        /// <param name="type">The type of the processor..</param>
        /// <param name="bundle">The details of the artifact that bundled this processor type..</param>
        /// <param name="state">The state of the processor.</param>
        /// <param name="style">Styles for the processor (background-color : #eee)..</param>
        /// <param name="description">The description of the processor..</param>
        /// <param name="supportsParallelProcessing">Whether the processor supports parallel processing..</param>
        /// <param name="supportsEventDriven">Whether the processor supports event driven scheduling..</param>
        /// <param name="supportsBatching">Whether the processor supports batching. This makes the run duration settings available..</param>
        /// <param name="persistsState">Whether the processor persists state..</param>
        /// <param name="restricted">Whether the processor requires elevated privileges..</param>
        /// <param name="deprecated">Whether the processor has been deprecated..</param>
        /// <param name="executionNodeRestricted">Indicates if the execution node of a processor is restricted to run only on the primary node.</param>
        /// <param name="multipleVersionsAvailable">Whether the processor has multiple versions available..</param>
        /// <param name="inputRequirement">The input requirement for this processor..</param>
        /// <param name="config">The configuration details for the processor. These details will be included in a response if the verbose flag is included in a request..</param>
        /// <param name="validationErrors">The validation errors for the processor. These validation errors represent the problems with the processor that must be resolved before it can be started..</param>
        /// <param name="extensionMissing">Whether the underlying extension is missing..</param>
        public ProcessorDTO(string id = default(string), string versionedComponentId = default(string), string parentGroupId = default(string), PositionDTO position = default(PositionDTO), string name = default(string), string type = default(string), BundleDTO bundle = default(BundleDTO), StateEnum? state = default(StateEnum?), Dictionary<string, string> style = default(Dictionary<string, string>), string description = default(string), bool? supportsParallelProcessing = default(bool?), bool? supportsEventDriven = default(bool?), bool? supportsBatching = default(bool?), bool? persistsState = default(bool?), bool? restricted = default(bool?), bool? deprecated = default(bool?), bool? executionNodeRestricted = default(bool?), bool? multipleVersionsAvailable = default(bool?), string inputRequirement = default(string), ProcessorConfigDTO config = default(ProcessorConfigDTO), List<string> validationErrors = default(List<string>), bool? extensionMissing = default(bool?))
        {
            this.Id = id;
            this.VersionedComponentId = versionedComponentId;
            this.ParentGroupId = parentGroupId;
            this.Position = position;
            this.Name = name;
            this.Type = type;
            this.Bundle = bundle;
            this.State = state;
            this.Style = style;
            this.Description = description;
            this.SupportsParallelProcessing = supportsParallelProcessing;
            this.SupportsEventDriven = supportsEventDriven;
            this.SupportsBatching = supportsBatching;
            this.PersistsState = persistsState;
            this.Restricted = restricted;
            this.Deprecated = deprecated;
            this.ExecutionNodeRestricted = executionNodeRestricted;
            this.MultipleVersionsAvailable = multipleVersionsAvailable;
            this.InputRequirement = inputRequirement;
            this.Config = config;
            this.ValidationErrors = validationErrors;
            this.ExtensionMissing = extensionMissing;
        }
        
        /// <summary>
        /// The id of the component.
        /// </summary>
        /// <value>The id of the component.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the corresponding component that is under version control
        /// </summary>
        /// <value>The ID of the corresponding component that is under version control</value>
        [DataMember(Name="versionedComponentId", EmitDefaultValue=false)]
        public string VersionedComponentId { get; set; }

        /// <summary>
        /// The id of parent process group of this component if applicable.
        /// </summary>
        /// <value>The id of parent process group of this component if applicable.</value>
        [DataMember(Name="parentGroupId", EmitDefaultValue=false)]
        public string ParentGroupId { get; set; }

        /// <summary>
        /// The position of this component in the UI if applicable.
        /// </summary>
        /// <value>The position of this component in the UI if applicable.</value>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public PositionDTO Position { get; set; }

        /// <summary>
        /// The name of the processor.
        /// </summary>
        /// <value>The name of the processor.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The type of the processor.
        /// </summary>
        /// <value>The type of the processor.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The details of the artifact that bundled this processor type.
        /// </summary>
        /// <value>The details of the artifact that bundled this processor type.</value>
        [DataMember(Name="bundle", EmitDefaultValue=false)]
        public BundleDTO Bundle { get; set; }


        /// <summary>
        /// Styles for the processor (background-color : #eee).
        /// </summary>
        /// <value>Styles for the processor (background-color : #eee).</value>
        [DataMember(Name="style", EmitDefaultValue=false)]
        public Dictionary<string, string> Style { get; set; }

        /// <summary>
        /// The available relationships that the processor currently supports.
        /// </summary>
        /// <value>The available relationships that the processor currently supports.</value>
        [DataMember(Name="relationships", EmitDefaultValue=false)]
        public List<RelationshipDTO> Relationships { get; private set; }

        /// <summary>
        /// The description of the processor.
        /// </summary>
        /// <value>The description of the processor.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the processor supports parallel processing.
        /// </summary>
        /// <value>Whether the processor supports parallel processing.</value>
        [DataMember(Name="supportsParallelProcessing", EmitDefaultValue=false)]
        public bool? SupportsParallelProcessing { get; set; }

        /// <summary>
        /// Whether the processor supports event driven scheduling.
        /// </summary>
        /// <value>Whether the processor supports event driven scheduling.</value>
        [DataMember(Name="supportsEventDriven", EmitDefaultValue=false)]
        public bool? SupportsEventDriven { get; set; }

        /// <summary>
        /// Whether the processor supports batching. This makes the run duration settings available.
        /// </summary>
        /// <value>Whether the processor supports batching. This makes the run duration settings available.</value>
        [DataMember(Name="supportsBatching", EmitDefaultValue=false)]
        public bool? SupportsBatching { get; set; }

        /// <summary>
        /// Whether the processor persists state.
        /// </summary>
        /// <value>Whether the processor persists state.</value>
        [DataMember(Name="persistsState", EmitDefaultValue=false)]
        public bool? PersistsState { get; set; }

        /// <summary>
        /// Whether the processor requires elevated privileges.
        /// </summary>
        /// <value>Whether the processor requires elevated privileges.</value>
        [DataMember(Name="restricted", EmitDefaultValue=false)]
        public bool? Restricted { get; set; }

        /// <summary>
        /// Whether the processor has been deprecated.
        /// </summary>
        /// <value>Whether the processor has been deprecated.</value>
        [DataMember(Name="deprecated", EmitDefaultValue=false)]
        public bool? Deprecated { get; set; }

        /// <summary>
        /// Indicates if the execution node of a processor is restricted to run only on the primary node
        /// </summary>
        /// <value>Indicates if the execution node of a processor is restricted to run only on the primary node</value>
        [DataMember(Name="executionNodeRestricted", EmitDefaultValue=false)]
        public bool? ExecutionNodeRestricted { get; set; }

        /// <summary>
        /// Whether the processor has multiple versions available.
        /// </summary>
        /// <value>Whether the processor has multiple versions available.</value>
        [DataMember(Name="multipleVersionsAvailable", EmitDefaultValue=false)]
        public bool? MultipleVersionsAvailable { get; set; }

        /// <summary>
        /// The input requirement for this processor.
        /// </summary>
        /// <value>The input requirement for this processor.</value>
        [DataMember(Name="inputRequirement", EmitDefaultValue=false)]
        public string InputRequirement { get; set; }

        /// <summary>
        /// The configuration details for the processor. These details will be included in a response if the verbose flag is included in a request.
        /// </summary>
        /// <value>The configuration details for the processor. These details will be included in a response if the verbose flag is included in a request.</value>
        [DataMember(Name="config", EmitDefaultValue=false)]
        public ProcessorConfigDTO Config { get; set; }

        /// <summary>
        /// The validation errors for the processor. These validation errors represent the problems with the processor that must be resolved before it can be started.
        /// </summary>
        /// <value>The validation errors for the processor. These validation errors represent the problems with the processor that must be resolved before it can be started.</value>
        [DataMember(Name="validationErrors", EmitDefaultValue=false)]
        public List<string> ValidationErrors { get; set; }


        /// <summary>
        /// Whether the underlying extension is missing.
        /// </summary>
        /// <value>Whether the underlying extension is missing.</value>
        [DataMember(Name="extensionMissing", EmitDefaultValue=false)]
        public bool? ExtensionMissing { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessorDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  VersionedComponentId: ").Append(this.VersionedComponentId).Append("\n");
            sb.Append("  ParentGroupId: ").Append(this.ParentGroupId).Append("\n");
            sb.Append("  Position: ").Append(this.Position).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Bundle: ").Append(this.Bundle).Append("\n");
            sb.Append("  State: ").Append(this.State).Append("\n");
            sb.Append("  Style: ").Append(this.Style).Append("\n");
            sb.Append("  Relationships: ").Append(this.Relationships).Append("\n");
            sb.Append("  Description: ").Append(this.Description).Append("\n");
            sb.Append("  SupportsParallelProcessing: ").Append(this.SupportsParallelProcessing).Append("\n");
            sb.Append("  SupportsEventDriven: ").Append(this.SupportsEventDriven).Append("\n");
            sb.Append("  SupportsBatching: ").Append(this.SupportsBatching).Append("\n");
            sb.Append("  PersistsState: ").Append(this.PersistsState).Append("\n");
            sb.Append("  Restricted: ").Append(this.Restricted).Append("\n");
            sb.Append("  Deprecated: ").Append(this.Deprecated).Append("\n");
            sb.Append("  ExecutionNodeRestricted: ").Append(this.ExecutionNodeRestricted).Append("\n");
            sb.Append("  MultipleVersionsAvailable: ").Append(this.MultipleVersionsAvailable).Append("\n");
            sb.Append("  InputRequirement: ").Append(this.InputRequirement).Append("\n");
            sb.Append("  Config: ").Append(this.Config).Append("\n");
            sb.Append("  ValidationErrors: ").Append(this.ValidationErrors).Append("\n");
            sb.Append("  ValidationStatus: ").Append(this.ValidationStatus).Append("\n");
            sb.Append("  ExtensionMissing: ").Append(this.ExtensionMissing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessorDTO);
        }

        /// <summary>
        /// Returns true if ProcessorDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessorDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessorDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VersionedComponentId == input.VersionedComponentId ||
                    (this.VersionedComponentId != null &&
                    this.VersionedComponentId.Equals(input.VersionedComponentId))
                ) && 
                (
                    this.ParentGroupId == input.ParentGroupId ||
                    (this.ParentGroupId != null &&
                    this.ParentGroupId.Equals(input.ParentGroupId))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Bundle == input.Bundle ||
                    (this.Bundle != null &&
                    this.Bundle.Equals(input.Bundle))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Style == input.Style ||
                    this.Style != null &&
                    this.Style.SequenceEqual(input.Style)
                ) && 
                (
                    this.Relationships == input.Relationships ||
                    this.Relationships != null &&
                    this.Relationships.SequenceEqual(input.Relationships)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SupportsParallelProcessing == input.SupportsParallelProcessing ||
                    (this.SupportsParallelProcessing != null &&
                    this.SupportsParallelProcessing.Equals(input.SupportsParallelProcessing))
                ) && 
                (
                    this.SupportsEventDriven == input.SupportsEventDriven ||
                    (this.SupportsEventDriven != null &&
                    this.SupportsEventDriven.Equals(input.SupportsEventDriven))
                ) && 
                (
                    this.SupportsBatching == input.SupportsBatching ||
                    (this.SupportsBatching != null &&
                    this.SupportsBatching.Equals(input.SupportsBatching))
                ) && 
                (
                    this.PersistsState == input.PersistsState ||
                    (this.PersistsState != null &&
                    this.PersistsState.Equals(input.PersistsState))
                ) && 
                (
                    this.Restricted == input.Restricted ||
                    (this.Restricted != null &&
                    this.Restricted.Equals(input.Restricted))
                ) && 
                (
                    this.Deprecated == input.Deprecated ||
                    (this.Deprecated != null &&
                    this.Deprecated.Equals(input.Deprecated))
                ) && 
                (
                    this.ExecutionNodeRestricted == input.ExecutionNodeRestricted ||
                    (this.ExecutionNodeRestricted != null &&
                    this.ExecutionNodeRestricted.Equals(input.ExecutionNodeRestricted))
                ) && 
                (
                    this.MultipleVersionsAvailable == input.MultipleVersionsAvailable ||
                    (this.MultipleVersionsAvailable != null &&
                    this.MultipleVersionsAvailable.Equals(input.MultipleVersionsAvailable))
                ) && 
                (
                    this.InputRequirement == input.InputRequirement ||
                    (this.InputRequirement != null &&
                    this.InputRequirement.Equals(input.InputRequirement))
                ) && 
                (
                    this.Config == input.Config ||
                    (this.Config != null &&
                    this.Config.Equals(input.Config))
                ) && 
                (
                    this.ValidationErrors == input.ValidationErrors ||
                    this.ValidationErrors != null &&
                    this.ValidationErrors.SequenceEqual(input.ValidationErrors)
                ) && 
                (
                    this.ValidationStatus == input.ValidationStatus ||
                    (this.ValidationStatus != null &&
                    this.ValidationStatus.Equals(input.ValidationStatus))
                ) && 
                (
                    this.ExtensionMissing == input.ExtensionMissing ||
                    (this.ExtensionMissing != null &&
                    this.ExtensionMissing.Equals(input.ExtensionMissing))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.VersionedComponentId != null)
                    hashCode = hashCode * 59 + this.VersionedComponentId.GetHashCode();
                if (this.ParentGroupId != null)
                    hashCode = hashCode * 59 + this.ParentGroupId.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Bundle != null)
                    hashCode = hashCode * 59 + this.Bundle.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Style != null)
                    hashCode = hashCode * 59 + this.Style.GetHashCode();
                if (this.Relationships != null)
                    hashCode = hashCode * 59 + this.Relationships.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.SupportsParallelProcessing != null)
                    hashCode = hashCode * 59 + this.SupportsParallelProcessing.GetHashCode();
                if (this.SupportsEventDriven != null)
                    hashCode = hashCode * 59 + this.SupportsEventDriven.GetHashCode();
                if (this.SupportsBatching != null)
                    hashCode = hashCode * 59 + this.SupportsBatching.GetHashCode();
                if (this.PersistsState != null)
                    hashCode = hashCode * 59 + this.PersistsState.GetHashCode();
                if (this.Restricted != null)
                    hashCode = hashCode * 59 + this.Restricted.GetHashCode();
                if (this.Deprecated != null)
                    hashCode = hashCode * 59 + this.Deprecated.GetHashCode();
                if (this.ExecutionNodeRestricted != null)
                    hashCode = hashCode * 59 + this.ExecutionNodeRestricted.GetHashCode();
                if (this.MultipleVersionsAvailable != null)
                    hashCode = hashCode * 59 + this.MultipleVersionsAvailable.GetHashCode();
                if (this.InputRequirement != null)
                    hashCode = hashCode * 59 + this.InputRequirement.GetHashCode();
                if (this.Config != null)
                    hashCode = hashCode * 59 + this.Config.GetHashCode();
                if (this.ValidationErrors != null)
                    hashCode = hashCode * 59 + this.ValidationErrors.GetHashCode();
                if (this.ValidationStatus != null)
                    hashCode = hashCode * 59 + this.ValidationStatus.GetHashCode();
                if (this.ExtensionMissing != null)
                    hashCode = hashCode * 59 + this.ExtensionMissing.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
