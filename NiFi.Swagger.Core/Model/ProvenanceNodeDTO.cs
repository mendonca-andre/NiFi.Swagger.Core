/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// ProvenanceNodeDTO
    /// </summary>
    [DataContract]
    public partial class ProvenanceNodeDTO :  IEquatable<ProvenanceNodeDTO>, IValidatableObject
    {
        /// <summary>
        /// The type of the node.
        /// </summary>
        /// <value>The type of the node.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum FLOWFILE for value: FLOWFILE
            /// </summary>
            [EnumMember(Value = "FLOWFILE")]
            FLOWFILE = 1,
            
            /// <summary>
            /// Enum EVENT for value: EVENT
            /// </summary>
            [EnumMember(Value = "EVENT")]
            EVENT = 2
        }

        /// <summary>
        /// The type of the node.
        /// </summary>
        /// <value>The type of the node.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvenanceNodeDTO" /> class.
        /// </summary>
        /// <param name="id">The id of the node..</param>
        /// <param name="flowFileUuid">The uuid of the flowfile associated with the provenance event..</param>
        /// <param name="parentUuids">The uuid of the parent flowfiles of the provenance event..</param>
        /// <param name="childUuids">The uuid of the childrent flowfiles of the provenance event..</param>
        /// <param name="clusterNodeIdentifier">The identifier of the node that this event/flowfile originated from..</param>
        /// <param name="type">The type of the node..</param>
        /// <param name="eventType">If the type is EVENT, this is the type of event..</param>
        /// <param name="millis">The timestamp of the node in milliseconds..</param>
        /// <param name="timestamp">The timestamp of the node formatted..</param>
        public ProvenanceNodeDTO(string id = default(string), string flowFileUuid = default(string), List<string> parentUuids = default(List<string>), List<string> childUuids = default(List<string>), string clusterNodeIdentifier = default(string), TypeEnum? type = default(TypeEnum?), string eventType = default(string), long? millis = default(long?), string timestamp = default(string))
        {
            this.Id = id;
            this.FlowFileUuid = flowFileUuid;
            this.ParentUuids = parentUuids;
            this.ChildUuids = childUuids;
            this.ClusterNodeIdentifier = clusterNodeIdentifier;
            this.Type = type;
            this.EventType = eventType;
            this.Millis = millis;
            this.Timestamp = timestamp;
        }
        
        /// <summary>
        /// The id of the node.
        /// </summary>
        /// <value>The id of the node.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The uuid of the flowfile associated with the provenance event.
        /// </summary>
        /// <value>The uuid of the flowfile associated with the provenance event.</value>
        [DataMember(Name="flowFileUuid", EmitDefaultValue=false)]
        public string FlowFileUuid { get; set; }

        /// <summary>
        /// The uuid of the parent flowfiles of the provenance event.
        /// </summary>
        /// <value>The uuid of the parent flowfiles of the provenance event.</value>
        [DataMember(Name="parentUuids", EmitDefaultValue=false)]
        public List<string> ParentUuids { get; set; }

        /// <summary>
        /// The uuid of the childrent flowfiles of the provenance event.
        /// </summary>
        /// <value>The uuid of the childrent flowfiles of the provenance event.</value>
        [DataMember(Name="childUuids", EmitDefaultValue=false)]
        public List<string> ChildUuids { get; set; }

        /// <summary>
        /// The identifier of the node that this event/flowfile originated from.
        /// </summary>
        /// <value>The identifier of the node that this event/flowfile originated from.</value>
        [DataMember(Name="clusterNodeIdentifier", EmitDefaultValue=false)]
        public string ClusterNodeIdentifier { get; set; }


        /// <summary>
        /// If the type is EVENT, this is the type of event.
        /// </summary>
        /// <value>If the type is EVENT, this is the type of event.</value>
        [DataMember(Name="eventType", EmitDefaultValue=false)]
        public string EventType { get; set; }

        /// <summary>
        /// The timestamp of the node in milliseconds.
        /// </summary>
        /// <value>The timestamp of the node in milliseconds.</value>
        [DataMember(Name="millis", EmitDefaultValue=false)]
        public long? Millis { get; set; }

        /// <summary>
        /// The timestamp of the node formatted.
        /// </summary>
        /// <value>The timestamp of the node formatted.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvenanceNodeDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  FlowFileUuid: ").Append(this.FlowFileUuid).Append("\n");
            sb.Append("  ParentUuids: ").Append(this.ParentUuids).Append("\n");
            sb.Append("  ChildUuids: ").Append(this.ChildUuids).Append("\n");
            sb.Append("  ClusterNodeIdentifier: ").Append(this.ClusterNodeIdentifier).Append("\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  EventType: ").Append(this.EventType).Append("\n");
            sb.Append("  Millis: ").Append(this.Millis).Append("\n");
            sb.Append("  Timestamp: ").Append(this.Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProvenanceNodeDTO);
        }

        /// <summary>
        /// Returns true if ProvenanceNodeDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProvenanceNodeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvenanceNodeDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FlowFileUuid == input.FlowFileUuid ||
                    (this.FlowFileUuid != null &&
                    this.FlowFileUuid.Equals(input.FlowFileUuid))
                ) && 
                (
                    this.ParentUuids == input.ParentUuids ||
                    this.ParentUuids != null &&
                    this.ParentUuids.SequenceEqual(input.ParentUuids)
                ) && 
                (
                    this.ChildUuids == input.ChildUuids ||
                    this.ChildUuids != null &&
                    this.ChildUuids.SequenceEqual(input.ChildUuids)
                ) && 
                (
                    this.ClusterNodeIdentifier == input.ClusterNodeIdentifier ||
                    (this.ClusterNodeIdentifier != null &&
                    this.ClusterNodeIdentifier.Equals(input.ClusterNodeIdentifier))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.Millis == input.Millis ||
                    (this.Millis != null &&
                    this.Millis.Equals(input.Millis))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FlowFileUuid != null)
                    hashCode = hashCode * 59 + this.FlowFileUuid.GetHashCode();
                if (this.ParentUuids != null)
                    hashCode = hashCode * 59 + this.ParentUuids.GetHashCode();
                if (this.ChildUuids != null)
                    hashCode = hashCode * 59 + this.ChildUuids.GetHashCode();
                if (this.ClusterNodeIdentifier != null)
                    hashCode = hashCode * 59 + this.ClusterNodeIdentifier.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.EventType != null)
                    hashCode = hashCode * 59 + this.EventType.GetHashCode();
                if (this.Millis != null)
                    hashCode = hashCode * 59 + this.Millis.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
