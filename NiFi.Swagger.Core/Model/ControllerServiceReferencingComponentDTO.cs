/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    /// <summary>
    /// ControllerServiceReferencingComponentDTO
    /// </summary>
    [DataContract]
    public partial class ControllerServiceReferencingComponentDTO :  IEquatable<ControllerServiceReferencingComponentDTO>, IValidatableObject
    {
        /// <summary>
        /// The type of reference this is.
        /// </summary>
        /// <value>The type of reference this is.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReferenceTypeEnum
        {
            
            /// <summary>
            /// Enum Processor for value: Processor
            /// </summary>
            [EnumMember(Value = "Processor")]
            Processor = 1,
            
            /// <summary>
            /// Enum ControllerService for value: ControllerService
            /// </summary>
            [EnumMember(Value = "ControllerService")]
            ControllerService = 2,
            
            /// <summary>
            /// Enum OrReportingTask for value: or ReportingTask
            /// </summary>
            [EnumMember(Value = "or ReportingTask")]
            OrReportingTask = 3
        }

        /// <summary>
        /// The type of reference this is.
        /// </summary>
        /// <value>The type of reference this is.</value>
        [DataMember(Name="referenceType", EmitDefaultValue=false)]
        public ReferenceTypeEnum? ReferenceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ControllerServiceReferencingComponentDTO" /> class.
        /// </summary>
        /// <param name="groupId">The group id for the component referencing a controller service. If this component is another controller service or a reporting task, this field is blank..</param>
        /// <param name="id">The id of the component referencing a controller service..</param>
        /// <param name="name">The name of the component referencing a controller service..</param>
        /// <param name="type">The type of the component referencing a controller service in simple Java class name format without package name..</param>
        /// <param name="state">The scheduled state of a processor or reporting task referencing a controller service. If this component is another controller service, this field represents the controller service state..</param>
        /// <param name="properties">The properties for the component..</param>
        /// <param name="descriptors">The descriptors for the component properties..</param>
        /// <param name="validationErrors">The validation errors for the component..</param>
        /// <param name="referenceType">The type of reference this is..</param>
        /// <param name="activeThreadCount">The number of active threads for the referencing component..</param>
        /// <param name="referenceCycle">If the referencing component represents a controller service, this indicates whether it has already been represented in this hierarchy..</param>
        /// <param name="referencingComponents">If the referencing component represents a controller service, these are the components that reference it..</param>
        public ControllerServiceReferencingComponentDTO(string groupId = default(string), string id = default(string), string name = default(string), string type = default(string), string state = default(string), Dictionary<string, string> properties = default(Dictionary<string, string>), Dictionary<string, PropertyDescriptorDTO> descriptors = default(Dictionary<string, PropertyDescriptorDTO>), List<string> validationErrors = default(List<string>), ReferenceTypeEnum? referenceType = default(ReferenceTypeEnum?), int? activeThreadCount = default(int?), bool? referenceCycle = default(bool?), List<ControllerServiceReferencingComponentEntity> referencingComponents = default(List<ControllerServiceReferencingComponentEntity>))
        {
            this.GroupId = groupId;
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.State = state;
            this.Properties = properties;
            this.Descriptors = descriptors;
            this.ValidationErrors = validationErrors;
            this.ReferenceType = referenceType;
            this.ActiveThreadCount = activeThreadCount;
            this.ReferenceCycle = referenceCycle;
            this.ReferencingComponents = referencingComponents;
        }
        
        /// <summary>
        /// The group id for the component referencing a controller service. If this component is another controller service or a reporting task, this field is blank.
        /// </summary>
        /// <value>The group id for the component referencing a controller service. If this component is another controller service or a reporting task, this field is blank.</value>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public string GroupId { get; set; }

        /// <summary>
        /// The id of the component referencing a controller service.
        /// </summary>
        /// <value>The id of the component referencing a controller service.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the component referencing a controller service.
        /// </summary>
        /// <value>The name of the component referencing a controller service.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The type of the component referencing a controller service in simple Java class name format without package name.
        /// </summary>
        /// <value>The type of the component referencing a controller service in simple Java class name format without package name.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The scheduled state of a processor or reporting task referencing a controller service. If this component is another controller service, this field represents the controller service state.
        /// </summary>
        /// <value>The scheduled state of a processor or reporting task referencing a controller service. If this component is another controller service, this field represents the controller service state.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// The properties for the component.
        /// </summary>
        /// <value>The properties for the component.</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Dictionary<string, string> Properties { get; set; }

        /// <summary>
        /// The descriptors for the component properties.
        /// </summary>
        /// <value>The descriptors for the component properties.</value>
        [DataMember(Name="descriptors", EmitDefaultValue=false)]
        public Dictionary<string, PropertyDescriptorDTO> Descriptors { get; set; }

        /// <summary>
        /// The validation errors for the component.
        /// </summary>
        /// <value>The validation errors for the component.</value>
        [DataMember(Name="validationErrors", EmitDefaultValue=false)]
        public List<string> ValidationErrors { get; set; }


        /// <summary>
        /// The number of active threads for the referencing component.
        /// </summary>
        /// <value>The number of active threads for the referencing component.</value>
        [DataMember(Name="activeThreadCount", EmitDefaultValue=false)]
        public int? ActiveThreadCount { get; set; }

        /// <summary>
        /// If the referencing component represents a controller service, this indicates whether it has already been represented in this hierarchy.
        /// </summary>
        /// <value>If the referencing component represents a controller service, this indicates whether it has already been represented in this hierarchy.</value>
        [DataMember(Name="referenceCycle", EmitDefaultValue=false)]
        public bool? ReferenceCycle { get; set; }

        /// <summary>
        /// If the referencing component represents a controller service, these are the components that reference it.
        /// </summary>
        /// <value>If the referencing component represents a controller service, these are the components that reference it.</value>
        [DataMember(Name="referencingComponents", EmitDefaultValue=false)]
        public List<ControllerServiceReferencingComponentEntity> ReferencingComponents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ControllerServiceReferencingComponentDTO {\n");
            sb.Append("  GroupId: ").Append(this.GroupId).Append("\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  Name: ").Append(this.Name).Append("\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  State: ").Append(this.State).Append("\n");
            sb.Append("  Properties: ").Append(this.Properties).Append("\n");
            sb.Append("  Descriptors: ").Append(this.Descriptors).Append("\n");
            sb.Append("  ValidationErrors: ").Append(this.ValidationErrors).Append("\n");
            sb.Append("  ReferenceType: ").Append(this.ReferenceType).Append("\n");
            sb.Append("  ActiveThreadCount: ").Append(this.ActiveThreadCount).Append("\n");
            sb.Append("  ReferenceCycle: ").Append(this.ReferenceCycle).Append("\n");
            sb.Append("  ReferencingComponents: ").Append(this.ReferencingComponents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ControllerServiceReferencingComponentDTO);
        }

        /// <summary>
        /// Returns true if ControllerServiceReferencingComponentDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ControllerServiceReferencingComponentDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ControllerServiceReferencingComponentDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Descriptors == input.Descriptors ||
                    this.Descriptors != null &&
                    this.Descriptors.SequenceEqual(input.Descriptors)
                ) && 
                (
                    this.ValidationErrors == input.ValidationErrors ||
                    this.ValidationErrors != null &&
                    this.ValidationErrors.SequenceEqual(input.ValidationErrors)
                ) && 
                (
                    this.ReferenceType == input.ReferenceType ||
                    (this.ReferenceType != null &&
                    this.ReferenceType.Equals(input.ReferenceType))
                ) && 
                (
                    this.ActiveThreadCount == input.ActiveThreadCount ||
                    (this.ActiveThreadCount != null &&
                    this.ActiveThreadCount.Equals(input.ActiveThreadCount))
                ) && 
                (
                    this.ReferenceCycle == input.ReferenceCycle ||
                    (this.ReferenceCycle != null &&
                    this.ReferenceCycle.Equals(input.ReferenceCycle))
                ) && 
                (
                    this.ReferencingComponents == input.ReferencingComponents ||
                    this.ReferencingComponents != null &&
                    this.ReferencingComponents.SequenceEqual(input.ReferencingComponents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                if (this.Descriptors != null)
                    hashCode = hashCode * 59 + this.Descriptors.GetHashCode();
                if (this.ValidationErrors != null)
                    hashCode = hashCode * 59 + this.ValidationErrors.GetHashCode();
                if (this.ReferenceType != null)
                    hashCode = hashCode * 59 + this.ReferenceType.GetHashCode();
                if (this.ActiveThreadCount != null)
                    hashCode = hashCode * 59 + this.ActiveThreadCount.GetHashCode();
                if (this.ReferenceCycle != null)
                    hashCode = hashCode * 59 + this.ReferenceCycle.GetHashCode();
                if (this.ReferencingComponents != null)
                    hashCode = hashCode * 59 + this.ReferencingComponents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
