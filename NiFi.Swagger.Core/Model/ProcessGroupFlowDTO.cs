/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// ProcessGroupFlowDTO
    /// </summary>
    [DataContract]
    public partial class ProcessGroupFlowDTO :  IEquatable<ProcessGroupFlowDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessGroupFlowDTO" /> class.
        /// </summary>
        /// <param name="id">The id of the component..</param>
        /// <param name="uri">The URI for futures requests to the component..</param>
        /// <param name="parentGroupId">The id of parent process group of this component if applicable..</param>
        /// <param name="breadcrumb">The breadcrumb of the process group..</param>
        /// <param name="flow">The flow structure starting at this Process Group..</param>
        /// <param name="lastRefreshed">The time the flow for the process group was last refreshed..</param>
        public ProcessGroupFlowDTO(string id = default(string), string uri = default(string), string parentGroupId = default(string), FlowBreadcrumbEntity breadcrumb = default(FlowBreadcrumbEntity), FlowDTO flow = default(FlowDTO), string lastRefreshed = default(string))
        {
            this.Id = id;
            this.Uri = uri;
            this.ParentGroupId = parentGroupId;
            this.Breadcrumb = breadcrumb;
            this.Flow = flow;
            this.LastRefreshed = lastRefreshed;
        }
        
        /// <summary>
        /// The id of the component.
        /// </summary>
        /// <value>The id of the component.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The URI for futures requests to the component.
        /// </summary>
        /// <value>The URI for futures requests to the component.</value>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// The id of parent process group of this component if applicable.
        /// </summary>
        /// <value>The id of parent process group of this component if applicable.</value>
        [DataMember(Name="parentGroupId", EmitDefaultValue=false)]
        public string ParentGroupId { get; set; }

        /// <summary>
        /// The breadcrumb of the process group.
        /// </summary>
        /// <value>The breadcrumb of the process group.</value>
        [DataMember(Name="breadcrumb", EmitDefaultValue=false)]
        public FlowBreadcrumbEntity Breadcrumb { get; set; }

        /// <summary>
        /// The flow structure starting at this Process Group.
        /// </summary>
        /// <value>The flow structure starting at this Process Group.</value>
        [DataMember(Name="flow", EmitDefaultValue=false)]
        public FlowDTO Flow { get; set; }

        /// <summary>
        /// The time the flow for the process group was last refreshed.
        /// </summary>
        /// <value>The time the flow for the process group was last refreshed.</value>
        [DataMember(Name="lastRefreshed", EmitDefaultValue=false)]
        public string LastRefreshed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessGroupFlowDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  Uri: ").Append(this.Uri).Append("\n");
            sb.Append("  ParentGroupId: ").Append(this.ParentGroupId).Append("\n");
            sb.Append("  Breadcrumb: ").Append(this.Breadcrumb).Append("\n");
            sb.Append("  Flow: ").Append(this.Flow).Append("\n");
            sb.Append("  LastRefreshed: ").Append(this.LastRefreshed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessGroupFlowDTO);
        }

        /// <summary>
        /// Returns true if ProcessGroupFlowDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessGroupFlowDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessGroupFlowDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.ParentGroupId == input.ParentGroupId ||
                    (this.ParentGroupId != null &&
                    this.ParentGroupId.Equals(input.ParentGroupId))
                ) && 
                (
                    this.Breadcrumb == input.Breadcrumb ||
                    (this.Breadcrumb != null &&
                    this.Breadcrumb.Equals(input.Breadcrumb))
                ) && 
                (
                    this.Flow == input.Flow ||
                    (this.Flow != null &&
                    this.Flow.Equals(input.Flow))
                ) && 
                (
                    this.LastRefreshed == input.LastRefreshed ||
                    (this.LastRefreshed != null &&
                    this.LastRefreshed.Equals(input.LastRefreshed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.ParentGroupId != null)
                    hashCode = hashCode * 59 + this.ParentGroupId.GetHashCode();
                if (this.Breadcrumb != null)
                    hashCode = hashCode * 59 + this.Breadcrumb.GetHashCode();
                if (this.Flow != null)
                    hashCode = hashCode * 59 + this.Flow.GetHashCode();
                if (this.LastRefreshed != null)
                    hashCode = hashCode * 59 + this.LastRefreshed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
