/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.IO;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// VersionedFlowSnapshot
    /// </summary>
    [DataContract]
    public partial class VersionedFlowSnapshot :  IEquatable<VersionedFlowSnapshot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionedFlowSnapshot" /> class.
        /// </summary>
        [JsonConstructor]
        protected VersionedFlowSnapshot() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionedFlowSnapshot" /> class.
        /// </summary>
        /// <param name="snapshotMetadata">The metadata for this snapshot (required).</param>
        /// <param name="flowContents">The contents of the versioned flow (required).</param>
        /// <param name="latest">latest.</param>
        public VersionedFlowSnapshot(VersionedFlowSnapshotMetadata snapshotMetadata = default(VersionedFlowSnapshotMetadata), VersionedProcessGroup flowContents = default(VersionedProcessGroup), bool? latest = default(bool?))
        {
            // to ensure "snapshotMetadata" is required (not null)
            if (snapshotMetadata == null)
            {
                throw new InvalidDataException("snapshotMetadata is a required property for VersionedFlowSnapshot and cannot be null");
            }
            else
            {
                this.SnapshotMetadata = snapshotMetadata;
            }
            // to ensure "flowContents" is required (not null)
            if (flowContents == null)
            {
                throw new InvalidDataException("flowContents is a required property for VersionedFlowSnapshot and cannot be null");
            }
            else
            {
                this.FlowContents = flowContents;
            }
            this.Latest = latest;
        }
        
        /// <summary>
        /// The metadata for this snapshot
        /// </summary>
        /// <value>The metadata for this snapshot</value>
        [DataMember(Name="snapshotMetadata", EmitDefaultValue=false)]
        public VersionedFlowSnapshotMetadata SnapshotMetadata { get; set; }

        /// <summary>
        /// The contents of the versioned flow
        /// </summary>
        /// <value>The contents of the versioned flow</value>
        [DataMember(Name="flowContents", EmitDefaultValue=false)]
        public VersionedProcessGroup FlowContents { get; set; }

        /// <summary>
        /// The flow this snapshot is for
        /// </summary>
        /// <value>The flow this snapshot is for</value>
        [DataMember(Name="flow", EmitDefaultValue=false)]
        public VersionedFlow Flow { get; private set; }

        /// <summary>
        /// The bucket where the flow is located
        /// </summary>
        /// <value>The bucket where the flow is located</value>
        [DataMember(Name="bucket", EmitDefaultValue=false)]
        public Bucket Bucket { get; private set; }

        /// <summary>
        /// Gets or Sets Latest
        /// </summary>
        [DataMember(Name="latest", EmitDefaultValue=false)]
        public bool? Latest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VersionedFlowSnapshot {\n");
            sb.Append("  SnapshotMetadata: ").Append(this.SnapshotMetadata).Append("\n");
            sb.Append("  FlowContents: ").Append(this.FlowContents).Append("\n");
            sb.Append("  Flow: ").Append(this.Flow).Append("\n");
            sb.Append("  Bucket: ").Append(this.Bucket).Append("\n");
            sb.Append("  Latest: ").Append(this.Latest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VersionedFlowSnapshot);
        }

        /// <summary>
        /// Returns true if VersionedFlowSnapshot instances are equal
        /// </summary>
        /// <param name="input">Instance of VersionedFlowSnapshot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionedFlowSnapshot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SnapshotMetadata == input.SnapshotMetadata ||
                    (this.SnapshotMetadata != null &&
                    this.SnapshotMetadata.Equals(input.SnapshotMetadata))
                ) && 
                (
                    this.FlowContents == input.FlowContents ||
                    (this.FlowContents != null &&
                    this.FlowContents.Equals(input.FlowContents))
                ) && 
                (
                    this.Flow == input.Flow ||
                    (this.Flow != null &&
                    this.Flow.Equals(input.Flow))
                ) && 
                (
                    this.Bucket == input.Bucket ||
                    (this.Bucket != null &&
                    this.Bucket.Equals(input.Bucket))
                ) && 
                (
                    this.Latest == input.Latest ||
                    (this.Latest != null &&
                    this.Latest.Equals(input.Latest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SnapshotMetadata != null)
                    hashCode = hashCode * 59 + this.SnapshotMetadata.GetHashCode();
                if (this.FlowContents != null)
                    hashCode = hashCode * 59 + this.FlowContents.GetHashCode();
                if (this.Flow != null)
                    hashCode = hashCode * 59 + this.Flow.GetHashCode();
                if (this.Bucket != null)
                    hashCode = hashCode * 59 + this.Bucket.GetHashCode();
                if (this.Latest != null)
                    hashCode = hashCode * 59 + this.Latest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
