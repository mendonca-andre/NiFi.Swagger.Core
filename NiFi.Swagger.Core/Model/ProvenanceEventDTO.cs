/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// ProvenanceEventDTO
    /// </summary>
    [DataContract]
    public partial class ProvenanceEventDTO :  IEquatable<ProvenanceEventDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvenanceEventDTO" /> class.
        /// </summary>
        /// <param name="id">The event uuid..</param>
        /// <param name="eventId">The event id. This is a one up number thats unique per node..</param>
        /// <param name="eventTime">The timestamp of the event..</param>
        /// <param name="eventDuration">The event duration in milliseconds..</param>
        /// <param name="lineageDuration">The duration since the lineage began, in milliseconds..</param>
        /// <param name="eventType">The type of the event..</param>
        /// <param name="flowFileUuid">The uuid of the flowfile for the event..</param>
        /// <param name="fileSize">The size of the flowfile for the event..</param>
        /// <param name="fileSizeBytes">The size of the flowfile in bytes for the event..</param>
        /// <param name="clusterNodeId">The identifier for the node where the event originated..</param>
        /// <param name="clusterNodeAddress">The label for the node where the event originated..</param>
        /// <param name="groupId">The id of the group that the component resides in. If the component is no longer in the flow, the group id will not be set..</param>
        /// <param name="componentId">The id of the component that generated the event..</param>
        /// <param name="componentType">The type of the component that generated the event..</param>
        /// <param name="componentName">The name of the component that generated the event..</param>
        /// <param name="sourceSystemFlowFileId">The source system flowfile id..</param>
        /// <param name="alternateIdentifierUri">The alternate identifier uri for the fileflow for the event..</param>
        /// <param name="attributes">The attributes of the flowfile for the event..</param>
        /// <param name="parentUuids">The parent uuids for the event..</param>
        /// <param name="childUuids">The child uuids for the event..</param>
        /// <param name="transitUri">The source/destination system uri if the event was a RECEIVE/SEND..</param>
        /// <param name="relationship">The relationship to which the flowfile was routed if the event is of type ROUTE..</param>
        /// <param name="details">The event details..</param>
        /// <param name="contentEqual">Whether the input and output content claim is the same..</param>
        /// <param name="inputContentAvailable">Whether the input content is still available..</param>
        /// <param name="inputContentClaimSection">The section in which the input content claim lives..</param>
        /// <param name="inputContentClaimContainer">The container in which the input content claim lives..</param>
        /// <param name="inputContentClaimIdentifier">The identifier of the input content claim..</param>
        /// <param name="inputContentClaimOffset">The offset into the input content claim where the flowfiles content begins..</param>
        /// <param name="inputContentClaimFileSize">The file size of the input content claim formatted..</param>
        /// <param name="inputContentClaimFileSizeBytes">The file size of the intput content claim in bytes..</param>
        /// <param name="outputContentAvailable">Whether the output content is still available..</param>
        /// <param name="outputContentClaimSection">The section in which the output content claim lives..</param>
        /// <param name="outputContentClaimContainer">The container in which the output content claim lives..</param>
        /// <param name="outputContentClaimIdentifier">The identifier of the output content claim..</param>
        /// <param name="outputContentClaimOffset">The offset into the output content claim where the flowfiles content begins..</param>
        /// <param name="outputContentClaimFileSize">The file size of the output content claim formatted..</param>
        /// <param name="outputContentClaimFileSizeBytes">The file size of the output content claim in bytes..</param>
        /// <param name="replayAvailable">Whether or not replay is available..</param>
        /// <param name="replayExplanation">Explanation as to why replay is unavailable..</param>
        /// <param name="sourceConnectionIdentifier">The identifier of the queue/connection from which the flowfile was pulled to genereate this event. May be null if the queue/connection is unknown or the flowfile was generated from this event..</param>
        public ProvenanceEventDTO(string id = default(string), long? eventId = default(long?), string eventTime = default(string), long? eventDuration = default(long?), long? lineageDuration = default(long?), string eventType = default(string), string flowFileUuid = default(string), string fileSize = default(string), long? fileSizeBytes = default(long?), string clusterNodeId = default(string), string clusterNodeAddress = default(string), string groupId = default(string), string componentId = default(string), string componentType = default(string), string componentName = default(string), string sourceSystemFlowFileId = default(string), string alternateIdentifierUri = default(string), List<AttributeDTO> attributes = default(List<AttributeDTO>), List<string> parentUuids = default(List<string>), List<string> childUuids = default(List<string>), string transitUri = default(string), string relationship = default(string), string details = default(string), bool? contentEqual = default(bool?), bool? inputContentAvailable = default(bool?), string inputContentClaimSection = default(string), string inputContentClaimContainer = default(string), string inputContentClaimIdentifier = default(string), long? inputContentClaimOffset = default(long?), string inputContentClaimFileSize = default(string), long? inputContentClaimFileSizeBytes = default(long?), bool? outputContentAvailable = default(bool?), string outputContentClaimSection = default(string), string outputContentClaimContainer = default(string), string outputContentClaimIdentifier = default(string), long? outputContentClaimOffset = default(long?), string outputContentClaimFileSize = default(string), long? outputContentClaimFileSizeBytes = default(long?), bool? replayAvailable = default(bool?), string replayExplanation = default(string), string sourceConnectionIdentifier = default(string))
        {
            this.Id = id;
            this.EventId = eventId;
            this.EventTime = eventTime;
            this.EventDuration = eventDuration;
            this.LineageDuration = lineageDuration;
            this.EventType = eventType;
            this.FlowFileUuid = flowFileUuid;
            this.FileSize = fileSize;
            this.FileSizeBytes = fileSizeBytes;
            this.ClusterNodeId = clusterNodeId;
            this.ClusterNodeAddress = clusterNodeAddress;
            this.GroupId = groupId;
            this.ComponentId = componentId;
            this.ComponentType = componentType;
            this.ComponentName = componentName;
            this.SourceSystemFlowFileId = sourceSystemFlowFileId;
            this.AlternateIdentifierUri = alternateIdentifierUri;
            this.Attributes = attributes;
            this.ParentUuids = parentUuids;
            this.ChildUuids = childUuids;
            this.TransitUri = transitUri;
            this.Relationship = relationship;
            this.Details = details;
            this.ContentEqual = contentEqual;
            this.InputContentAvailable = inputContentAvailable;
            this.InputContentClaimSection = inputContentClaimSection;
            this.InputContentClaimContainer = inputContentClaimContainer;
            this.InputContentClaimIdentifier = inputContentClaimIdentifier;
            this.InputContentClaimOffset = inputContentClaimOffset;
            this.InputContentClaimFileSize = inputContentClaimFileSize;
            this.InputContentClaimFileSizeBytes = inputContentClaimFileSizeBytes;
            this.OutputContentAvailable = outputContentAvailable;
            this.OutputContentClaimSection = outputContentClaimSection;
            this.OutputContentClaimContainer = outputContentClaimContainer;
            this.OutputContentClaimIdentifier = outputContentClaimIdentifier;
            this.OutputContentClaimOffset = outputContentClaimOffset;
            this.OutputContentClaimFileSize = outputContentClaimFileSize;
            this.OutputContentClaimFileSizeBytes = outputContentClaimFileSizeBytes;
            this.ReplayAvailable = replayAvailable;
            this.ReplayExplanation = replayExplanation;
            this.SourceConnectionIdentifier = sourceConnectionIdentifier;
        }
        
        /// <summary>
        /// The event uuid.
        /// </summary>
        /// <value>The event uuid.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The event id. This is a one up number thats unique per node.
        /// </summary>
        /// <value>The event id. This is a one up number thats unique per node.</value>
        [DataMember(Name="eventId", EmitDefaultValue=false)]
        public long? EventId { get; set; }

        /// <summary>
        /// The timestamp of the event.
        /// </summary>
        /// <value>The timestamp of the event.</value>
        [DataMember(Name="eventTime", EmitDefaultValue=false)]
        public string EventTime { get; set; }

        /// <summary>
        /// The event duration in milliseconds.
        /// </summary>
        /// <value>The event duration in milliseconds.</value>
        [DataMember(Name="eventDuration", EmitDefaultValue=false)]
        public long? EventDuration { get; set; }

        /// <summary>
        /// The duration since the lineage began, in milliseconds.
        /// </summary>
        /// <value>The duration since the lineage began, in milliseconds.</value>
        [DataMember(Name="lineageDuration", EmitDefaultValue=false)]
        public long? LineageDuration { get; set; }

        /// <summary>
        /// The type of the event.
        /// </summary>
        /// <value>The type of the event.</value>
        [DataMember(Name="eventType", EmitDefaultValue=false)]
        public string EventType { get; set; }

        /// <summary>
        /// The uuid of the flowfile for the event.
        /// </summary>
        /// <value>The uuid of the flowfile for the event.</value>
        [DataMember(Name="flowFileUuid", EmitDefaultValue=false)]
        public string FlowFileUuid { get; set; }

        /// <summary>
        /// The size of the flowfile for the event.
        /// </summary>
        /// <value>The size of the flowfile for the event.</value>
        [DataMember(Name="fileSize", EmitDefaultValue=false)]
        public string FileSize { get; set; }

        /// <summary>
        /// The size of the flowfile in bytes for the event.
        /// </summary>
        /// <value>The size of the flowfile in bytes for the event.</value>
        [DataMember(Name="fileSizeBytes", EmitDefaultValue=false)]
        public long? FileSizeBytes { get; set; }

        /// <summary>
        /// The identifier for the node where the event originated.
        /// </summary>
        /// <value>The identifier for the node where the event originated.</value>
        [DataMember(Name="clusterNodeId", EmitDefaultValue=false)]
        public string ClusterNodeId { get; set; }

        /// <summary>
        /// The label for the node where the event originated.
        /// </summary>
        /// <value>The label for the node where the event originated.</value>
        [DataMember(Name="clusterNodeAddress", EmitDefaultValue=false)]
        public string ClusterNodeAddress { get; set; }

        /// <summary>
        /// The id of the group that the component resides in. If the component is no longer in the flow, the group id will not be set.
        /// </summary>
        /// <value>The id of the group that the component resides in. If the component is no longer in the flow, the group id will not be set.</value>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public string GroupId { get; set; }

        /// <summary>
        /// The id of the component that generated the event.
        /// </summary>
        /// <value>The id of the component that generated the event.</value>
        [DataMember(Name="componentId", EmitDefaultValue=false)]
        public string ComponentId { get; set; }

        /// <summary>
        /// The type of the component that generated the event.
        /// </summary>
        /// <value>The type of the component that generated the event.</value>
        [DataMember(Name="componentType", EmitDefaultValue=false)]
        public string ComponentType { get; set; }

        /// <summary>
        /// The name of the component that generated the event.
        /// </summary>
        /// <value>The name of the component that generated the event.</value>
        [DataMember(Name="componentName", EmitDefaultValue=false)]
        public string ComponentName { get; set; }

        /// <summary>
        /// The source system flowfile id.
        /// </summary>
        /// <value>The source system flowfile id.</value>
        [DataMember(Name="sourceSystemFlowFileId", EmitDefaultValue=false)]
        public string SourceSystemFlowFileId { get; set; }

        /// <summary>
        /// The alternate identifier uri for the fileflow for the event.
        /// </summary>
        /// <value>The alternate identifier uri for the fileflow for the event.</value>
        [DataMember(Name="alternateIdentifierUri", EmitDefaultValue=false)]
        public string AlternateIdentifierUri { get; set; }

        /// <summary>
        /// The attributes of the flowfile for the event.
        /// </summary>
        /// <value>The attributes of the flowfile for the event.</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public List<AttributeDTO> Attributes { get; set; }

        /// <summary>
        /// The parent uuids for the event.
        /// </summary>
        /// <value>The parent uuids for the event.</value>
        [DataMember(Name="parentUuids", EmitDefaultValue=false)]
        public List<string> ParentUuids { get; set; }

        /// <summary>
        /// The child uuids for the event.
        /// </summary>
        /// <value>The child uuids for the event.</value>
        [DataMember(Name="childUuids", EmitDefaultValue=false)]
        public List<string> ChildUuids { get; set; }

        /// <summary>
        /// The source/destination system uri if the event was a RECEIVE/SEND.
        /// </summary>
        /// <value>The source/destination system uri if the event was a RECEIVE/SEND.</value>
        [DataMember(Name="transitUri", EmitDefaultValue=false)]
        public string TransitUri { get; set; }

        /// <summary>
        /// The relationship to which the flowfile was routed if the event is of type ROUTE.
        /// </summary>
        /// <value>The relationship to which the flowfile was routed if the event is of type ROUTE.</value>
        [DataMember(Name="relationship", EmitDefaultValue=false)]
        public string Relationship { get; set; }

        /// <summary>
        /// The event details.
        /// </summary>
        /// <value>The event details.</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public string Details { get; set; }

        /// <summary>
        /// Whether the input and output content claim is the same.
        /// </summary>
        /// <value>Whether the input and output content claim is the same.</value>
        [DataMember(Name="contentEqual", EmitDefaultValue=false)]
        public bool? ContentEqual { get; set; }

        /// <summary>
        /// Whether the input content is still available.
        /// </summary>
        /// <value>Whether the input content is still available.</value>
        [DataMember(Name="inputContentAvailable", EmitDefaultValue=false)]
        public bool? InputContentAvailable { get; set; }

        /// <summary>
        /// The section in which the input content claim lives.
        /// </summary>
        /// <value>The section in which the input content claim lives.</value>
        [DataMember(Name="inputContentClaimSection", EmitDefaultValue=false)]
        public string InputContentClaimSection { get; set; }

        /// <summary>
        /// The container in which the input content claim lives.
        /// </summary>
        /// <value>The container in which the input content claim lives.</value>
        [DataMember(Name="inputContentClaimContainer", EmitDefaultValue=false)]
        public string InputContentClaimContainer { get; set; }

        /// <summary>
        /// The identifier of the input content claim.
        /// </summary>
        /// <value>The identifier of the input content claim.</value>
        [DataMember(Name="inputContentClaimIdentifier", EmitDefaultValue=false)]
        public string InputContentClaimIdentifier { get; set; }

        /// <summary>
        /// The offset into the input content claim where the flowfiles content begins.
        /// </summary>
        /// <value>The offset into the input content claim where the flowfiles content begins.</value>
        [DataMember(Name="inputContentClaimOffset", EmitDefaultValue=false)]
        public long? InputContentClaimOffset { get; set; }

        /// <summary>
        /// The file size of the input content claim formatted.
        /// </summary>
        /// <value>The file size of the input content claim formatted.</value>
        [DataMember(Name="inputContentClaimFileSize", EmitDefaultValue=false)]
        public string InputContentClaimFileSize { get; set; }

        /// <summary>
        /// The file size of the intput content claim in bytes.
        /// </summary>
        /// <value>The file size of the intput content claim in bytes.</value>
        [DataMember(Name="inputContentClaimFileSizeBytes", EmitDefaultValue=false)]
        public long? InputContentClaimFileSizeBytes { get; set; }

        /// <summary>
        /// Whether the output content is still available.
        /// </summary>
        /// <value>Whether the output content is still available.</value>
        [DataMember(Name="outputContentAvailable", EmitDefaultValue=false)]
        public bool? OutputContentAvailable { get; set; }

        /// <summary>
        /// The section in which the output content claim lives.
        /// </summary>
        /// <value>The section in which the output content claim lives.</value>
        [DataMember(Name="outputContentClaimSection", EmitDefaultValue=false)]
        public string OutputContentClaimSection { get; set; }

        /// <summary>
        /// The container in which the output content claim lives.
        /// </summary>
        /// <value>The container in which the output content claim lives.</value>
        [DataMember(Name="outputContentClaimContainer", EmitDefaultValue=false)]
        public string OutputContentClaimContainer { get; set; }

        /// <summary>
        /// The identifier of the output content claim.
        /// </summary>
        /// <value>The identifier of the output content claim.</value>
        [DataMember(Name="outputContentClaimIdentifier", EmitDefaultValue=false)]
        public string OutputContentClaimIdentifier { get; set; }

        /// <summary>
        /// The offset into the output content claim where the flowfiles content begins.
        /// </summary>
        /// <value>The offset into the output content claim where the flowfiles content begins.</value>
        [DataMember(Name="outputContentClaimOffset", EmitDefaultValue=false)]
        public long? OutputContentClaimOffset { get; set; }

        /// <summary>
        /// The file size of the output content claim formatted.
        /// </summary>
        /// <value>The file size of the output content claim formatted.</value>
        [DataMember(Name="outputContentClaimFileSize", EmitDefaultValue=false)]
        public string OutputContentClaimFileSize { get; set; }

        /// <summary>
        /// The file size of the output content claim in bytes.
        /// </summary>
        /// <value>The file size of the output content claim in bytes.</value>
        [DataMember(Name="outputContentClaimFileSizeBytes", EmitDefaultValue=false)]
        public long? OutputContentClaimFileSizeBytes { get; set; }

        /// <summary>
        /// Whether or not replay is available.
        /// </summary>
        /// <value>Whether or not replay is available.</value>
        [DataMember(Name="replayAvailable", EmitDefaultValue=false)]
        public bool? ReplayAvailable { get; set; }

        /// <summary>
        /// Explanation as to why replay is unavailable.
        /// </summary>
        /// <value>Explanation as to why replay is unavailable.</value>
        [DataMember(Name="replayExplanation", EmitDefaultValue=false)]
        public string ReplayExplanation { get; set; }

        /// <summary>
        /// The identifier of the queue/connection from which the flowfile was pulled to genereate this event. May be null if the queue/connection is unknown or the flowfile was generated from this event.
        /// </summary>
        /// <value>The identifier of the queue/connection from which the flowfile was pulled to genereate this event. May be null if the queue/connection is unknown or the flowfile was generated from this event.</value>
        [DataMember(Name="sourceConnectionIdentifier", EmitDefaultValue=false)]
        public string SourceConnectionIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvenanceEventDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  EventId: ").Append(this.EventId).Append("\n");
            sb.Append("  EventTime: ").Append(this.EventTime).Append("\n");
            sb.Append("  EventDuration: ").Append(this.EventDuration).Append("\n");
            sb.Append("  LineageDuration: ").Append(this.LineageDuration).Append("\n");
            sb.Append("  EventType: ").Append(this.EventType).Append("\n");
            sb.Append("  FlowFileUuid: ").Append(this.FlowFileUuid).Append("\n");
            sb.Append("  FileSize: ").Append(this.FileSize).Append("\n");
            sb.Append("  FileSizeBytes: ").Append(this.FileSizeBytes).Append("\n");
            sb.Append("  ClusterNodeId: ").Append(this.ClusterNodeId).Append("\n");
            sb.Append("  ClusterNodeAddress: ").Append(this.ClusterNodeAddress).Append("\n");
            sb.Append("  GroupId: ").Append(this.GroupId).Append("\n");
            sb.Append("  ComponentId: ").Append(this.ComponentId).Append("\n");
            sb.Append("  ComponentType: ").Append(this.ComponentType).Append("\n");
            sb.Append("  ComponentName: ").Append(this.ComponentName).Append("\n");
            sb.Append("  SourceSystemFlowFileId: ").Append(this.SourceSystemFlowFileId).Append("\n");
            sb.Append("  AlternateIdentifierUri: ").Append(this.AlternateIdentifierUri).Append("\n");
            sb.Append("  Attributes: ").Append(this.Attributes).Append("\n");
            sb.Append("  ParentUuids: ").Append(this.ParentUuids).Append("\n");
            sb.Append("  ChildUuids: ").Append(this.ChildUuids).Append("\n");
            sb.Append("  TransitUri: ").Append(this.TransitUri).Append("\n");
            sb.Append("  Relationship: ").Append(this.Relationship).Append("\n");
            sb.Append("  Details: ").Append(this.Details).Append("\n");
            sb.Append("  ContentEqual: ").Append(this.ContentEqual).Append("\n");
            sb.Append("  InputContentAvailable: ").Append(this.InputContentAvailable).Append("\n");
            sb.Append("  InputContentClaimSection: ").Append(this.InputContentClaimSection).Append("\n");
            sb.Append("  InputContentClaimContainer: ").Append(this.InputContentClaimContainer).Append("\n");
            sb.Append("  InputContentClaimIdentifier: ").Append(this.InputContentClaimIdentifier).Append("\n");
            sb.Append("  InputContentClaimOffset: ").Append(this.InputContentClaimOffset).Append("\n");
            sb.Append("  InputContentClaimFileSize: ").Append(this.InputContentClaimFileSize).Append("\n");
            sb.Append("  InputContentClaimFileSizeBytes: ").Append(this.InputContentClaimFileSizeBytes).Append("\n");
            sb.Append("  OutputContentAvailable: ").Append(this.OutputContentAvailable).Append("\n");
            sb.Append("  OutputContentClaimSection: ").Append(this.OutputContentClaimSection).Append("\n");
            sb.Append("  OutputContentClaimContainer: ").Append(this.OutputContentClaimContainer).Append("\n");
            sb.Append("  OutputContentClaimIdentifier: ").Append(this.OutputContentClaimIdentifier).Append("\n");
            sb.Append("  OutputContentClaimOffset: ").Append(this.OutputContentClaimOffset).Append("\n");
            sb.Append("  OutputContentClaimFileSize: ").Append(this.OutputContentClaimFileSize).Append("\n");
            sb.Append("  OutputContentClaimFileSizeBytes: ").Append(this.OutputContentClaimFileSizeBytes).Append("\n");
            sb.Append("  ReplayAvailable: ").Append(this.ReplayAvailable).Append("\n");
            sb.Append("  ReplayExplanation: ").Append(this.ReplayExplanation).Append("\n");
            sb.Append("  SourceConnectionIdentifier: ").Append(this.SourceConnectionIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProvenanceEventDTO);
        }

        /// <summary>
        /// Returns true if ProvenanceEventDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ProvenanceEventDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvenanceEventDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.EventTime == input.EventTime ||
                    (this.EventTime != null &&
                    this.EventTime.Equals(input.EventTime))
                ) && 
                (
                    this.EventDuration == input.EventDuration ||
                    (this.EventDuration != null &&
                    this.EventDuration.Equals(input.EventDuration))
                ) && 
                (
                    this.LineageDuration == input.LineageDuration ||
                    (this.LineageDuration != null &&
                    this.LineageDuration.Equals(input.LineageDuration))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.FlowFileUuid == input.FlowFileUuid ||
                    (this.FlowFileUuid != null &&
                    this.FlowFileUuid.Equals(input.FlowFileUuid))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.FileSizeBytes == input.FileSizeBytes ||
                    (this.FileSizeBytes != null &&
                    this.FileSizeBytes.Equals(input.FileSizeBytes))
                ) && 
                (
                    this.ClusterNodeId == input.ClusterNodeId ||
                    (this.ClusterNodeId != null &&
                    this.ClusterNodeId.Equals(input.ClusterNodeId))
                ) && 
                (
                    this.ClusterNodeAddress == input.ClusterNodeAddress ||
                    (this.ClusterNodeAddress != null &&
                    this.ClusterNodeAddress.Equals(input.ClusterNodeAddress))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.ComponentId == input.ComponentId ||
                    (this.ComponentId != null &&
                    this.ComponentId.Equals(input.ComponentId))
                ) && 
                (
                    this.ComponentType == input.ComponentType ||
                    (this.ComponentType != null &&
                    this.ComponentType.Equals(input.ComponentType))
                ) && 
                (
                    this.ComponentName == input.ComponentName ||
                    (this.ComponentName != null &&
                    this.ComponentName.Equals(input.ComponentName))
                ) && 
                (
                    this.SourceSystemFlowFileId == input.SourceSystemFlowFileId ||
                    (this.SourceSystemFlowFileId != null &&
                    this.SourceSystemFlowFileId.Equals(input.SourceSystemFlowFileId))
                ) && 
                (
                    this.AlternateIdentifierUri == input.AlternateIdentifierUri ||
                    (this.AlternateIdentifierUri != null &&
                    this.AlternateIdentifierUri.Equals(input.AlternateIdentifierUri))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.ParentUuids == input.ParentUuids ||
                    this.ParentUuids != null &&
                    this.ParentUuids.SequenceEqual(input.ParentUuids)
                ) && 
                (
                    this.ChildUuids == input.ChildUuids ||
                    this.ChildUuids != null &&
                    this.ChildUuids.SequenceEqual(input.ChildUuids)
                ) && 
                (
                    this.TransitUri == input.TransitUri ||
                    (this.TransitUri != null &&
                    this.TransitUri.Equals(input.TransitUri))
                ) && 
                (
                    this.Relationship == input.Relationship ||
                    (this.Relationship != null &&
                    this.Relationship.Equals(input.Relationship))
                ) && 
                (
                    this.Details == input.Details ||
                    (this.Details != null &&
                    this.Details.Equals(input.Details))
                ) && 
                (
                    this.ContentEqual == input.ContentEqual ||
                    (this.ContentEqual != null &&
                    this.ContentEqual.Equals(input.ContentEqual))
                ) && 
                (
                    this.InputContentAvailable == input.InputContentAvailable ||
                    (this.InputContentAvailable != null &&
                    this.InputContentAvailable.Equals(input.InputContentAvailable))
                ) && 
                (
                    this.InputContentClaimSection == input.InputContentClaimSection ||
                    (this.InputContentClaimSection != null &&
                    this.InputContentClaimSection.Equals(input.InputContentClaimSection))
                ) && 
                (
                    this.InputContentClaimContainer == input.InputContentClaimContainer ||
                    (this.InputContentClaimContainer != null &&
                    this.InputContentClaimContainer.Equals(input.InputContentClaimContainer))
                ) && 
                (
                    this.InputContentClaimIdentifier == input.InputContentClaimIdentifier ||
                    (this.InputContentClaimIdentifier != null &&
                    this.InputContentClaimIdentifier.Equals(input.InputContentClaimIdentifier))
                ) && 
                (
                    this.InputContentClaimOffset == input.InputContentClaimOffset ||
                    (this.InputContentClaimOffset != null &&
                    this.InputContentClaimOffset.Equals(input.InputContentClaimOffset))
                ) && 
                (
                    this.InputContentClaimFileSize == input.InputContentClaimFileSize ||
                    (this.InputContentClaimFileSize != null &&
                    this.InputContentClaimFileSize.Equals(input.InputContentClaimFileSize))
                ) && 
                (
                    this.InputContentClaimFileSizeBytes == input.InputContentClaimFileSizeBytes ||
                    (this.InputContentClaimFileSizeBytes != null &&
                    this.InputContentClaimFileSizeBytes.Equals(input.InputContentClaimFileSizeBytes))
                ) && 
                (
                    this.OutputContentAvailable == input.OutputContentAvailable ||
                    (this.OutputContentAvailable != null &&
                    this.OutputContentAvailable.Equals(input.OutputContentAvailable))
                ) && 
                (
                    this.OutputContentClaimSection == input.OutputContentClaimSection ||
                    (this.OutputContentClaimSection != null &&
                    this.OutputContentClaimSection.Equals(input.OutputContentClaimSection))
                ) && 
                (
                    this.OutputContentClaimContainer == input.OutputContentClaimContainer ||
                    (this.OutputContentClaimContainer != null &&
                    this.OutputContentClaimContainer.Equals(input.OutputContentClaimContainer))
                ) && 
                (
                    this.OutputContentClaimIdentifier == input.OutputContentClaimIdentifier ||
                    (this.OutputContentClaimIdentifier != null &&
                    this.OutputContentClaimIdentifier.Equals(input.OutputContentClaimIdentifier))
                ) && 
                (
                    this.OutputContentClaimOffset == input.OutputContentClaimOffset ||
                    (this.OutputContentClaimOffset != null &&
                    this.OutputContentClaimOffset.Equals(input.OutputContentClaimOffset))
                ) && 
                (
                    this.OutputContentClaimFileSize == input.OutputContentClaimFileSize ||
                    (this.OutputContentClaimFileSize != null &&
                    this.OutputContentClaimFileSize.Equals(input.OutputContentClaimFileSize))
                ) && 
                (
                    this.OutputContentClaimFileSizeBytes == input.OutputContentClaimFileSizeBytes ||
                    (this.OutputContentClaimFileSizeBytes != null &&
                    this.OutputContentClaimFileSizeBytes.Equals(input.OutputContentClaimFileSizeBytes))
                ) && 
                (
                    this.ReplayAvailable == input.ReplayAvailable ||
                    (this.ReplayAvailable != null &&
                    this.ReplayAvailable.Equals(input.ReplayAvailable))
                ) && 
                (
                    this.ReplayExplanation == input.ReplayExplanation ||
                    (this.ReplayExplanation != null &&
                    this.ReplayExplanation.Equals(input.ReplayExplanation))
                ) && 
                (
                    this.SourceConnectionIdentifier == input.SourceConnectionIdentifier ||
                    (this.SourceConnectionIdentifier != null &&
                    this.SourceConnectionIdentifier.Equals(input.SourceConnectionIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.EventId != null)
                    hashCode = hashCode * 59 + this.EventId.GetHashCode();
                if (this.EventTime != null)
                    hashCode = hashCode * 59 + this.EventTime.GetHashCode();
                if (this.EventDuration != null)
                    hashCode = hashCode * 59 + this.EventDuration.GetHashCode();
                if (this.LineageDuration != null)
                    hashCode = hashCode * 59 + this.LineageDuration.GetHashCode();
                if (this.EventType != null)
                    hashCode = hashCode * 59 + this.EventType.GetHashCode();
                if (this.FlowFileUuid != null)
                    hashCode = hashCode * 59 + this.FlowFileUuid.GetHashCode();
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.FileSizeBytes != null)
                    hashCode = hashCode * 59 + this.FileSizeBytes.GetHashCode();
                if (this.ClusterNodeId != null)
                    hashCode = hashCode * 59 + this.ClusterNodeId.GetHashCode();
                if (this.ClusterNodeAddress != null)
                    hashCode = hashCode * 59 + this.ClusterNodeAddress.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.ComponentId != null)
                    hashCode = hashCode * 59 + this.ComponentId.GetHashCode();
                if (this.ComponentType != null)
                    hashCode = hashCode * 59 + this.ComponentType.GetHashCode();
                if (this.ComponentName != null)
                    hashCode = hashCode * 59 + this.ComponentName.GetHashCode();
                if (this.SourceSystemFlowFileId != null)
                    hashCode = hashCode * 59 + this.SourceSystemFlowFileId.GetHashCode();
                if (this.AlternateIdentifierUri != null)
                    hashCode = hashCode * 59 + this.AlternateIdentifierUri.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.ParentUuids != null)
                    hashCode = hashCode * 59 + this.ParentUuids.GetHashCode();
                if (this.ChildUuids != null)
                    hashCode = hashCode * 59 + this.ChildUuids.GetHashCode();
                if (this.TransitUri != null)
                    hashCode = hashCode * 59 + this.TransitUri.GetHashCode();
                if (this.Relationship != null)
                    hashCode = hashCode * 59 + this.Relationship.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                if (this.ContentEqual != null)
                    hashCode = hashCode * 59 + this.ContentEqual.GetHashCode();
                if (this.InputContentAvailable != null)
                    hashCode = hashCode * 59 + this.InputContentAvailable.GetHashCode();
                if (this.InputContentClaimSection != null)
                    hashCode = hashCode * 59 + this.InputContentClaimSection.GetHashCode();
                if (this.InputContentClaimContainer != null)
                    hashCode = hashCode * 59 + this.InputContentClaimContainer.GetHashCode();
                if (this.InputContentClaimIdentifier != null)
                    hashCode = hashCode * 59 + this.InputContentClaimIdentifier.GetHashCode();
                if (this.InputContentClaimOffset != null)
                    hashCode = hashCode * 59 + this.InputContentClaimOffset.GetHashCode();
                if (this.InputContentClaimFileSize != null)
                    hashCode = hashCode * 59 + this.InputContentClaimFileSize.GetHashCode();
                if (this.InputContentClaimFileSizeBytes != null)
                    hashCode = hashCode * 59 + this.InputContentClaimFileSizeBytes.GetHashCode();
                if (this.OutputContentAvailable != null)
                    hashCode = hashCode * 59 + this.OutputContentAvailable.GetHashCode();
                if (this.OutputContentClaimSection != null)
                    hashCode = hashCode * 59 + this.OutputContentClaimSection.GetHashCode();
                if (this.OutputContentClaimContainer != null)
                    hashCode = hashCode * 59 + this.OutputContentClaimContainer.GetHashCode();
                if (this.OutputContentClaimIdentifier != null)
                    hashCode = hashCode * 59 + this.OutputContentClaimIdentifier.GetHashCode();
                if (this.OutputContentClaimOffset != null)
                    hashCode = hashCode * 59 + this.OutputContentClaimOffset.GetHashCode();
                if (this.OutputContentClaimFileSize != null)
                    hashCode = hashCode * 59 + this.OutputContentClaimFileSize.GetHashCode();
                if (this.OutputContentClaimFileSizeBytes != null)
                    hashCode = hashCode * 59 + this.OutputContentClaimFileSizeBytes.GetHashCode();
                if (this.ReplayAvailable != null)
                    hashCode = hashCode * 59 + this.ReplayAvailable.GetHashCode();
                if (this.ReplayExplanation != null)
                    hashCode = hashCode * 59 + this.ReplayExplanation.GetHashCode();
                if (this.SourceConnectionIdentifier != null)
                    hashCode = hashCode * 59 + this.SourceConnectionIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
