/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// ActionDTO
    /// </summary>
    [DataContract]
    public partial class ActionDTO :  IEquatable<ActionDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionDTO" /> class.
        /// </summary>
        /// <param name="id">The action id..</param>
        /// <param name="userIdentity">The identity of the user that performed the action..</param>
        /// <param name="timestamp">The timestamp of the action..</param>
        /// <param name="sourceId">The id of the source component..</param>
        /// <param name="sourceName">The name of the source component..</param>
        /// <param name="sourceType">The type of the source component..</param>
        /// <param name="componentDetails">The details of the source component..</param>
        /// <param name="operation">The operation that was performed..</param>
        /// <param name="actionDetails">The details of the action..</param>
        public ActionDTO(int? id = default(int?), string userIdentity = default(string), string timestamp = default(string), string sourceId = default(string), string sourceName = default(string), string sourceType = default(string), ComponentDetailsDTO componentDetails = default(ComponentDetailsDTO), string operation = default(string), ActionDetailsDTO actionDetails = default(ActionDetailsDTO))
        {
            this.Id = id;
            this.UserIdentity = userIdentity;
            this.Timestamp = timestamp;
            this.SourceId = sourceId;
            this.SourceName = sourceName;
            this.SourceType = sourceType;
            this.ComponentDetails = componentDetails;
            this.Operation = operation;
            this.ActionDetails = actionDetails;
        }
        
        /// <summary>
        /// The action id.
        /// </summary>
        /// <value>The action id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The identity of the user that performed the action.
        /// </summary>
        /// <value>The identity of the user that performed the action.</value>
        [DataMember(Name="userIdentity", EmitDefaultValue=false)]
        public string UserIdentity { get; set; }

        /// <summary>
        /// The timestamp of the action.
        /// </summary>
        /// <value>The timestamp of the action.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// The id of the source component.
        /// </summary>
        /// <value>The id of the source component.</value>
        [DataMember(Name="sourceId", EmitDefaultValue=false)]
        public string SourceId { get; set; }

        /// <summary>
        /// The name of the source component.
        /// </summary>
        /// <value>The name of the source component.</value>
        [DataMember(Name="sourceName", EmitDefaultValue=false)]
        public string SourceName { get; set; }

        /// <summary>
        /// The type of the source component.
        /// </summary>
        /// <value>The type of the source component.</value>
        [DataMember(Name="sourceType", EmitDefaultValue=false)]
        public string SourceType { get; set; }

        /// <summary>
        /// The details of the source component.
        /// </summary>
        /// <value>The details of the source component.</value>
        [DataMember(Name="componentDetails", EmitDefaultValue=false)]
        public ComponentDetailsDTO ComponentDetails { get; set; }

        /// <summary>
        /// The operation that was performed.
        /// </summary>
        /// <value>The operation that was performed.</value>
        [DataMember(Name="operation", EmitDefaultValue=false)]
        public string Operation { get; set; }

        /// <summary>
        /// The details of the action.
        /// </summary>
        /// <value>The details of the action.</value>
        [DataMember(Name="actionDetails", EmitDefaultValue=false)]
        public ActionDetailsDTO ActionDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActionDTO {\n");
            sb.Append("  Id: ").Append(this.Id).Append("\n");
            sb.Append("  UserIdentity: ").Append(this.UserIdentity).Append("\n");
            sb.Append("  Timestamp: ").Append(this.Timestamp).Append("\n");
            sb.Append("  SourceId: ").Append(this.SourceId).Append("\n");
            sb.Append("  SourceName: ").Append(this.SourceName).Append("\n");
            sb.Append("  SourceType: ").Append(this.SourceType).Append("\n");
            sb.Append("  ComponentDetails: ").Append(this.ComponentDetails).Append("\n");
            sb.Append("  Operation: ").Append(this.Operation).Append("\n");
            sb.Append("  ActionDetails: ").Append(this.ActionDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActionDTO);
        }

        /// <summary>
        /// Returns true if ActionDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of ActionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserIdentity == input.UserIdentity ||
                    (this.UserIdentity != null &&
                    this.UserIdentity.Equals(input.UserIdentity))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.SourceName == input.SourceName ||
                    (this.SourceName != null &&
                    this.SourceName.Equals(input.SourceName))
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    (this.SourceType != null &&
                    this.SourceType.Equals(input.SourceType))
                ) && 
                (
                    this.ComponentDetails == input.ComponentDetails ||
                    (this.ComponentDetails != null &&
                    this.ComponentDetails.Equals(input.ComponentDetails))
                ) && 
                (
                    this.Operation == input.Operation ||
                    (this.Operation != null &&
                    this.Operation.Equals(input.Operation))
                ) && 
                (
                    this.ActionDetails == input.ActionDetails ||
                    (this.ActionDetails != null &&
                    this.ActionDetails.Equals(input.ActionDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UserIdentity != null)
                    hashCode = hashCode * 59 + this.UserIdentity.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.SourceId != null)
                    hashCode = hashCode * 59 + this.SourceId.GetHashCode();
                if (this.SourceName != null)
                    hashCode = hashCode * 59 + this.SourceName.GetHashCode();
                if (this.SourceType != null)
                    hashCode = hashCode * 59 + this.SourceType.GetHashCode();
                if (this.ComponentDetails != null)
                    hashCode = hashCode * 59 + this.ComponentDetails.GetHashCode();
                if (this.Operation != null)
                    hashCode = hashCode * 59 + this.Operation.GetHashCode();
                if (this.ActionDetails != null)
                    hashCode = hashCode * 59 + this.ActionDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
