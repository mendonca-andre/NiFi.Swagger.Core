/* 
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.9.1
 * Contact: dev@nifi.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace NiFi.Swagger.Core.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;

    using Newtonsoft.Json;

    /// <summary>
    /// HistoryDTO
    /// </summary>
    [DataContract]
    public partial class HistoryDTO :  IEquatable<HistoryDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryDTO" /> class.
        /// </summary>
        /// <param name="total">The number of number of actions that matched the search criteria...</param>
        /// <param name="lastRefreshed">The timestamp when the report was generated..</param>
        /// <param name="actions">The actions..</param>
        public HistoryDTO(int? total = default(int?), string lastRefreshed = default(string), List<ActionEntity> actions = default(List<ActionEntity>))
        {
            this.Total = total;
            this.LastRefreshed = lastRefreshed;
            this.Actions = actions;
        }
        
        /// <summary>
        /// The number of number of actions that matched the search criteria..
        /// </summary>
        /// <value>The number of number of actions that matched the search criteria..</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public int? Total { get; set; }

        /// <summary>
        /// The timestamp when the report was generated.
        /// </summary>
        /// <value>The timestamp when the report was generated.</value>
        [DataMember(Name="lastRefreshed", EmitDefaultValue=false)]
        public string LastRefreshed { get; set; }

        /// <summary>
        /// The actions.
        /// </summary>
        /// <value>The actions.</value>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<ActionEntity> Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HistoryDTO {\n");
            sb.Append("  Total: ").Append(this.Total).Append("\n");
            sb.Append("  LastRefreshed: ").Append(this.LastRefreshed).Append("\n");
            sb.Append("  Actions: ").Append(this.Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HistoryDTO);
        }

        /// <summary>
        /// Returns true if HistoryDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of HistoryDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HistoryDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.LastRefreshed == input.LastRefreshed ||
                    (this.LastRefreshed != null &&
                    this.LastRefreshed.Equals(input.LastRefreshed))
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.LastRefreshed != null)
                    hashCode = hashCode * 59 + this.LastRefreshed.GetHashCode();
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
